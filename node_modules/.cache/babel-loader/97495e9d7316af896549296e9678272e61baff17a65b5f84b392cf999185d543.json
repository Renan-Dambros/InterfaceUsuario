{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/renan/ionic-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/renan/ionic-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { g as getScrollElement, c as scrollByPoint, a as findClosestIonContent } from './index8.js';\nimport { a as addEventListener, b as removeEventListener, r as raf, c as componentOnReady } from './helpers.js';\nimport { a as KeyboardResize, K as Keyboard } from './keyboard.js';\nimport { w as win } from './index5.js';\nvar cloneMap = new WeakMap();\nvar relocateInput = function relocateInput(componentEl, inputEl, shouldRelocate) {\n  var inputRelativeY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var disabledClonedInput = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (cloneMap.has(componentEl) === shouldRelocate) {\n    return;\n  }\n  if (shouldRelocate) {\n    addClone(componentEl, inputEl, inputRelativeY, disabledClonedInput);\n  } else {\n    removeClone(componentEl, inputEl);\n  }\n};\n// TODO(FW-2832): type\nvar isFocused = function isFocused(input) {\n  return input === input.getRootNode().activeElement;\n};\nvar addClone = function addClone(componentEl, inputEl, inputRelativeY) {\n  var disabledClonedInput = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  // this allows for the actual input to receive the focus from\n  // the user's touch event, but before it receives focus, it\n  // moves the actual input to a location that will not screw\n  // up the app's layout, and does not allow the native browser\n  // to attempt to scroll the input into place (messing up headers/footers)\n  // the cloned input fills the area of where native input should be\n  // while the native input fakes out the browser by relocating itself\n  // before it receives the actual focus event\n  // We hide the focused input (with the visible caret) invisible by making it scale(0),\n  var parentEl = inputEl.parentNode;\n  // DOM WRITES\n  var clonedEl = inputEl.cloneNode(false);\n  clonedEl.classList.add('cloned-input');\n  clonedEl.tabIndex = -1;\n  /**\n   * Making the cloned input disabled prevents\n   * Chrome for Android from still scrolling\n   * the entire page since this cloned input\n   * will briefly be hidden by the keyboard\n   * even though it is not focused.\n   *\n   * This is not needed on iOS. While this\n   * does not cause functional issues on iOS,\n   * the input still appears slightly dimmed even\n   * if we set opacity: 1.\n   */\n  if (disabledClonedInput) {\n    clonedEl.disabled = true;\n  }\n  parentEl.appendChild(clonedEl);\n  cloneMap.set(componentEl, clonedEl);\n  var doc = componentEl.ownerDocument;\n  var tx = doc.dir === 'rtl' ? 9999 : -9999;\n  componentEl.style.pointerEvents = 'none';\n  inputEl.style.transform = \"translate3d(\".concat(tx, \"px,\").concat(inputRelativeY, \"px,0) scale(0)\");\n};\nvar removeClone = function removeClone(componentEl, inputEl) {\n  var clone = cloneMap.get(componentEl);\n  if (clone) {\n    cloneMap.delete(componentEl);\n    clone.remove();\n  }\n  componentEl.style.pointerEvents = '';\n  inputEl.style.transform = '';\n};\n/**\n * Factoring in 50px gives us some room\n * in case the keyboard shows password/autofill bars\n * asynchronously.\n */\nvar SCROLL_AMOUNT_PADDING = 50;\nvar enableHideCaretOnScroll = function enableHideCaretOnScroll(componentEl, inputEl, scrollEl) {\n  if (!scrollEl || !inputEl) {\n    return function () {\n      return;\n    };\n  }\n  var scrollHideCaret = function scrollHideCaret(shouldHideCaret) {\n    if (isFocused(inputEl)) {\n      relocateInput(componentEl, inputEl, shouldHideCaret);\n    }\n  };\n  var onBlur = function onBlur() {\n    return relocateInput(componentEl, inputEl, false);\n  };\n  var hideCaret = function hideCaret() {\n    return scrollHideCaret(true);\n  };\n  var showCaret = function showCaret() {\n    return scrollHideCaret(false);\n  };\n  addEventListener(scrollEl, 'ionScrollStart', hideCaret);\n  addEventListener(scrollEl, 'ionScrollEnd', showCaret);\n  inputEl.addEventListener('blur', onBlur);\n  return function () {\n    removeEventListener(scrollEl, 'ionScrollStart', hideCaret);\n    removeEventListener(scrollEl, 'ionScrollEnd', showCaret);\n    inputEl.removeEventListener('blur', onBlur);\n  };\n};\nvar SKIP_SELECTOR = 'input, textarea, [no-blur], [contenteditable]';\nvar enableInputBlurring = function enableInputBlurring() {\n  var focused = true;\n  var didScroll = false;\n  var doc = document;\n  var onScroll = function onScroll() {\n    didScroll = true;\n  };\n  var onFocusin = function onFocusin() {\n    focused = true;\n  };\n  var onTouchend = function onTouchend(ev) {\n    // if app did scroll return early\n    if (didScroll) {\n      didScroll = false;\n      return;\n    }\n    var active = doc.activeElement;\n    if (!active) {\n      return;\n    }\n    // only blur if the active element is a text-input or a textarea\n    if (active.matches(SKIP_SELECTOR)) {\n      return;\n    }\n    // if the selected target is the active element, do not blur\n    var tapped = ev.target;\n    if (tapped === active) {\n      return;\n    }\n    if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n      return;\n    }\n    focused = false;\n    // TODO FW-2796: find a better way, why 50ms?\n    setTimeout(function () {\n      if (!focused) {\n        active.blur();\n      }\n    }, 50);\n  };\n  addEventListener(doc, 'ionScrollStart', onScroll);\n  doc.addEventListener('focusin', onFocusin, true);\n  doc.addEventListener('touchend', onTouchend, false);\n  return function () {\n    removeEventListener(doc, 'ionScrollStart', onScroll, true);\n    doc.removeEventListener('focusin', onFocusin, true);\n    doc.removeEventListener('touchend', onTouchend, false);\n  };\n};\nvar SCROLL_ASSIST_SPEED = 0.3;\nvar getScrollData = function getScrollData(componentEl, contentEl, keyboardHeight, platformHeight) {\n  var _a;\n  var itemEl = (_a = componentEl.closest('ion-item,[ion-item]')) !== null && _a !== void 0 ? _a : componentEl;\n  return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, platformHeight);\n};\nvar calcScrollData = function calcScrollData(inputRect, contentRect, keyboardHeight, platformHeight) {\n  // compute input's Y values relative to the body\n  var inputTop = inputRect.top;\n  var inputBottom = inputRect.bottom;\n  // compute visible area\n  var visibleAreaTop = contentRect.top;\n  var visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n  // compute safe area\n  var safeAreaTop = visibleAreaTop + 15;\n  var safeAreaBottom = visibleAreaBottom - SCROLL_AMOUNT_PADDING;\n  // figure out if each edge of the input is within the safe area\n  var distanceToBottom = safeAreaBottom - inputBottom;\n  var distanceToTop = safeAreaTop - inputTop;\n  // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n  var desiredScrollAmount = Math.round(distanceToBottom < 0 ? -distanceToBottom : distanceToTop > 0 ? -distanceToTop : 0);\n  // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n  // gets focus, so make sure we don't scroll the input above the visible area\n  var scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n  var distance = Math.abs(scrollAmount);\n  var duration = distance / SCROLL_ASSIST_SPEED;\n  var scrollDuration = Math.min(400, Math.max(150, duration));\n  return {\n    scrollAmount: scrollAmount,\n    scrollDuration: scrollDuration,\n    scrollPadding: keyboardHeight,\n    inputSafeY: -(inputTop - safeAreaTop) + 4\n  };\n};\nvar PADDING_TIMER_KEY = '$ionPaddingTimer';\n/**\n * Scroll padding adds additional padding to the bottom\n * of ion-content so that there is enough scroll space\n * for an input to be scrolled above the keyboard. This\n * is needed in environments where the webview does not\n * resize when the keyboard opens.\n *\n * Example: If an input at the bottom of ion-content is\n * focused, there is no additional scrolling space below\n * it, so the input cannot be scrolled above the keyboard.\n * Scroll padding fixes this by adding padding equal to the\n * height of the keyboard to the bottom of the content.\n *\n * Common environments where this is needed:\n * - Mobile Safari: The keyboard overlays the content\n * - Capacitor/Cordova on iOS: The keyboard overlays the content\n * when the KeyboardResize mode is set to 'none'.\n */\nvar setScrollPadding = function setScrollPadding(contentEl, paddingAmount, clearCallback) {\n  var timer = contentEl[PADDING_TIMER_KEY];\n  if (timer) {\n    clearTimeout(timer);\n  }\n  if (paddingAmount > 0) {\n    contentEl.style.setProperty('--keyboard-offset', \"\".concat(paddingAmount, \"px\"));\n  } else {\n    contentEl[PADDING_TIMER_KEY] = setTimeout(function () {\n      contentEl.style.setProperty('--keyboard-offset', '0px');\n      if (clearCallback) {\n        clearCallback();\n      }\n    }, 120);\n  }\n};\n/**\n * When an input is about to be focused,\n * set a timeout to clear any scroll padding\n * on the content. Note: The clearing\n * is done on a timeout so that if users\n * are moving focus from one input to the next\n * then re-adding scroll padding to the new\n * input with cancel the timeout to clear the\n * scroll padding.\n */\nvar setClearScrollPaddingListener = function setClearScrollPaddingListener(inputEl, contentEl, doneCallback) {\n  var clearScrollPadding = function clearScrollPadding() {\n    if (contentEl) {\n      setScrollPadding(contentEl, 0, doneCallback);\n    }\n  };\n  inputEl.addEventListener('focusout', clearScrollPadding, {\n    once: true\n  });\n};\nvar currentPadding = 0;\nvar SKIP_SCROLL_ASSIST = 'data-ionic-skip-scroll-assist';\nvar enableScrollAssist = function enableScrollAssist(componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, keyboardResize) {\n  var disableClonedInput = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;\n  /**\n   * Scroll padding should only be added if:\n   * 1. The global scrollPadding config option\n   * is set to true.\n   * 2. The native keyboard resize mode is either \"none\"\n   * (keyboard overlays webview) or undefined (resize\n   * information unavailable)\n   * Resize info is available on Capacitor 4+\n   */\n  var addScrollPadding = enableScrollPadding && (keyboardResize === undefined || keyboardResize.mode === KeyboardResize.None);\n  /**\n   * This tracks whether or not the keyboard has been\n   * presented for a single focused text field. Note\n   * that it does not track if the keyboard is open\n   * in general such as if the keyboard is open for\n   * a different focused text field.\n   */\n  var hasKeyboardBeenPresentedForTextField = false;\n  /**\n   * When adding scroll padding we need to know\n   * how much of the viewport the keyboard obscures.\n   * We do this by subtracting the keyboard height\n   * from the platform height.\n   *\n   * If we compute this value when switching between\n   * inputs then the webview may already be resized.\n   * At this point, `win.innerHeight` has already accounted\n   * for the keyboard meaning we would then subtract\n   * the keyboard height again. This will result in the input\n   * being scrolled more than it needs to.\n   */\n  var platformHeight = win !== undefined ? win.innerHeight : 0;\n  /**\n   * Scroll assist is run when a text field\n   * is focused. However, it may need to\n   * re-run when the keyboard size changes\n   * such that the text field is now hidden\n   * underneath the keyboard.\n   * This function re-runs scroll assist\n   * when that happens.\n   *\n   * One limitation of this is on a web browser\n   * where native keyboard APIs do not have cross-browser\n   * support. `ionKeyboardDidShow` relies on the Visual Viewport API.\n   * This means that if the keyboard changes but does not change\n   * geometry, then scroll assist will not re-run even if\n   * the user has scrolled the text field under the keyboard.\n   * This is not a problem when running in Cordova/Capacitor\n   * because `ionKeyboardDidShow` uses the native events\n   * which fire every time the keyboard changes.\n   */\n  var keyboardShow = function keyboardShow(ev) {\n    /**\n     * If the keyboard has not yet been presented\n     * for this text field then the text field has just\n     * received focus. In that case, the focusin listener\n     * will run scroll assist.\n     */\n    if (hasKeyboardBeenPresentedForTextField === false) {\n      hasKeyboardBeenPresentedForTextField = true;\n      return;\n    }\n    /**\n     * Otherwise, the keyboard has already been presented\n     * for the focused text field.\n     * This means that the keyboard likely changed\n     * geometry, and we need to re-run scroll assist.\n     * This can happen when the user rotates their device\n     * or when they switch keyboards.\n     *\n     * Make sure we pass in the computed keyboard height\n     * rather than the estimated keyboard height.\n     *\n     * Since the keyboard is already open then we do not\n     * need to wait for the webview to resize, so we pass\n     * \"waitForResize: false\".\n     */\n    jsSetFocus(componentEl, inputEl, contentEl, footerEl, ev.detail.keyboardHeight, addScrollPadding, disableClonedInput, platformHeight, false);\n  };\n  /**\n   * Reset the internal state when the text field loses focus.\n   */\n  var focusOut = function focusOut() {\n    hasKeyboardBeenPresentedForTextField = false;\n    win === null || win === void 0 ? void 0 : win.removeEventListener('ionKeyboardDidShow', keyboardShow);\n    componentEl.removeEventListener('focusout', focusOut, true);\n  };\n  /**\n   * When the input is about to receive\n   * focus, we need to move it to prevent\n   * mobile Safari from adjusting the viewport.\n   */\n  var focusIn = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!inputEl.hasAttribute(SKIP_SCROLL_ASSIST)) {\n              _context.next = 3;\n              break;\n            }\n            inputEl.removeAttribute(SKIP_SCROLL_ASSIST);\n            return _context.abrupt(\"return\");\n          case 3:\n            jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight, addScrollPadding, disableClonedInput, platformHeight);\n            win === null || win === void 0 ? void 0 : win.addEventListener('ionKeyboardDidShow', keyboardShow);\n            componentEl.addEventListener('focusout', focusOut, true);\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function focusIn() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  componentEl.addEventListener('focusin', focusIn, true);\n  return function () {\n    componentEl.removeEventListener('focusin', focusIn, true);\n    win === null || win === void 0 ? void 0 : win.removeEventListener('ionKeyboardDidShow', keyboardShow);\n    componentEl.removeEventListener('focusout', focusOut, true);\n  };\n};\n/**\n * Use this function when you want to manually\n * focus an input but not have scroll assist run again.\n */\nvar setManualFocus = function setManualFocus(el) {\n  /**\n   * If element is already focused then\n   * a new focusin event will not be dispatched\n   * to remove the SKIL_SCROLL_ASSIST attribute.\n   */\n  if (document.activeElement === el) {\n    return;\n  }\n  el.setAttribute(SKIP_SCROLL_ASSIST, 'true');\n  el.focus();\n};\nvar jsSetFocus = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding) {\n    var disableClonedInput,\n      platformHeight,\n      waitForResize,\n      scrollData,\n      scrollContentTimeout,\n      scrollContent,\n      doubleKeyboardEventListener,\n      scrollEl,\n      totalScrollAmount,\n      _args3 = arguments;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          disableClonedInput = _args3.length > 6 && _args3[6] !== undefined ? _args3[6] : false;\n          platformHeight = _args3.length > 7 && _args3[7] !== undefined ? _args3[7] : 0;\n          waitForResize = _args3.length > 8 && _args3[8] !== undefined ? _args3[8] : true;\n          if (!(!contentEl && !footerEl)) {\n            _context3.next = 5;\n            break;\n          }\n          return _context3.abrupt(\"return\");\n        case 5:\n          scrollData = getScrollData(componentEl, contentEl || footerEl, keyboardHeight, platformHeight);\n          if (!(contentEl && Math.abs(scrollData.scrollAmount) < 4)) {\n            _context3.next = 10;\n            break;\n          }\n          // the text input is in a safe position that doesn't\n          // require it to be scrolled into view, just set focus now\n          setManualFocus(inputEl);\n          /**\n           * Even though the input does not need\n           * scroll assist, we should preserve the\n           * the scroll padding as users could be moving\n           * focus from an input that needs scroll padding\n           * to an input that does not need scroll padding.\n           * If we remove the scroll padding now, users will\n           * see the page jump.\n           */\n          if (enableScrollPadding && contentEl !== null) {\n            setScrollPadding(contentEl, currentPadding);\n            setClearScrollPaddingListener(inputEl, contentEl, function () {\n              return currentPadding = 0;\n            });\n          }\n          return _context3.abrupt(\"return\");\n        case 10:\n          // temporarily move the focus to the focus holder so the browser\n          // doesn't freak out while it's trying to get the input in place\n          // at this point the native text input still does not have focus\n          relocateInput(componentEl, inputEl, true, scrollData.inputSafeY, disableClonedInput);\n          setManualFocus(inputEl);\n          /**\n           * Relocating/Focusing input causes the\n           * click event to be cancelled, so\n           * manually fire one here.\n           */\n          raf(function () {\n            return componentEl.click();\n          });\n          /**\n           * If enabled, we can add scroll padding to\n           * the bottom of the content so that scroll assist\n           * has enough room to scroll the input above\n           * the keyboard.\n           */\n          if (enableScrollPadding && contentEl) {\n            currentPadding = scrollData.scrollPadding;\n            setScrollPadding(contentEl, currentPadding);\n          }\n          if (!(typeof window !== 'undefined')) {\n            _context3.next = 27;\n            break;\n          }\n          scrollContent = /*#__PURE__*/function () {\n            var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n              return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                while (1) switch (_context2.prev = _context2.next) {\n                  case 0:\n                    // clean up listeners and timeouts\n                    if (scrollContentTimeout !== undefined) {\n                      clearTimeout(scrollContentTimeout);\n                    }\n                    window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n                    window.removeEventListener('ionKeyboardDidShow', scrollContent);\n                    // scroll the input into place\n                    if (!contentEl) {\n                      _context2.next = 6;\n                      break;\n                    }\n                    _context2.next = 6;\n                    return scrollByPoint(contentEl, 0, scrollData.scrollAmount, scrollData.scrollDuration);\n                  case 6:\n                    // the scroll view is in the correct position now\n                    // give the native text input focus\n                    relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n                    // ensure this is the focused input\n                    setManualFocus(inputEl);\n                    /**\n                     * When the input is about to be blurred\n                     * we should set a timeout to remove\n                     * any scroll padding.\n                     */\n                    if (enableScrollPadding) {\n                      setClearScrollPaddingListener(inputEl, contentEl, function () {\n                        return currentPadding = 0;\n                      });\n                    }\n                  case 9:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }, _callee2);\n            }));\n            return function scrollContent() {\n              return _ref3.apply(this, arguments);\n            };\n          }();\n          doubleKeyboardEventListener = function doubleKeyboardEventListener() {\n            window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n            window.addEventListener('ionKeyboardDidShow', scrollContent);\n          };\n          if (!contentEl) {\n            _context3.next = 26;\n            break;\n          }\n          _context3.next = 20;\n          return getScrollElement(contentEl);\n        case 20:\n          scrollEl = _context3.sent;\n          /**\n           * scrollData will only consider the amount we need\n           * to scroll in order to properly bring the input\n           * into view. It will not consider the amount\n           * we can scroll in the content element.\n           * As a result, scrollData may request a greater\n           * scroll position than is currently available\n           * in the DOM. If this is the case, we need to\n           * wait for the webview to resize/the keyboard\n           * to show in order for additional scroll\n           * bandwidth to become available.\n           */\n          totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\n          if (!(waitForResize && scrollData.scrollAmount > totalScrollAmount - scrollEl.scrollTop)) {\n            _context3.next = 26;\n            break;\n          }\n          /**\n           * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\n           * after the initial keyboard is shown. This prevents the webview from resizing\n           * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\n           */\n          if (inputEl.type === 'password') {\n            // Add 50px to account for the \"Passwords\" bar\n            scrollData.scrollAmount += SCROLL_AMOUNT_PADDING;\n            window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n          } else {\n            window.addEventListener('ionKeyboardDidShow', scrollContent);\n          }\n          /**\n           * This should only fire in 2 instances:\n           * 1. The app is very slow.\n           * 2. The app is running in a browser on an old OS\n           * that does not support Ionic Keyboard Events\n           */\n          scrollContentTimeout = setTimeout(scrollContent, 1000);\n          return _context3.abrupt(\"return\");\n        case 26:\n          scrollContent();\n        case 27:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return function jsSetFocus(_x, _x2, _x3, _x4, _x5, _x6) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar INPUT_BLURRING = true;\nvar startInputShims = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(config, platform) {\n    var doc, isIOS, isAndroid, keyboardHeight, scrollAssist, hideCaret, inputBlurring, scrollPadding, inputs, hideCaretMap, scrollAssistMap, keyboardResizeMode, registerInput, unregisterInput, _i, _inputs, input;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          doc = document;\n          isIOS = platform === 'ios';\n          isAndroid = platform === 'android';\n          /**\n           * Hide Caret and Input Blurring are needed on iOS.\n           * Scroll Assist and Scroll Padding are needed on iOS and Android\n           * with Chrome web browser (not Chrome webview).\n           */\n          keyboardHeight = config.getNumber('keyboardHeight', 290);\n          scrollAssist = config.getBoolean('scrollAssist', true);\n          hideCaret = config.getBoolean('hideCaretOnScroll', isIOS);\n          inputBlurring = config.getBoolean('inputBlurring', isIOS);\n          scrollPadding = config.getBoolean('scrollPadding', true);\n          inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n          hideCaretMap = new WeakMap();\n          scrollAssistMap = new WeakMap();\n          /**\n           * Grab the native keyboard resize configuration\n           * and pass it to scroll assist. Scroll assist requires\n           * that we adjust the input right before the input\n           * is about to be focused. If we called `Keyboard.getResizeMode`\n           * on focusin in scroll assist, we could potentially adjust the\n           * input too late since this call is async.\n           */\n          _context5.next = 13;\n          return Keyboard.getResizeMode();\n        case 13:\n          keyboardResizeMode = _context5.sent;\n          registerInput = /*#__PURE__*/function () {\n            var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(componentEl) {\n              var inputRoot, inputEl, scrollEl, footerEl, rmFn, isDateInput, _rmFn;\n              return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n                while (1) switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.next = 2;\n                    return new Promise(function (resolve) {\n                      return componentOnReady(componentEl, resolve);\n                    });\n                  case 2:\n                    inputRoot = componentEl.shadowRoot || componentEl;\n                    inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n                    scrollEl = findClosestIonContent(componentEl);\n                    footerEl = !scrollEl ? componentEl.closest('ion-footer') : null;\n                    if (inputEl) {\n                      _context4.next = 8;\n                      break;\n                    }\n                    return _context4.abrupt(\"return\");\n                  case 8:\n                    if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n                      rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n                      hideCaretMap.set(componentEl, rmFn);\n                    }\n                    /**\n                     * date/datetime-locale inputs on mobile devices show date picker\n                     * overlays instead of keyboards. As a result, scroll assist is\n                     * not needed. This also works around a bug in iOS <16 where\n                     * scroll assist causes the browser to lock up. See FW-1997.\n                     */\n                    isDateInput = inputEl.type === 'date' || inputEl.type === 'datetime-local';\n                    if (!isDateInput && (!!scrollEl || !!footerEl) && scrollAssist && !scrollAssistMap.has(componentEl)) {\n                      _rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight, scrollPadding, keyboardResizeMode, isAndroid);\n                      scrollAssistMap.set(componentEl, _rmFn);\n                    }\n                  case 11:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }, _callee4);\n            }));\n            return function registerInput(_x9) {\n              return _ref5.apply(this, arguments);\n            };\n          }();\n          unregisterInput = function unregisterInput(componentEl) {\n            if (hideCaret) {\n              var fn = hideCaretMap.get(componentEl);\n              if (fn) {\n                fn();\n              }\n              hideCaretMap.delete(componentEl);\n            }\n            if (scrollAssist) {\n              var _fn = scrollAssistMap.get(componentEl);\n              if (_fn) {\n                _fn();\n              }\n              scrollAssistMap.delete(componentEl);\n            }\n          };\n          if (inputBlurring && INPUT_BLURRING) {\n            enableInputBlurring();\n          }\n          // Input might be already loaded in the DOM before ion-device-hacks did.\n          // At this point we need to look for all of the inputs not registered yet\n          // and register them.\n          for (_i = 0, _inputs = inputs; _i < _inputs.length; _i++) {\n            input = _inputs[_i];\n            registerInput(input);\n          }\n          // TODO(FW-2832): types\n          doc.addEventListener('ionInputDidLoad', function (ev) {\n            registerInput(ev.detail);\n          });\n          doc.addEventListener('ionInputDidUnload', function (ev) {\n            unregisterInput(ev.detail);\n          });\n        case 20:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5);\n  }));\n  return function startInputShims(_x7, _x8) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport { startInputShims };","map":{"version":3,"names":["g","getScrollElement","c","scrollByPoint","a","findClosestIonContent","addEventListener","b","removeEventListener","r","raf","componentOnReady","KeyboardResize","K","Keyboard","w","win","cloneMap","WeakMap","relocateInput","componentEl","inputEl","shouldRelocate","inputRelativeY","arguments","length","undefined","disabledClonedInput","has","addClone","removeClone","isFocused","input","getRootNode","activeElement","parentEl","parentNode","clonedEl","cloneNode","classList","add","tabIndex","disabled","appendChild","set","doc","ownerDocument","tx","dir","style","pointerEvents","transform","concat","clone","get","delete","remove","SCROLL_AMOUNT_PADDING","enableHideCaretOnScroll","scrollEl","scrollHideCaret","shouldHideCaret","onBlur","hideCaret","showCaret","SKIP_SELECTOR","enableInputBlurring","focused","didScroll","document","onScroll","onFocusin","onTouchend","ev","active","matches","tapped","target","closest","setTimeout","blur","SCROLL_ASSIST_SPEED","getScrollData","contentEl","keyboardHeight","platformHeight","_a","itemEl","calcScrollData","getBoundingClientRect","inputRect","contentRect","inputTop","top","inputBottom","bottom","visibleAreaTop","visibleAreaBottom","Math","min","safeAreaTop","safeAreaBottom","distanceToBottom","distanceToTop","desiredScrollAmount","round","scrollAmount","distance","abs","duration","scrollDuration","max","scrollPadding","inputSafeY","PADDING_TIMER_KEY","setScrollPadding","paddingAmount","clearCallback","timer","clearTimeout","setProperty","setClearScrollPaddingListener","doneCallback","clearScrollPadding","once","currentPadding","SKIP_SCROLL_ASSIST","enableScrollAssist","footerEl","enableScrollPadding","keyboardResize","disableClonedInput","addScrollPadding","mode","None","hasKeyboardBeenPresentedForTextField","innerHeight","keyboardShow","jsSetFocus","detail","focusOut","focusIn","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","hasAttribute","removeAttribute","abrupt","stop","apply","setManualFocus","el","setAttribute","focus","_ref2","_callee3","waitForResize","scrollData","scrollContentTimeout","scrollContent","doubleKeyboardEventListener","totalScrollAmount","_args3","_callee3$","_context3","click","window","_ref3","_callee2","_callee2$","_context2","sent","scrollHeight","clientHeight","scrollTop","type","_x","_x2","_x3","_x4","_x5","_x6","INPUT_BLURRING","startInputShims","_ref4","_callee5","config","platform","isIOS","isAndroid","scrollAssist","inputBlurring","inputs","hideCaretMap","scrollAssistMap","keyboardResizeMode","registerInput","unregisterInput","_i","_inputs","_callee5$","_context5","getNumber","getBoolean","Array","from","querySelectorAll","getResizeMode","_ref5","_callee4","inputRoot","rmFn","isDateInput","_rmFn","_callee4$","_context4","Promise","resolve","shadowRoot","querySelector","_x9","fn","_x7","_x8"],"sources":["C:/Users/renan/ionic-app/node_modules/@ionic/core/components/input-shims.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { g as getScrollElement, c as scrollByPoint, a as findClosestIonContent } from './index8.js';\nimport { a as addEventListener, b as removeEventListener, r as raf, c as componentOnReady } from './helpers.js';\nimport { a as KeyboardResize, K as Keyboard } from './keyboard.js';\nimport { w as win } from './index5.js';\n\nconst cloneMap = new WeakMap();\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0, disabledClonedInput = false) => {\n  if (cloneMap.has(componentEl) === shouldRelocate) {\n    return;\n  }\n  if (shouldRelocate) {\n    addClone(componentEl, inputEl, inputRelativeY, disabledClonedInput);\n  }\n  else {\n    removeClone(componentEl, inputEl);\n  }\n};\n// TODO(FW-2832): type\nconst isFocused = (input) => {\n  return input === input.getRootNode().activeElement;\n};\nconst addClone = (componentEl, inputEl, inputRelativeY, disabledClonedInput = false) => {\n  // this allows for the actual input to receive the focus from\n  // the user's touch event, but before it receives focus, it\n  // moves the actual input to a location that will not screw\n  // up the app's layout, and does not allow the native browser\n  // to attempt to scroll the input into place (messing up headers/footers)\n  // the cloned input fills the area of where native input should be\n  // while the native input fakes out the browser by relocating itself\n  // before it receives the actual focus event\n  // We hide the focused input (with the visible caret) invisible by making it scale(0),\n  const parentEl = inputEl.parentNode;\n  // DOM WRITES\n  const clonedEl = inputEl.cloneNode(false);\n  clonedEl.classList.add('cloned-input');\n  clonedEl.tabIndex = -1;\n  /**\n   * Making the cloned input disabled prevents\n   * Chrome for Android from still scrolling\n   * the entire page since this cloned input\n   * will briefly be hidden by the keyboard\n   * even though it is not focused.\n   *\n   * This is not needed on iOS. While this\n   * does not cause functional issues on iOS,\n   * the input still appears slightly dimmed even\n   * if we set opacity: 1.\n   */\n  if (disabledClonedInput) {\n    clonedEl.disabled = true;\n  }\n  parentEl.appendChild(clonedEl);\n  cloneMap.set(componentEl, clonedEl);\n  const doc = componentEl.ownerDocument;\n  const tx = doc.dir === 'rtl' ? 9999 : -9999;\n  componentEl.style.pointerEvents = 'none';\n  inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\n};\nconst removeClone = (componentEl, inputEl) => {\n  const clone = cloneMap.get(componentEl);\n  if (clone) {\n    cloneMap.delete(componentEl);\n    clone.remove();\n  }\n  componentEl.style.pointerEvents = '';\n  inputEl.style.transform = '';\n};\n/**\n * Factoring in 50px gives us some room\n * in case the keyboard shows password/autofill bars\n * asynchronously.\n */\nconst SCROLL_AMOUNT_PADDING = 50;\n\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\n  if (!scrollEl || !inputEl) {\n    return () => {\n      return;\n    };\n  }\n  const scrollHideCaret = (shouldHideCaret) => {\n    if (isFocused(inputEl)) {\n      relocateInput(componentEl, inputEl, shouldHideCaret);\n    }\n  };\n  const onBlur = () => relocateInput(componentEl, inputEl, false);\n  const hideCaret = () => scrollHideCaret(true);\n  const showCaret = () => scrollHideCaret(false);\n  addEventListener(scrollEl, 'ionScrollStart', hideCaret);\n  addEventListener(scrollEl, 'ionScrollEnd', showCaret);\n  inputEl.addEventListener('blur', onBlur);\n  return () => {\n    removeEventListener(scrollEl, 'ionScrollStart', hideCaret);\n    removeEventListener(scrollEl, 'ionScrollEnd', showCaret);\n    inputEl.removeEventListener('blur', onBlur);\n  };\n};\n\nconst SKIP_SELECTOR = 'input, textarea, [no-blur], [contenteditable]';\nconst enableInputBlurring = () => {\n  let focused = true;\n  let didScroll = false;\n  const doc = document;\n  const onScroll = () => {\n    didScroll = true;\n  };\n  const onFocusin = () => {\n    focused = true;\n  };\n  const onTouchend = (ev) => {\n    // if app did scroll return early\n    if (didScroll) {\n      didScroll = false;\n      return;\n    }\n    const active = doc.activeElement;\n    if (!active) {\n      return;\n    }\n    // only blur if the active element is a text-input or a textarea\n    if (active.matches(SKIP_SELECTOR)) {\n      return;\n    }\n    // if the selected target is the active element, do not blur\n    const tapped = ev.target;\n    if (tapped === active) {\n      return;\n    }\n    if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n      return;\n    }\n    focused = false;\n    // TODO FW-2796: find a better way, why 50ms?\n    setTimeout(() => {\n      if (!focused) {\n        active.blur();\n      }\n    }, 50);\n  };\n  addEventListener(doc, 'ionScrollStart', onScroll);\n  doc.addEventListener('focusin', onFocusin, true);\n  doc.addEventListener('touchend', onTouchend, false);\n  return () => {\n    removeEventListener(doc, 'ionScrollStart', onScroll, true);\n    doc.removeEventListener('focusin', onFocusin, true);\n    doc.removeEventListener('touchend', onTouchend, false);\n  };\n};\n\nconst SCROLL_ASSIST_SPEED = 0.3;\nconst getScrollData = (componentEl, contentEl, keyboardHeight, platformHeight) => {\n  var _a;\n  const itemEl = (_a = componentEl.closest('ion-item,[ion-item]')) !== null && _a !== void 0 ? _a : componentEl;\n  return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, platformHeight);\n};\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\n  // compute input's Y values relative to the body\n  const inputTop = inputRect.top;\n  const inputBottom = inputRect.bottom;\n  // compute visible area\n  const visibleAreaTop = contentRect.top;\n  const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n  // compute safe area\n  const safeAreaTop = visibleAreaTop + 15;\n  const safeAreaBottom = visibleAreaBottom - SCROLL_AMOUNT_PADDING;\n  // figure out if each edge of the input is within the safe area\n  const distanceToBottom = safeAreaBottom - inputBottom;\n  const distanceToTop = safeAreaTop - inputTop;\n  // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n  const desiredScrollAmount = Math.round(distanceToBottom < 0 ? -distanceToBottom : distanceToTop > 0 ? -distanceToTop : 0);\n  // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n  // gets focus, so make sure we don't scroll the input above the visible area\n  const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n  const distance = Math.abs(scrollAmount);\n  const duration = distance / SCROLL_ASSIST_SPEED;\n  const scrollDuration = Math.min(400, Math.max(150, duration));\n  return {\n    scrollAmount,\n    scrollDuration,\n    scrollPadding: keyboardHeight,\n    inputSafeY: -(inputTop - safeAreaTop) + 4,\n  };\n};\n\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\n/**\n * Scroll padding adds additional padding to the bottom\n * of ion-content so that there is enough scroll space\n * for an input to be scrolled above the keyboard. This\n * is needed in environments where the webview does not\n * resize when the keyboard opens.\n *\n * Example: If an input at the bottom of ion-content is\n * focused, there is no additional scrolling space below\n * it, so the input cannot be scrolled above the keyboard.\n * Scroll padding fixes this by adding padding equal to the\n * height of the keyboard to the bottom of the content.\n *\n * Common environments where this is needed:\n * - Mobile Safari: The keyboard overlays the content\n * - Capacitor/Cordova on iOS: The keyboard overlays the content\n * when the KeyboardResize mode is set to 'none'.\n */\nconst setScrollPadding = (contentEl, paddingAmount, clearCallback) => {\n  const timer = contentEl[PADDING_TIMER_KEY];\n  if (timer) {\n    clearTimeout(timer);\n  }\n  if (paddingAmount > 0) {\n    contentEl.style.setProperty('--keyboard-offset', `${paddingAmount}px`);\n  }\n  else {\n    contentEl[PADDING_TIMER_KEY] = setTimeout(() => {\n      contentEl.style.setProperty('--keyboard-offset', '0px');\n      if (clearCallback) {\n        clearCallback();\n      }\n    }, 120);\n  }\n};\n/**\n * When an input is about to be focused,\n * set a timeout to clear any scroll padding\n * on the content. Note: The clearing\n * is done on a timeout so that if users\n * are moving focus from one input to the next\n * then re-adding scroll padding to the new\n * input with cancel the timeout to clear the\n * scroll padding.\n */\nconst setClearScrollPaddingListener = (inputEl, contentEl, doneCallback) => {\n  const clearScrollPadding = () => {\n    if (contentEl) {\n      setScrollPadding(contentEl, 0, doneCallback);\n    }\n  };\n  inputEl.addEventListener('focusout', clearScrollPadding, { once: true });\n};\n\nlet currentPadding = 0;\nconst SKIP_SCROLL_ASSIST = 'data-ionic-skip-scroll-assist';\nconst enableScrollAssist = (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, keyboardResize, disableClonedInput = false) => {\n  /**\n   * Scroll padding should only be added if:\n   * 1. The global scrollPadding config option\n   * is set to true.\n   * 2. The native keyboard resize mode is either \"none\"\n   * (keyboard overlays webview) or undefined (resize\n   * information unavailable)\n   * Resize info is available on Capacitor 4+\n   */\n  const addScrollPadding = enableScrollPadding && (keyboardResize === undefined || keyboardResize.mode === KeyboardResize.None);\n  /**\n   * This tracks whether or not the keyboard has been\n   * presented for a single focused text field. Note\n   * that it does not track if the keyboard is open\n   * in general such as if the keyboard is open for\n   * a different focused text field.\n   */\n  let hasKeyboardBeenPresentedForTextField = false;\n  /**\n   * When adding scroll padding we need to know\n   * how much of the viewport the keyboard obscures.\n   * We do this by subtracting the keyboard height\n   * from the platform height.\n   *\n   * If we compute this value when switching between\n   * inputs then the webview may already be resized.\n   * At this point, `win.innerHeight` has already accounted\n   * for the keyboard meaning we would then subtract\n   * the keyboard height again. This will result in the input\n   * being scrolled more than it needs to.\n   */\n  const platformHeight = win !== undefined ? win.innerHeight : 0;\n  /**\n   * Scroll assist is run when a text field\n   * is focused. However, it may need to\n   * re-run when the keyboard size changes\n   * such that the text field is now hidden\n   * underneath the keyboard.\n   * This function re-runs scroll assist\n   * when that happens.\n   *\n   * One limitation of this is on a web browser\n   * where native keyboard APIs do not have cross-browser\n   * support. `ionKeyboardDidShow` relies on the Visual Viewport API.\n   * This means that if the keyboard changes but does not change\n   * geometry, then scroll assist will not re-run even if\n   * the user has scrolled the text field under the keyboard.\n   * This is not a problem when running in Cordova/Capacitor\n   * because `ionKeyboardDidShow` uses the native events\n   * which fire every time the keyboard changes.\n   */\n  const keyboardShow = (ev) => {\n    /**\n     * If the keyboard has not yet been presented\n     * for this text field then the text field has just\n     * received focus. In that case, the focusin listener\n     * will run scroll assist.\n     */\n    if (hasKeyboardBeenPresentedForTextField === false) {\n      hasKeyboardBeenPresentedForTextField = true;\n      return;\n    }\n    /**\n     * Otherwise, the keyboard has already been presented\n     * for the focused text field.\n     * This means that the keyboard likely changed\n     * geometry, and we need to re-run scroll assist.\n     * This can happen when the user rotates their device\n     * or when they switch keyboards.\n     *\n     * Make sure we pass in the computed keyboard height\n     * rather than the estimated keyboard height.\n     *\n     * Since the keyboard is already open then we do not\n     * need to wait for the webview to resize, so we pass\n     * \"waitForResize: false\".\n     */\n    jsSetFocus(componentEl, inputEl, contentEl, footerEl, ev.detail.keyboardHeight, addScrollPadding, disableClonedInput, platformHeight, false);\n  };\n  /**\n   * Reset the internal state when the text field loses focus.\n   */\n  const focusOut = () => {\n    hasKeyboardBeenPresentedForTextField = false;\n    win === null || win === void 0 ? void 0 : win.removeEventListener('ionKeyboardDidShow', keyboardShow);\n    componentEl.removeEventListener('focusout', focusOut, true);\n  };\n  /**\n   * When the input is about to receive\n   * focus, we need to move it to prevent\n   * mobile Safari from adjusting the viewport.\n   */\n  const focusIn = async () => {\n    /**\n     * Scroll assist should not run again\n     * on inputs that have been manually\n     * focused inside of the scroll assist\n     * implementation.\n     */\n    if (inputEl.hasAttribute(SKIP_SCROLL_ASSIST)) {\n      inputEl.removeAttribute(SKIP_SCROLL_ASSIST);\n      return;\n    }\n    jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight, addScrollPadding, disableClonedInput, platformHeight);\n    win === null || win === void 0 ? void 0 : win.addEventListener('ionKeyboardDidShow', keyboardShow);\n    componentEl.addEventListener('focusout', focusOut, true);\n  };\n  componentEl.addEventListener('focusin', focusIn, true);\n  return () => {\n    componentEl.removeEventListener('focusin', focusIn, true);\n    win === null || win === void 0 ? void 0 : win.removeEventListener('ionKeyboardDidShow', keyboardShow);\n    componentEl.removeEventListener('focusout', focusOut, true);\n  };\n};\n/**\n * Use this function when you want to manually\n * focus an input but not have scroll assist run again.\n */\nconst setManualFocus = (el) => {\n  /**\n   * If element is already focused then\n   * a new focusin event will not be dispatched\n   * to remove the SKIL_SCROLL_ASSIST attribute.\n   */\n  if (document.activeElement === el) {\n    return;\n  }\n  el.setAttribute(SKIP_SCROLL_ASSIST, 'true');\n  el.focus();\n};\nconst jsSetFocus = async (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, disableClonedInput = false, platformHeight = 0, waitForResize = true) => {\n  if (!contentEl && !footerEl) {\n    return;\n  }\n  const scrollData = getScrollData(componentEl, (contentEl || footerEl), keyboardHeight, platformHeight);\n  if (contentEl && Math.abs(scrollData.scrollAmount) < 4) {\n    // the text input is in a safe position that doesn't\n    // require it to be scrolled into view, just set focus now\n    setManualFocus(inputEl);\n    /**\n     * Even though the input does not need\n     * scroll assist, we should preserve the\n     * the scroll padding as users could be moving\n     * focus from an input that needs scroll padding\n     * to an input that does not need scroll padding.\n     * If we remove the scroll padding now, users will\n     * see the page jump.\n     */\n    if (enableScrollPadding && contentEl !== null) {\n      setScrollPadding(contentEl, currentPadding);\n      setClearScrollPaddingListener(inputEl, contentEl, () => (currentPadding = 0));\n    }\n    return;\n  }\n  // temporarily move the focus to the focus holder so the browser\n  // doesn't freak out while it's trying to get the input in place\n  // at this point the native text input still does not have focus\n  relocateInput(componentEl, inputEl, true, scrollData.inputSafeY, disableClonedInput);\n  setManualFocus(inputEl);\n  /**\n   * Relocating/Focusing input causes the\n   * click event to be cancelled, so\n   * manually fire one here.\n   */\n  raf(() => componentEl.click());\n  /**\n   * If enabled, we can add scroll padding to\n   * the bottom of the content so that scroll assist\n   * has enough room to scroll the input above\n   * the keyboard.\n   */\n  if (enableScrollPadding && contentEl) {\n    currentPadding = scrollData.scrollPadding;\n    setScrollPadding(contentEl, currentPadding);\n  }\n  if (typeof window !== 'undefined') {\n    let scrollContentTimeout;\n    const scrollContent = async () => {\n      // clean up listeners and timeouts\n      if (scrollContentTimeout !== undefined) {\n        clearTimeout(scrollContentTimeout);\n      }\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.removeEventListener('ionKeyboardDidShow', scrollContent);\n      // scroll the input into place\n      if (contentEl) {\n        await scrollByPoint(contentEl, 0, scrollData.scrollAmount, scrollData.scrollDuration);\n      }\n      // the scroll view is in the correct position now\n      // give the native text input focus\n      relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n      // ensure this is the focused input\n      setManualFocus(inputEl);\n      /**\n       * When the input is about to be blurred\n       * we should set a timeout to remove\n       * any scroll padding.\n       */\n      if (enableScrollPadding) {\n        setClearScrollPaddingListener(inputEl, contentEl, () => (currentPadding = 0));\n      }\n    };\n    const doubleKeyboardEventListener = () => {\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.addEventListener('ionKeyboardDidShow', scrollContent);\n    };\n    if (contentEl) {\n      const scrollEl = await getScrollElement(contentEl);\n      /**\n       * scrollData will only consider the amount we need\n       * to scroll in order to properly bring the input\n       * into view. It will not consider the amount\n       * we can scroll in the content element.\n       * As a result, scrollData may request a greater\n       * scroll position than is currently available\n       * in the DOM. If this is the case, we need to\n       * wait for the webview to resize/the keyboard\n       * to show in order for additional scroll\n       * bandwidth to become available.\n       */\n      const totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\n      if (waitForResize && scrollData.scrollAmount > totalScrollAmount - scrollEl.scrollTop) {\n        /**\n         * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\n         * after the initial keyboard is shown. This prevents the webview from resizing\n         * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\n         */\n        if (inputEl.type === 'password') {\n          // Add 50px to account for the \"Passwords\" bar\n          scrollData.scrollAmount += SCROLL_AMOUNT_PADDING;\n          window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n        }\n        else {\n          window.addEventListener('ionKeyboardDidShow', scrollContent);\n        }\n        /**\n         * This should only fire in 2 instances:\n         * 1. The app is very slow.\n         * 2. The app is running in a browser on an old OS\n         * that does not support Ionic Keyboard Events\n         */\n        scrollContentTimeout = setTimeout(scrollContent, 1000);\n        return;\n      }\n    }\n    scrollContent();\n  }\n};\n\nconst INPUT_BLURRING = true;\nconst startInputShims = async (config, platform) => {\n  const doc = document;\n  const isIOS = platform === 'ios';\n  const isAndroid = platform === 'android';\n  /**\n   * Hide Caret and Input Blurring are needed on iOS.\n   * Scroll Assist and Scroll Padding are needed on iOS and Android\n   * with Chrome web browser (not Chrome webview).\n   */\n  const keyboardHeight = config.getNumber('keyboardHeight', 290);\n  const scrollAssist = config.getBoolean('scrollAssist', true);\n  const hideCaret = config.getBoolean('hideCaretOnScroll', isIOS);\n  const inputBlurring = config.getBoolean('inputBlurring', isIOS);\n  const scrollPadding = config.getBoolean('scrollPadding', true);\n  const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n  const hideCaretMap = new WeakMap();\n  const scrollAssistMap = new WeakMap();\n  /**\n   * Grab the native keyboard resize configuration\n   * and pass it to scroll assist. Scroll assist requires\n   * that we adjust the input right before the input\n   * is about to be focused. If we called `Keyboard.getResizeMode`\n   * on focusin in scroll assist, we could potentially adjust the\n   * input too late since this call is async.\n   */\n  const keyboardResizeMode = await Keyboard.getResizeMode();\n  const registerInput = async (componentEl) => {\n    await new Promise((resolve) => componentOnReady(componentEl, resolve));\n    const inputRoot = componentEl.shadowRoot || componentEl;\n    const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n    const scrollEl = findClosestIonContent(componentEl);\n    const footerEl = !scrollEl ? componentEl.closest('ion-footer') : null;\n    if (!inputEl) {\n      return;\n    }\n    if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n      const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n      hideCaretMap.set(componentEl, rmFn);\n    }\n    /**\n     * date/datetime-locale inputs on mobile devices show date picker\n     * overlays instead of keyboards. As a result, scroll assist is\n     * not needed. This also works around a bug in iOS <16 where\n     * scroll assist causes the browser to lock up. See FW-1997.\n     */\n    const isDateInput = inputEl.type === 'date' || inputEl.type === 'datetime-local';\n    if (!isDateInput &&\n      (!!scrollEl || !!footerEl) &&\n      scrollAssist &&\n      !scrollAssistMap.has(componentEl)) {\n      const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight, scrollPadding, keyboardResizeMode, isAndroid);\n      scrollAssistMap.set(componentEl, rmFn);\n    }\n  };\n  const unregisterInput = (componentEl) => {\n    if (hideCaret) {\n      const fn = hideCaretMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      hideCaretMap.delete(componentEl);\n    }\n    if (scrollAssist) {\n      const fn = scrollAssistMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      scrollAssistMap.delete(componentEl);\n    }\n  };\n  if (inputBlurring && INPUT_BLURRING) {\n    enableInputBlurring();\n  }\n  // Input might be already loaded in the DOM before ion-device-hacks did.\n  // At this point we need to look for all of the inputs not registered yet\n  // and register them.\n  for (const input of inputs) {\n    registerInput(input);\n  }\n  // TODO(FW-2832): types\n  doc.addEventListener('ionInputDidLoad', ((ev) => {\n    registerInput(ev.detail);\n  }));\n  doc.addEventListener('ionInputDidUnload', ((ev) => {\n    unregisterInput(ev.detail);\n  }));\n};\n\nexport { startInputShims };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}