{"ast":null,"code":"import _assertThisInitialized from \"C:/Users/renan/ionic-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _classCallCheck from \"C:/Users/renan/ionic-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/renan/ionic-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/renan/ionic-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/renan/ionic-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"C:/Users/renan/ionic-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _regeneratorRuntime from \"C:/Users/renan/ionic-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/renan/ionic-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"C:/Users/renan/ionic-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/renan/ionic-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/Users/renan/ionic-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"C:/Users/renan/ionic-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/snabbdom/snabbdom/blob/master/LICENSE\n *\n * Modified for Stencil's renderer and slot projection\n */\nvar scopeId;\nvar contentRef;\nvar hostTagName;\nvar customError;\nvar i = 0;\nvar useNativeShadowDom = false;\nvar checkSlotFallbackVisibility = false;\nvar checkSlotRelocate = false;\nvar isSvgMode = false;\nvar renderingRef = null;\nvar queueCongestion = 0;\nvar queuePending = false;\n/*\n Stencil Client Platform v4.6.0 | MIT Licensed | https://stenciljs.com\n */\nimport { BUILD, NAMESPACE } from '@stencil/core/internal/app-data';\nvar Build = {\n  isDev: BUILD.isDev ? true : false,\n  isBrowser: true,\n  isServer: false,\n  isTesting: BUILD.isTesting ? true : false\n};\nvar getAssetPath = function getAssetPath(path) {\n  var assetUrl = new URL(path, plt.$resourcesUrl$);\n  return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;\n};\nvar setAssetPath = function setAssetPath(path) {\n  return plt.$resourcesUrl$ = path;\n};\nvar createTime = function createTime(fnName) {\n  var tagName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  if (BUILD.profile && performance.mark) {\n    var key = \"st:\".concat(fnName, \":\").concat(tagName, \":\").concat(i++);\n    // Start\n    performance.mark(key);\n    // End\n    return function () {\n      return performance.measure(\"[Stencil] \".concat(fnName, \"() <\").concat(tagName, \">\"), key);\n    };\n  } else {\n    return function () {\n      return;\n    };\n  }\n};\nvar uniqueTime = function uniqueTime(key, measureText) {\n  if (BUILD.profile && performance.mark) {\n    if (performance.getEntriesByName(key, 'mark').length === 0) {\n      performance.mark(key);\n    }\n    return function () {\n      if (performance.getEntriesByName(measureText, 'measure').length === 0) {\n        performance.measure(measureText, key);\n      }\n    };\n  } else {\n    return function () {\n      return;\n    };\n  }\n};\nvar inspect = function inspect(ref) {\n  var _ref;\n  var hostRef = getHostRef(ref);\n  if (!hostRef) {\n    return undefined;\n  }\n  var flags = hostRef.$flags$;\n  var hostElement = hostRef.$hostElement$;\n  return _ref = {\n    renderCount: hostRef.$renderCount$,\n    flags: {\n      hasRendered: !!(flags & 2 /* HOST_FLAGS.hasRendered */),\n      hasConnected: !!(flags & 1 /* HOST_FLAGS.hasConnected */),\n      isWaitingForChildren: !!(flags & 4 /* HOST_FLAGS.isWaitingForChildren */),\n      isConstructingInstance: !!(flags & 8 /* HOST_FLAGS.isConstructingInstance */),\n      isQueuedForUpdate: !!(flags & 16 /* HOST_FLAGS.isQueuedForUpdate */),\n      hasInitializedComponent: !!(flags & 32 /* HOST_FLAGS.hasInitializedComponent */),\n      hasLoadedComponent: !!(flags & 64 /* HOST_FLAGS.hasLoadedComponent */),\n      isWatchReady: !!(flags & 128 /* HOST_FLAGS.isWatchReady */),\n      isListenReady: !!(flags & 256 /* HOST_FLAGS.isListenReady */),\n      needsRerender: !!(flags & 512 /* HOST_FLAGS.needsRerender */)\n    },\n\n    instanceValues: hostRef.$instanceValues$,\n    ancestorComponent: hostRef.$ancestorComponent$,\n    hostElement: hostElement,\n    lazyInstance: hostRef.$lazyInstance$,\n    vnode: hostRef.$vnode$,\n    modeName: hostRef.$modeName$,\n    onReadyPromise: hostRef.$onReadyPromise$,\n    onReadyResolve: hostRef.$onReadyResolve$,\n    onInstancePromise: hostRef.$onInstancePromise$,\n    onInstanceResolve: hostRef.$onInstanceResolve$,\n    onRenderResolve: hostRef.$onRenderResolve$,\n    queuedListeners: hostRef.$queuedListeners$,\n    rmListeners: hostRef.$rmListeners$\n  }, _defineProperty(_ref, 's-id', hostElement['s-id']), _defineProperty(_ref, 's-cr', hostElement['s-cr']), _defineProperty(_ref, 's-lr', hostElement['s-lr']), _defineProperty(_ref, 's-p', hostElement['s-p']), _defineProperty(_ref, 's-rc', hostElement['s-rc']), _defineProperty(_ref, 's-sc', hostElement['s-sc']), _ref;\n};\nvar installDevTools = function installDevTools() {\n  if (BUILD.devTools) {\n    var stencil = win.stencil = win.stencil || {};\n    var originalInspect = stencil.inspect;\n    stencil.inspect = function (ref) {\n      var result = inspect(ref);\n      if (!result && typeof originalInspect === 'function') {\n        result = originalInspect(ref);\n      }\n      return result;\n    };\n  }\n};\nvar CONTENT_REF_ID = 'r';\nvar ORG_LOCATION_ID = 'o';\nvar SLOT_NODE_ID = 's';\nvar TEXT_NODE_ID = 't';\nvar HYDRATE_ID = 's-id';\nvar HYDRATED_STYLE_ID = 'sty-id';\nvar HYDRATE_CHILD_ID = 'c-id';\nvar HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nvar XLINK_NS = 'http://www.w3.org/1999/xlink';\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nvar EMPTY_OBJ = {};\n/**\n * Namespaces\n */\nvar SVG_NS = 'http://www.w3.org/2000/svg';\nvar HTML_NS = 'http://www.w3.org/1999/xhtml';\nvar isDef = function isDef(v) {\n  return v != null;\n};\n/**\n * Check whether a value is a 'complex type', defined here as an object or a\n * function.\n *\n * @param o the value to check\n * @returns whether it's a complex type or not\n */\nvar isComplexType = function isComplexType(o) {\n  // https://jsperf.com/typeof-fn-object/5\n  o = typeof o;\n  return o === 'object' || o === 'function';\n};\n/**\n * Helper method for querying a `meta` tag that contains a nonce value\n * out of a DOM's head.\n *\n * @param doc The DOM containing the `head` to query against\n * @returns The content of the meta tag representing the nonce value, or `undefined` if no tag\n * exists or the tag has no content.\n */\nfunction queryNonceMetaTagContent(doc) {\n  var _a, _b, _c;\n  return (_c = (_b = (_a = doc.head) === null || _a === void 0 ? void 0 : _a.querySelector('meta[name=\"csp-nonce\"]')) === null || _b === void 0 ? void 0 : _b.getAttribute('content')) !== null && _c !== void 0 ? _c : undefined;\n}\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nvar h = function h(nodeName, vnodeData) {\n  var child = null;\n  var key = null;\n  var slotName = null;\n  var simple = false;\n  var lastSimple = false;\n  var vNodeChildren = [];\n  var walk = function walk(c) {\n    for (var _i = 0; _i < c.length; _i++) {\n      child = c[_i];\n      if (Array.isArray(child)) {\n        walk(child);\n      } else if (child != null && typeof child !== 'boolean') {\n        if (simple = typeof nodeName !== 'function' && !isComplexType(child)) {\n          child = String(child);\n        } else if (BUILD.isDev && typeof nodeName !== 'function' && child.$flags$ === undefined) {\n          consoleDevError(\"vNode passed as children has unexpected type.\\nMake sure it's using the correct h() function.\\nEmpty objects can also be the cause, look for JSX comments that became objects.\");\n        }\n        if (simple && lastSimple) {\n          // If the previous child was simple (string), we merge both\n          vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n        } else {\n          // Append a new vNode, if it's text, we create a text vNode\n          vNodeChildren.push(simple ? newVNode(null, child) : child);\n        }\n        lastSimple = simple;\n      }\n    }\n  };\n  for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    children[_key - 2] = arguments[_key];\n  }\n  walk(children);\n  if (vnodeData) {\n    if (BUILD.isDev && nodeName === 'input') {\n      validateInputProperties(vnodeData);\n    }\n    if (BUILD.vdomKey && vnodeData.key) {\n      key = vnodeData.key;\n    }\n    if (BUILD.slotRelocation && vnodeData.name) {\n      slotName = vnodeData.name;\n    }\n    // normalize class / className attributes\n    if (BUILD.vdomClass) {\n      var classData = vnodeData.className || vnodeData.class;\n      if (classData) {\n        vnodeData.class = typeof classData !== 'object' ? classData : Object.keys(classData).filter(function (k) {\n          return classData[k];\n        }).join(' ');\n      }\n    }\n  }\n  if (BUILD.isDev && vNodeChildren.some(isHost)) {\n    consoleDevError(\"The <Host> must be the single root component. Make sure:\\n- You are NOT using hostData() and <Host> in the same component.\\n- <Host> is used once, and it's the single root component of the render() function.\");\n  }\n  if (BUILD.vdomFunctional && typeof nodeName === 'function') {\n    // nodeName is a functional component\n    return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);\n  }\n  var vnode = newVNode(nodeName, null);\n  vnode.$attrs$ = vnodeData;\n  if (vNodeChildren.length > 0) {\n    vnode.$children$ = vNodeChildren;\n  }\n  if (BUILD.vdomKey) {\n    vnode.$key$ = key;\n  }\n  if (BUILD.slotRelocation) {\n    vnode.$name$ = slotName;\n  }\n  return vnode;\n};\n/**\n * A utility function for creating a virtual DOM node from a tag and some\n * possible text content.\n *\n * @param tag the tag for this element\n * @param text possible text content for the node\n * @returns a newly-minted virtual DOM node\n */\nvar newVNode = function newVNode(tag, text) {\n  var vnode = {\n    $flags$: 0,\n    $tag$: tag,\n    $text$: text,\n    $elm$: null,\n    $children$: null\n  };\n  if (BUILD.vdomAttribute) {\n    vnode.$attrs$ = null;\n  }\n  if (BUILD.vdomKey) {\n    vnode.$key$ = null;\n  }\n  if (BUILD.slotRelocation) {\n    vnode.$name$ = null;\n  }\n  return vnode;\n};\nvar Host = {};\n/**\n * Check whether a given node is a Host node or not\n *\n * @param node the virtual DOM node to check\n * @returns whether it's a Host node or not\n */\nvar isHost = function isHost(node) {\n  return node && node.$tag$ === Host;\n};\n/**\n * Implementation of {@link d.FunctionalUtilities} for Stencil's VDom.\n *\n * Note that these functions convert from {@link d.VNode} to\n * {@link d.ChildNode} to give functional component developers a friendly\n * interface.\n */\nvar vdomFnUtils = {\n  forEach: function forEach(children, cb) {\n    return children.map(convertToPublic).forEach(cb);\n  },\n  map: function map(children, cb) {\n    return children.map(convertToPublic).map(cb).map(convertToPrivate);\n  }\n};\n/**\n * Convert a {@link d.VNode} to a {@link d.ChildNode} in order to present a\n * friendlier public interface (hence, 'convertToPublic').\n *\n * @param node the virtual DOM node to convert\n * @returns a converted child node\n */\nvar convertToPublic = function convertToPublic(node) {\n  return {\n    vattrs: node.$attrs$,\n    vchildren: node.$children$,\n    vkey: node.$key$,\n    vname: node.$name$,\n    vtag: node.$tag$,\n    vtext: node.$text$\n  };\n};\n/**\n * Convert a {@link d.ChildNode} back to an equivalent {@link d.VNode} in\n * order to use the resulting object in the virtual DOM. The initial object was\n * likely created as part of presenting a public API, so converting it back\n * involved making it 'private' again (hence, `convertToPrivate`).\n *\n * @param node the child node to convert\n * @returns a converted virtual DOM node\n */\nvar convertToPrivate = function convertToPrivate(node) {\n  if (typeof node.vtag === 'function') {\n    var vnodeData = Object.assign({}, node.vattrs);\n    if (node.vkey) {\n      vnodeData.key = node.vkey;\n    }\n    if (node.vname) {\n      vnodeData.name = node.vname;\n    }\n    return h.apply(void 0, [node.vtag, vnodeData].concat(_toConsumableArray(node.vchildren || [])));\n  }\n  var vnode = newVNode(node.vtag, node.vtext);\n  vnode.$attrs$ = node.vattrs;\n  vnode.$children$ = node.vchildren;\n  vnode.$key$ = node.vkey;\n  vnode.$name$ = node.vname;\n  return vnode;\n};\n/**\n * Validates the ordering of attributes on an input element\n *\n * @param inputElm the element to validate\n */\nvar validateInputProperties = function validateInputProperties(inputElm) {\n  var props = Object.keys(inputElm);\n  var value = props.indexOf('value');\n  if (value === -1) {\n    return;\n  }\n  var typeIndex = props.indexOf('type');\n  var minIndex = props.indexOf('min');\n  var maxIndex = props.indexOf('max');\n  var stepIndex = props.indexOf('step');\n  if (value < typeIndex || value < minIndex || value < maxIndex || value < stepIndex) {\n    consoleDevWarn(\"The \\\"value\\\" prop of <input> should be set after \\\"min\\\", \\\"max\\\", \\\"type\\\" and \\\"step\\\"\");\n  }\n};\nvar initializeClientHydrate = function initializeClientHydrate(hostElm, tagName, hostId, hostRef) {\n  var endHydrate = createTime('hydrateClient', tagName);\n  var shadowRoot = hostElm.shadowRoot;\n  var childRenderNodes = [];\n  var slotNodes = [];\n  var shadowRootNodes = BUILD.shadowDom && shadowRoot ? [] : null;\n  var vnode = hostRef.$vnode$ = newVNode(tagName, null);\n  if (!plt.$orgLocNodes$) {\n    initializeDocumentHydrate(doc.body, plt.$orgLocNodes$ = new Map());\n  }\n  hostElm[HYDRATE_ID] = hostId;\n  hostElm.removeAttribute(HYDRATE_ID);\n  clientHydrate(vnode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, hostElm, hostId);\n  childRenderNodes.map(function (c) {\n    var orgLocationId = c.$hostId$ + '.' + c.$nodeId$;\n    var orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);\n    var node = c.$elm$;\n    if (orgLocationNode && supportsShadow && orgLocationNode['s-en'] === '') {\n      orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);\n    }\n    if (!shadowRoot) {\n      node['s-hn'] = tagName;\n      if (orgLocationNode) {\n        node['s-ol'] = orgLocationNode;\n        node['s-ol']['s-nr'] = node;\n      }\n    }\n    plt.$orgLocNodes$.delete(orgLocationId);\n  });\n  if (BUILD.shadowDom && shadowRoot) {\n    shadowRootNodes.map(function (shadowRootNode) {\n      if (shadowRootNode) {\n        shadowRoot.appendChild(shadowRootNode);\n      }\n    });\n  }\n  endHydrate();\n};\nvar clientHydrate = function clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId) {\n  var childNodeType;\n  var childIdSplt;\n  var childVNode;\n  var i;\n  if (node.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n    childNodeType = node.getAttribute(HYDRATE_CHILD_ID);\n    if (childNodeType) {\n      // got the node data from the element's attribute\n      // `${hostId}.${nodeId}.${depth}.${index}`\n      childIdSplt = childNodeType.split('.');\n      if (childIdSplt[0] === hostId || childIdSplt[0] === '0') {\n        childVNode = {\n          $flags$: 0,\n          $hostId$: childIdSplt[0],\n          $nodeId$: childIdSplt[1],\n          $depth$: childIdSplt[2],\n          $index$: childIdSplt[3],\n          $tag$: node.tagName.toLowerCase(),\n          $elm$: node,\n          $attrs$: null,\n          $children$: null,\n          $key$: null,\n          $name$: null,\n          $text$: null\n        };\n        childRenderNodes.push(childVNode);\n        node.removeAttribute(HYDRATE_CHILD_ID);\n        // this is a new child vnode\n        // so ensure its parent vnode has the vchildren array\n        if (!parentVNode.$children$) {\n          parentVNode.$children$ = [];\n        }\n        // add our child vnode to a specific index of the vnode's children\n        parentVNode.$children$[childVNode.$index$] = childVNode;\n        // this is now the new parent vnode for all the next child checks\n        parentVNode = childVNode;\n        if (shadowRootNodes && childVNode.$depth$ === '0') {\n          shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n        }\n      }\n    }\n    // recursively drill down, end to start so we can remove nodes\n    for (i = node.childNodes.length - 1; i >= 0; i--) {\n      clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.childNodes[i], hostId);\n    }\n    if (node.shadowRoot) {\n      // keep drilling down through the shadow root nodes\n      for (i = node.shadowRoot.childNodes.length - 1; i >= 0; i--) {\n        clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.shadowRoot.childNodes[i], hostId);\n      }\n    }\n  } else if (node.nodeType === 8 /* NODE_TYPE.CommentNode */) {\n    // `${COMMENT_TYPE}.${hostId}.${nodeId}.${depth}.${index}`\n    childIdSplt = node.nodeValue.split('.');\n    if (childIdSplt[1] === hostId || childIdSplt[1] === '0') {\n      // comment node for either the host id or a 0 host id\n      childNodeType = childIdSplt[0];\n      childVNode = {\n        $flags$: 0,\n        $hostId$: childIdSplt[1],\n        $nodeId$: childIdSplt[2],\n        $depth$: childIdSplt[3],\n        $index$: childIdSplt[4],\n        $elm$: node,\n        $attrs$: null,\n        $children$: null,\n        $key$: null,\n        $name$: null,\n        $tag$: null,\n        $text$: null\n      };\n      if (childNodeType === TEXT_NODE_ID) {\n        childVNode.$elm$ = node.nextSibling;\n        if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3 /* NODE_TYPE.TextNode */) {\n          childVNode.$text$ = childVNode.$elm$.textContent;\n          childRenderNodes.push(childVNode);\n          // remove the text comment since it's no longer needed\n          node.remove();\n          if (!parentVNode.$children$) {\n            parentVNode.$children$ = [];\n          }\n          parentVNode.$children$[childVNode.$index$] = childVNode;\n          if (shadowRootNodes && childVNode.$depth$ === '0') {\n            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n          }\n        }\n      } else if (childVNode.$hostId$ === hostId) {\n        // this comment node is specifically for this host id\n        if (childNodeType === SLOT_NODE_ID) {\n          // `${SLOT_NODE_ID}.${hostId}.${nodeId}.${depth}.${index}.${slotName}`;\n          childVNode.$tag$ = 'slot';\n          if (childIdSplt[5]) {\n            node['s-sn'] = childVNode.$name$ = childIdSplt[5];\n          } else {\n            node['s-sn'] = '';\n          }\n          node['s-sr'] = true;\n          if (BUILD.shadowDom && shadowRootNodes) {\n            // browser support shadowRoot and this is a shadow dom component\n            // create an actual slot element\n            childVNode.$elm$ = doc.createElement(childVNode.$tag$);\n            if (childVNode.$name$) {\n              // add the slot name attribute\n              childVNode.$elm$.setAttribute('name', childVNode.$name$);\n            }\n            // insert the new slot element before the slot comment\n            node.parentNode.insertBefore(childVNode.$elm$, node);\n            // remove the slot comment since it's not needed for shadow\n            node.remove();\n            if (childVNode.$depth$ === '0') {\n              shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n            }\n          }\n          slotNodes.push(childVNode);\n          if (!parentVNode.$children$) {\n            parentVNode.$children$ = [];\n          }\n          parentVNode.$children$[childVNode.$index$] = childVNode;\n        } else if (childNodeType === CONTENT_REF_ID) {\n          // `${CONTENT_REF_ID}.${hostId}`;\n          if (BUILD.shadowDom && shadowRootNodes) {\n            // remove the content ref comment since it's not needed for shadow\n            node.remove();\n          } else if (BUILD.slotRelocation) {\n            hostElm['s-cr'] = node;\n            node['s-cn'] = true;\n          }\n        }\n      }\n    }\n  } else if (parentVNode && parentVNode.$tag$ === 'style') {\n    var vnode = newVNode(null, node.textContent);\n    vnode.$elm$ = node;\n    vnode.$index$ = '0';\n    parentVNode.$children$ = [vnode];\n  }\n};\nvar initializeDocumentHydrate = function initializeDocumentHydrate(node, orgLocNodes) {\n  if (node.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n    var _i2 = 0;\n    for (; _i2 < node.childNodes.length; _i2++) {\n      initializeDocumentHydrate(node.childNodes[_i2], orgLocNodes);\n    }\n    if (node.shadowRoot) {\n      for (_i2 = 0; _i2 < node.shadowRoot.childNodes.length; _i2++) {\n        initializeDocumentHydrate(node.shadowRoot.childNodes[_i2], orgLocNodes);\n      }\n    }\n  } else if (node.nodeType === 8 /* NODE_TYPE.CommentNode */) {\n    var childIdSplt = node.nodeValue.split('.');\n    if (childIdSplt[0] === ORG_LOCATION_ID) {\n      orgLocNodes.set(childIdSplt[1] + '.' + childIdSplt[2], node);\n      node.nodeValue = '';\n      // useful to know if the original location is\n      // the root light-dom of a shadow dom component\n      node['s-en'] = childIdSplt[3];\n    }\n  }\n};\n// Private\nvar computeMode = function computeMode(elm) {\n  return modeResolutionChain.map(function (h) {\n    return h(elm);\n  }).find(function (m) {\n    return !!m;\n  });\n};\n// Public\nvar setMode = function setMode(handler) {\n  return modeResolutionChain.push(handler);\n};\nvar getMode = function getMode(ref) {\n  return getHostRef(ref).$modeName$;\n};\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nvar parsePropertyValue = function parsePropertyValue(propValue, propType) {\n  // ensure this value is of the correct prop type\n  if (propValue != null && !isComplexType(propValue)) {\n    if (BUILD.propBoolean && propType & 4 /* MEMBER_FLAGS.Boolean */) {\n      // per the HTML spec, any string value means it is a boolean true value\n      // but we'll cheat here and say that the string \"false\" is the boolean false\n      return propValue === 'false' ? false : propValue === '' || !!propValue;\n    }\n    if (BUILD.propNumber && propType & 2 /* MEMBER_FLAGS.Number */) {\n      // force it to be a number\n      return parseFloat(propValue);\n    }\n    if (BUILD.propString && propType & 1 /* MEMBER_FLAGS.String */) {\n      // could have been passed as a number or boolean\n      // but we still want it as a string\n      return String(propValue);\n    }\n    // redundant return here for better minification\n    return propValue;\n  }\n  // not sure exactly what type we want\n  // so no need to change to a different type\n  return propValue;\n};\nvar getElement = function getElement(ref) {\n  return BUILD.lazyLoad ? getHostRef(ref).$hostElement$ : ref;\n};\nvar createEvent = function createEvent(ref, name, flags) {\n  var elm = getElement(ref);\n  return {\n    emit: function emit(detail) {\n      if (BUILD.isDev && !elm.isConnected) {\n        consoleDevWarn(\"The \\\"\".concat(name, \"\\\" event was emitted, but the dispatcher node is no longer connected to the dom.\"));\n      }\n      return emitEvent(elm, name, {\n        bubbles: !!(flags & 4 /* EVENT_FLAGS.Bubbles */),\n        composed: !!(flags & 2 /* EVENT_FLAGS.Composed */),\n        cancelable: !!(flags & 1 /* EVENT_FLAGS.Cancellable */),\n        detail: detail\n      });\n    }\n  };\n};\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nvar emitEvent = function emitEvent(elm, name, opts) {\n  var ev = plt.ce(name, opts);\n  elm.dispatchEvent(ev);\n  return ev;\n};\nvar rootAppliedStyles = /*@__PURE__*/new WeakMap();\nvar registerStyle = function registerStyle(scopeId, cssText, allowCS) {\n  var style = styles.get(scopeId);\n  if (supportsConstructableStylesheets && allowCS) {\n    style = style || new CSSStyleSheet();\n    if (typeof style === 'string') {\n      style = cssText;\n    } else {\n      style.replaceSync(cssText);\n    }\n  } else {\n    style = cssText;\n  }\n  styles.set(scopeId, style);\n};\nvar addStyle = function addStyle(styleContainerNode, cmpMeta, mode) {\n  var _a;\n  var scopeId = getScopeId(cmpMeta, mode);\n  var style = styles.get(scopeId);\n  if (!BUILD.attachStyles) {\n    return scopeId;\n  }\n  // if an element is NOT connected then getRootNode() will return the wrong root node\n  // so the fallback is to always use the document for the root node in those cases\n  styleContainerNode = styleContainerNode.nodeType === 11 /* NODE_TYPE.DocumentFragment */ ? styleContainerNode : doc;\n  if (style) {\n    if (typeof style === 'string') {\n      styleContainerNode = styleContainerNode.head || styleContainerNode;\n      var appliedStyles = rootAppliedStyles.get(styleContainerNode);\n      var styleElm;\n      if (!appliedStyles) {\n        rootAppliedStyles.set(styleContainerNode, appliedStyles = new Set());\n      }\n      if (!appliedStyles.has(scopeId)) {\n        if (BUILD.hydrateClientSide && styleContainerNode.host && (styleElm = styleContainerNode.querySelector(\"[\".concat(HYDRATED_STYLE_ID, \"=\\\"\").concat(scopeId, \"\\\"]\")))) {\n          // This is only happening on native shadow-dom, do not needs CSS var shim\n          styleElm.innerHTML = style;\n        } else {\n          styleElm = doc.createElement('style');\n          styleElm.innerHTML = style;\n          // Apply CSP nonce to the style tag if it exists\n          var nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n          if (nonce != null) {\n            styleElm.setAttribute('nonce', nonce);\n          }\n          if (BUILD.hydrateServerSide || BUILD.hotModuleReplacement) {\n            styleElm.setAttribute(HYDRATED_STYLE_ID, scopeId);\n          }\n          styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n        }\n        if (appliedStyles) {\n          appliedStyles.add(scopeId);\n        }\n      }\n    } else if (BUILD.constructableCSS && !styleContainerNode.adoptedStyleSheets.includes(style)) {\n      styleContainerNode.adoptedStyleSheets = [].concat(_toConsumableArray(styleContainerNode.adoptedStyleSheets), [style]);\n    }\n  }\n  return scopeId;\n};\nvar attachStyles = function attachStyles(hostRef) {\n  var cmpMeta = hostRef.$cmpMeta$;\n  var elm = hostRef.$hostElement$;\n  var flags = cmpMeta.$flags$;\n  var endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n  var scopeId = addStyle(BUILD.shadowDom && supportsShadow && elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta, hostRef.$modeName$);\n  if ((BUILD.shadowDom || BUILD.scoped) && BUILD.cssAnnotations && flags & 10 /* CMP_FLAGS.needsScopedEncapsulation */) {\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    // DOM WRITE!!\n    elm['s-sc'] = scopeId;\n    elm.classList.add(scopeId + '-h');\n    if (BUILD.scoped && flags & 2 /* CMP_FLAGS.scopedCssEncapsulation */) {\n      elm.classList.add(scopeId + '-s');\n    }\n  }\n  endAttachStyles();\n};\nvar getScopeId = function getScopeId(cmp, mode) {\n  return 'sc-' + (BUILD.mode && mode && cmp.$flags$ & 32 /* CMP_FLAGS.hasMode */ ? cmp.$tagName$ + '-' + mode : cmp.$tagName$);\n};\nvar convertScopedToShadow = function convertScopedToShadow(css) {\n  return css.replace(/\\/\\*!@([^\\/]+)\\*\\/[^\\{]+\\{/g, '$1{');\n};\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n/**\n * When running a VDom render set properties present on a VDom node onto the\n * corresponding HTML element.\n *\n * Note that this function has special functionality for the `class`,\n * `style`, `key`, and `ref` attributes, as well as event handlers (like\n * `onClick`, etc). All others are just passed through as-is.\n *\n * @param elm the HTMLElement onto which attributes should be set\n * @param memberName the name of the attribute to set\n * @param oldValue the old value for the attribute\n * @param newValue the new value for the attribute\n * @param isSvg whether we're in an svg context or not\n * @param flags bitflags for Vdom variables\n */\nvar setAccessor = function setAccessor(elm, memberName, oldValue, newValue, isSvg, flags) {\n  if (oldValue !== newValue) {\n    var isProp = isMemberInElement(elm, memberName);\n    var ln = memberName.toLowerCase();\n    if (BUILD.vdomClass && memberName === 'class') {\n      var classList = elm.classList;\n      var oldClasses = parseClassList(oldValue);\n      var newClasses = parseClassList(newValue);\n      classList.remove.apply(classList, _toConsumableArray(oldClasses.filter(function (c) {\n        return c && !newClasses.includes(c);\n      })));\n      classList.add.apply(classList, _toConsumableArray(newClasses.filter(function (c) {\n        return c && !oldClasses.includes(c);\n      })));\n    } else if (BUILD.vdomStyle && memberName === 'style') {\n      // update style attribute, css properties and values\n      if (BUILD.updatable) {\n        for (var prop in oldValue) {\n          if (!newValue || newValue[prop] == null) {\n            if (!BUILD.hydrateServerSide && prop.includes('-')) {\n              elm.style.removeProperty(prop);\n            } else {\n              elm.style[prop] = '';\n            }\n          }\n        }\n      }\n      for (var _prop in newValue) {\n        if (!oldValue || newValue[_prop] !== oldValue[_prop]) {\n          if (!BUILD.hydrateServerSide && _prop.includes('-')) {\n            elm.style.setProperty(_prop, newValue[_prop]);\n          } else {\n            elm.style[_prop] = newValue[_prop];\n          }\n        }\n      }\n    } else if (BUILD.vdomKey && memberName === 'key') ;else if (BUILD.vdomRef && memberName === 'ref') {\n      // minifier will clean this up\n      if (newValue) {\n        newValue(elm);\n      }\n    } else if (BUILD.vdomListener && (BUILD.lazyLoad ? !isProp : !elm.__lookupSetter__(memberName)) && memberName[0] === 'o' && memberName[1] === 'n') {\n      // Event Handlers\n      // so if the member name starts with \"on\" and the 3rd characters is\n      // a capital letter, and it's not already a member on the element,\n      // then we're assuming it's an event listener\n      if (memberName[2] === '-') {\n        // on- prefixed events\n        // allows to be explicit about the dom event to listen without any magic\n        // under the hood:\n        // <my-cmp on-click> // listens for \"click\"\n        // <my-cmp on-Click> // listens for \"Click\"\n        // <my-cmp on-ionChange> // listens for \"ionChange\"\n        // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n        memberName = memberName.slice(3);\n      } else if (isMemberInElement(win, ln)) {\n        // standard event\n        // the JSX attribute could have been \"onMouseOver\" and the\n        // member name \"onmouseover\" is on the window's prototype\n        // so let's add the listener \"mouseover\", which is all lowercased\n        memberName = ln.slice(2);\n      } else {\n        // custom event\n        // the JSX attribute could have been \"onMyCustomEvent\"\n        // so let's trim off the \"on\" prefix and lowercase the first character\n        // and add the listener \"myCustomEvent\"\n        // except for the first character, we keep the event name case\n        memberName = ln[2] + memberName.slice(3);\n      }\n      if (oldValue) {\n        plt.rel(elm, memberName, oldValue, false);\n      }\n      if (newValue) {\n        plt.ael(elm, memberName, newValue, false);\n      }\n    } else if (BUILD.vdomPropOrAttr) {\n      // Set property if it exists and it's not a SVG\n      var isComplex = isComplexType(newValue);\n      if ((isProp || isComplex && newValue !== null) && !isSvg) {\n        try {\n          if (!elm.tagName.includes('-')) {\n            var n = newValue == null ? '' : newValue;\n            // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n            if (memberName === 'list') {\n              isProp = false;\n            } else if (oldValue == null || elm[memberName] != n) {\n              elm[memberName] = n;\n            }\n          } else {\n            elm[memberName] = newValue;\n          }\n        } catch (e) {}\n      }\n      /**\n       * Need to manually update attribute if:\n       * - memberName is not an attribute\n       * - if we are rendering the host element in order to reflect attribute\n       * - if it's a SVG, since properties might not work in <svg>\n       * - if the newValue is null/undefined or 'false'.\n       */\n      var xlink = false;\n      if (BUILD.vdomXlink) {\n        if (ln !== (ln = ln.replace(/^xlink\\:?/, ''))) {\n          memberName = ln;\n          xlink = true;\n        }\n      }\n      if (newValue == null || newValue === false) {\n        if (newValue !== false || elm.getAttribute(memberName) === '') {\n          if (BUILD.vdomXlink && xlink) {\n            elm.removeAttributeNS(XLINK_NS, memberName);\n          } else {\n            elm.removeAttribute(memberName);\n          }\n        }\n      } else if ((!isProp || flags & 4 /* VNODE_FLAGS.isHost */ || isSvg) && !isComplex) {\n        newValue = newValue === true ? '' : newValue;\n        if (BUILD.vdomXlink && xlink) {\n          elm.setAttributeNS(XLINK_NS, memberName, newValue);\n        } else {\n          elm.setAttribute(memberName, newValue);\n        }\n      }\n    }\n  }\n};\nvar parseClassListRegex = /\\s/;\nvar parseClassList = function parseClassList(value) {\n  return !value ? [] : value.split(parseClassListRegex);\n};\nvar updateElement = function updateElement(oldVnode, newVnode, isSvgMode, memberName) {\n  // if the element passed in is a shadow root, which is a document fragment\n  // then we want to be adding attrs/props to the shadow root's \"host\" element\n  // if it's not a shadow root, then we add attrs/props to the same element\n  var elm = newVnode.$elm$.nodeType === 11 /* NODE_TYPE.DocumentFragment */ && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;\n  var oldVnodeAttrs = oldVnode && oldVnode.$attrs$ || EMPTY_OBJ;\n  var newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n  if (BUILD.updatable) {\n    // remove attributes no longer present on the vnode by setting them to undefined\n    for (memberName in oldVnodeAttrs) {\n      if (!(memberName in newVnodeAttrs)) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n      }\n    }\n  }\n  // add new & update changed attributes\n  for (memberName in newVnodeAttrs) {\n    setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n  }\n};\n/**\n * Create a DOM Node corresponding to one of the children of a given VNode.\n *\n * @param oldParentVNode the parent VNode from the previous render\n * @param newParentVNode the parent VNode from the current render\n * @param childIndex the index of the VNode, in the _new_ parent node's\n * children, for which we will create a new DOM node\n * @param parentElm the parent DOM node which our new node will be a child of\n * @returns the newly created node\n */\nvar createElm = function createElm(oldParentVNode, newParentVNode, childIndex, parentElm) {\n  // tslint:disable-next-line: prefer-const\n  var newVNode = newParentVNode.$children$[childIndex];\n  var i = 0;\n  var elm;\n  var childNode;\n  var oldVNode;\n  if (BUILD.slotRelocation && !useNativeShadowDom) {\n    // remember for later we need to check to relocate nodes\n    checkSlotRelocate = true;\n    if (newVNode.$tag$ === 'slot') {\n      if (scopeId) {\n        // scoped css needs to add its scoped id to the parent element\n        parentElm.classList.add(scopeId + '-s');\n      }\n      newVNode.$flags$ |= newVNode.$children$ ?\n      // slot element has fallback content\n      2 /* VNODE_FLAGS.isSlotFallback */ :\n      // slot element does not have fallback content\n      1 /* VNODE_FLAGS.isSlotReference */;\n    }\n  }\n\n  if (BUILD.isDev && newVNode.$elm$) {\n    consoleDevError(\"The JSX \".concat(newVNode.$text$ !== null ? \"\\\"\".concat(newVNode.$text$, \"\\\" text\") : \"\\\"\".concat(newVNode.$tag$, \"\\\" element\"), \" node should not be shared within the same renderer. The renderer caches element lookups in order to improve performance. However, a side effect from this is that the exact same JSX node should not be reused. For more information please see https://stenciljs.com/docs/templating-jsx#avoid-shared-jsx-nodes\"));\n  }\n  if (BUILD.vdomText && newVNode.$text$ !== null) {\n    // create text node\n    elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n  } else if (BUILD.slotRelocation && newVNode.$flags$ & 1 /* VNODE_FLAGS.isSlotReference */) {\n    // create a slot reference node\n    elm = newVNode.$elm$ = BUILD.isDebug || BUILD.hydrateServerSide ? slotReferenceDebugNode(newVNode) : doc.createTextNode('');\n  } else {\n    if (BUILD.svg && !isSvgMode) {\n      isSvgMode = newVNode.$tag$ === 'svg';\n    }\n    // create element\n    elm = newVNode.$elm$ = BUILD.svg ? doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, BUILD.slotRelocation && newVNode.$flags$ & 2 /* VNODE_FLAGS.isSlotFallback */ ? 'slot-fb' : newVNode.$tag$) : doc.createElement(BUILD.slotRelocation && newVNode.$flags$ & 2 /* VNODE_FLAGS.isSlotFallback */ ? 'slot-fb' : newVNode.$tag$);\n    if (BUILD.svg && isSvgMode && newVNode.$tag$ === 'foreignObject') {\n      isSvgMode = false;\n    }\n    // add css classes, attrs, props, listeners, etc.\n    if (BUILD.vdomAttribute) {\n      updateElement(null, newVNode, isSvgMode);\n    }\n    if ((BUILD.shadowDom || BUILD.scoped) && isDef(scopeId) && elm['s-si'] !== scopeId) {\n      // if there is a scopeId and this is the initial render\n      // then let's add the scopeId as a css class\n      elm.classList.add(elm['s-si'] = scopeId);\n    }\n    if (newVNode.$children$) {\n      for (i = 0; i < newVNode.$children$.length; ++i) {\n        // create the node\n        childNode = createElm(oldParentVNode, newVNode, i, elm);\n        // return node could have been null\n        if (childNode) {\n          // append our new node\n          elm.appendChild(childNode);\n        }\n      }\n    }\n    if (BUILD.svg) {\n      if (newVNode.$tag$ === 'svg') {\n        // Only reset the SVG context when we're exiting <svg> element\n        isSvgMode = false;\n      } else if (elm.tagName === 'foreignObject') {\n        // Reenter SVG context when we're exiting <foreignObject> element\n        isSvgMode = true;\n      }\n    }\n  }\n  if (BUILD.slotRelocation) {\n    elm['s-hn'] = hostTagName;\n    if (newVNode.$flags$ & (2 /* VNODE_FLAGS.isSlotFallback */ | 1 /* VNODE_FLAGS.isSlotReference */)) {\n      // remember the content reference comment\n      elm['s-sr'] = true;\n      // remember the content reference comment\n      elm['s-cr'] = contentRef;\n      // remember the slot name, or empty string for default slot\n      elm['s-sn'] = newVNode.$name$ || '';\n      // check if we've got an old vnode for this slot\n      oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n      if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\n        // we've got an old slot vnode and the wrapper is being replaced\n        // so let's move the old slot content back to it's original location\n        putBackInOriginalLocation(oldParentVNode.$elm$, false);\n      }\n    }\n  }\n  return elm;\n};\nvar putBackInOriginalLocation = function putBackInOriginalLocation(parentElm, recursive) {\n  plt.$flags$ |= 1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n  var oldSlotChildNodes = parentElm.childNodes;\n  for (var _i3 = oldSlotChildNodes.length - 1; _i3 >= 0; _i3--) {\n    var childNode = oldSlotChildNodes[_i3];\n    if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {\n      // // this child node in the old element is from another component\n      // // remove this node from the old slot's parent\n      // childNode.remove();\n      // and relocate it back to it's original location\n      parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode));\n      // remove the old original location comment entirely\n      // later on the patch function will know what to do\n      // and move this to the correct spot if need be\n      childNode['s-ol'].remove();\n      childNode['s-ol'] = undefined;\n      checkSlotRelocate = true;\n    }\n    if (recursive) {\n      putBackInOriginalLocation(childNode, recursive);\n    }\n  }\n  plt.$flags$ &= ~1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n};\n/**\n * Create DOM nodes corresponding to a list of {@link d.Vnode} objects and\n * add them to the DOM in the appropriate place.\n *\n * @param parentElm the DOM node which should be used as a parent for the new\n * DOM nodes\n * @param before a child of the `parentElm` which the new children should be\n * inserted before (optional)\n * @param parentVNode the parent virtual DOM node\n * @param vnodes the new child virtual DOM nodes to produce DOM nodes for\n * @param startIdx the index in the child virtual DOM nodes at which to start\n * creating DOM nodes (inclusive)\n * @param endIdx the index in the child virtual DOM nodes at which to stop\n * creating DOM nodes (inclusive)\n */\nvar addVnodes = function addVnodes(parentElm, before, parentVNode, vnodes, startIdx, endIdx) {\n  var containerElm = BUILD.slotRelocation && parentElm['s-cr'] && parentElm['s-cr'].parentNode || parentElm;\n  var childNode;\n  if (BUILD.shadowDom && containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n    containerElm = containerElm.shadowRoot;\n  }\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnodes[startIdx]) {\n      childNode = createElm(null, parentVNode, startIdx, parentElm);\n      if (childNode) {\n        vnodes[startIdx].$elm$ = childNode;\n        containerElm.insertBefore(childNode, BUILD.slotRelocation ? referenceNode(before) : before);\n      }\n    }\n  }\n};\n/**\n * Remove the DOM elements corresponding to a list of {@link d.VNode} objects.\n * This can be used to, for instance, clean up after a list of children which\n * should no longer be shown.\n *\n * This function also handles some of Stencil's slot relocation logic.\n *\n * @param vnodes a list of virtual DOM nodes to remove\n * @param startIdx the index at which to start removing nodes (inclusive)\n * @param endIdx the index at which to stop removing nodes (inclusive)\n */\nvar removeVnodes = function removeVnodes(vnodes, startIdx, endIdx) {\n  for (var index = startIdx; index <= endIdx; ++index) {\n    var vnode = vnodes[index];\n    if (vnode) {\n      var elm = vnode.$elm$;\n      nullifyVNodeRefs(vnode);\n      if (elm) {\n        if (BUILD.slotRelocation) {\n          // we're removing this element\n          // so it's possible we need to show slot fallback content now\n          checkSlotFallbackVisibility = true;\n          if (elm['s-ol']) {\n            // remove the original location comment\n            elm['s-ol'].remove();\n          } else {\n            // it's possible that child nodes of the node\n            // that's being removed are slot nodes\n            putBackInOriginalLocation(elm, true);\n          }\n        }\n        // remove the vnode's element from the dom\n        elm.remove();\n      }\n    }\n  }\n};\n/**\n * Reconcile the children of a new VNode with the children of an old VNode by\n * traversing the two collections of children, identifying nodes that are\n * conserved or changed, calling out to `patch` to make any necessary\n * updates to the DOM, and rearranging DOM nodes as needed.\n *\n * The algorithm for reconciling children works by analyzing two 'windows' onto\n * the two arrays of children (`oldCh` and `newCh`). We keep track of the\n * 'windows' by storing start and end indices and references to the\n * corresponding array entries. Initially the two 'windows' are basically equal\n * to the entire array, but we progressively narrow the windows until there are\n * no children left to update by doing the following:\n *\n * 1. Skip any `null` entries at the beginning or end of the two arrays, so\n *    that if we have an initial array like the following we'll end up dealing\n *    only with a window bounded by the highlighted elements:\n *\n *    [null, null, VNode1 , ... , VNode2, null, null]\n *                 ^^^^^^         ^^^^^^\n *\n * 2. Check to see if the elements at the head and tail positions are equal\n *    across the windows. This will basically detect elements which haven't\n *    been added, removed, or changed position, i.e. if you had the following\n *    VNode elements (represented as HTML):\n *\n *    oldVNode: `<div><p><span>HEY</span></p></div>`\n *    newVNode: `<div><p><span>THERE</span></p></div>`\n *\n *    Then when comparing the children of the `<div>` tag we check the equality\n *    of the VNodes corresponding to the `<p>` tags and, since they are the\n *    same tag in the same position, we'd be able to avoid completely\n *    re-rendering the subtree under them with a new DOM element and would just\n *    call out to `patch` to handle reconciling their children and so on.\n *\n * 3. Check, for both windows, to see if the element at the beginning of the\n *    window corresponds to the element at the end of the other window. This is\n *    a heuristic which will let us identify _some_ situations in which\n *    elements have changed position, for instance it _should_ detect that the\n *    children nodes themselves have not changed but merely moved in the\n *    following example:\n *\n *    oldVNode: `<div><element-one /><element-two /></div>`\n *    newVNode: `<div><element-two /><element-one /></div>`\n *\n *    If we find cases like this then we also need to move the concrete DOM\n *    elements corresponding to the moved children to write the re-order to the\n *    DOM.\n *\n * 4. Finally, if VNodes have the `key` attribute set on them we check for any\n *    nodes in the old children which have the same key as the first element in\n *    our window on the new children. If we find such a node we handle calling\n *    out to `patch`, moving relevant DOM nodes, and so on, in accordance with\n *    what we find.\n *\n * Finally, once we've narrowed our 'windows' to the point that either of them\n * collapse (i.e. they have length 0) we then handle any remaining VNode\n * insertion or deletion that needs to happen to get a DOM state that correctly\n * reflects the new child VNodes. If, for instance, after our window on the old\n * children has collapsed we still have more nodes on the new children that\n * we haven't dealt with yet then we need to add them, or if the new children\n * collapse but we still have unhandled _old_ children then we need to make\n * sure the corresponding DOM nodes are removed.\n *\n * @param parentElm the node into which the parent VNode is rendered\n * @param oldCh the old children of the parent node\n * @param newVNode the new VNode which will replace the parent\n * @param newCh the new children of the parent node\n */\nvar updateChildren = function updateChildren(parentElm, oldCh, newVNode, newCh) {\n  var oldStartIdx = 0;\n  var newStartIdx = 0;\n  var idxInOld = 0;\n  var i = 0;\n  var oldEndIdx = oldCh.length - 1;\n  var oldStartVnode = oldCh[0];\n  var oldEndVnode = oldCh[oldEndIdx];\n  var newEndIdx = newCh.length - 1;\n  var newStartVnode = newCh[0];\n  var newEndVnode = newCh[newEndIdx];\n  var node;\n  var elmToMove;\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    if (oldStartVnode == null) {\n      // VNode might have been moved left\n      oldStartVnode = oldCh[++oldStartIdx];\n    } else if (oldEndVnode == null) {\n      oldEndVnode = oldCh[--oldEndIdx];\n    } else if (newStartVnode == null) {\n      newStartVnode = newCh[++newStartIdx];\n    } else if (newEndVnode == null) {\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newStartVnode)) {\n      // if the start nodes are the same then we should patch the new VNode\n      // onto the old one, and increment our `newStartIdx` and `oldStartIdx`\n      // indices to reflect that. We don't need to move any DOM Nodes around\n      // since things are matched up in order.\n      patch(oldStartVnode, newStartVnode);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else if (isSameVnode(oldEndVnode, newEndVnode)) {\n      // likewise, if the end nodes are the same we patch new onto old and\n      // decrement our end indices, and also likewise in this case we don't\n      // need to move any DOM Nodes.\n      patch(oldEndVnode, newEndVnode);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newEndVnode)) {\n      // case: \"Vnode moved right\"\n      //\n      // We've found that the last node in our window on the new children is\n      // the same VNode as the _first_ node in our window on the old children\n      // we're dealing with now. Visually, this is the layout of these two\n      // nodes:\n      //\n      // newCh: [..., newStartVnode , ... , newEndVnode , ...]\n      //                                    ^^^^^^^^^^^\n      // oldCh: [..., oldStartVnode , ... , oldEndVnode , ...]\n      //              ^^^^^^^^^^^^^\n      //\n      // In this situation we need to patch `newEndVnode` onto `oldStartVnode`\n      // and move the DOM element for `oldStartVnode`.\n      if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n        putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n      }\n      patch(oldStartVnode, newEndVnode);\n      // We need to move the element for `oldStartVnode` into a position which\n      // will be appropriate for `newEndVnode`. For this we can use\n      // `.insertBefore` and `oldEndVnode.$elm$.nextSibling`. If there is a\n      // sibling for `oldEndVnode.$elm$` then we want to move the DOM node for\n      // `oldStartVnode` between `oldEndVnode` and it's sibling, like so:\n      //\n      // <old-start-node />\n      // <some-intervening-node />\n      // <old-end-node />\n      // <!-- ->              <-- `oldStartVnode.$elm$` should be inserted here\n      // <next-sibling />\n      //\n      // If instead `oldEndVnode.$elm$` has no sibling then we just want to put\n      // the node for `oldStartVnode` at the end of the children of\n      // `parentElm`. Luckily, `Node.nextSibling` will return `null` if there\n      // aren't any siblings, and passing `null` to `Node.insertBefore` will\n      // append it to the children of the parent element.\n      parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldEndVnode, newStartVnode)) {\n      // case: \"Vnode moved left\"\n      //\n      // We've found that the first node in our window on the new children is\n      // the same VNode as the _last_ node in our window on the old children.\n      // Visually, this is the layout of these two nodes:\n      //\n      // newCh: [..., newStartVnode , ... , newEndVnode , ...]\n      //              ^^^^^^^^^^^^^\n      // oldCh: [..., oldStartVnode , ... , oldEndVnode , ...]\n      //                                    ^^^^^^^^^^^\n      //\n      // In this situation we need to patch `newStartVnode` onto `oldEndVnode`\n      // (which will handle updating any changed attributes, reconciling their\n      // children etc) but we also need to move the DOM node to which\n      // `oldEndVnode` corresponds.\n      if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n        putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n      }\n      patch(oldEndVnode, newStartVnode);\n      // We've already checked above if `oldStartVnode` and `newStartVnode` are\n      // the same node, so since we're here we know that they are not. Thus we\n      // can move the element for `oldEndVnode` _before_ the element for\n      // `oldStartVnode`, leaving `oldStartVnode` to be reconciled in the\n      // future.\n      parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else {\n      // Here we do some checks to match up old and new nodes based on the\n      // `$key$` attribute, which is set by putting a `key=\"my-key\"` attribute\n      // in the JSX for a DOM element in the implementation of a Stencil\n      // component.\n      //\n      // First we check to see if there are any nodes in the array of old\n      // children which have the same key as the first node in the new\n      // children.\n      idxInOld = -1;\n      if (BUILD.vdomKey) {\n        for (i = oldStartIdx; i <= oldEndIdx; ++i) {\n          if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {\n            idxInOld = i;\n            break;\n          }\n        }\n      }\n      if (BUILD.vdomKey && idxInOld >= 0) {\n        // We found a node in the old children which matches up with the first\n        // node in the new children! So let's deal with that\n        elmToMove = oldCh[idxInOld];\n        if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n          // the tag doesn't match so we'll need a new DOM element\n          node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld, parentElm);\n        } else {\n          patch(elmToMove, newStartVnode);\n          // invalidate the matching old node so that we won't try to update it\n          // again later on\n          oldCh[idxInOld] = undefined;\n          node = elmToMove.$elm$;\n        }\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        // We either didn't find an element in the old children that matches\n        // the key of the first new child OR the build is not using `key`\n        // attributes at all. In either case we need to create a new element\n        // for the new node.\n        node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx, parentElm);\n        newStartVnode = newCh[++newStartIdx];\n      }\n      if (node) {\n        // if we created a new node then handle inserting it to the DOM\n        if (BUILD.slotRelocation) {\n          parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\n        } else {\n          oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n        }\n      }\n    }\n  }\n  if (oldStartIdx > oldEndIdx) {\n    // we have some more new nodes to add which don't match up with old nodes\n    addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n  } else if (BUILD.updatable && newStartIdx > newEndIdx) {\n    // there are nodes in the `oldCh` array which no longer correspond to nodes\n    // in the new array, so lets remove them (which entails cleaning up the\n    // relevant DOM nodes)\n    removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n  }\n};\n/**\n * Compare two VNodes to determine if they are the same\n *\n * **NB**: This function is an equality _heuristic_ based on the available\n * information set on the two VNodes and can be misleading under certain\n * circumstances. In particular, if the two nodes do not have `key` attrs\n * (available under `$key$` on VNodes) then the function falls back on merely\n * checking that they have the same tag.\n *\n * So, in other words, if `key` attrs are not set on VNodes which may be\n * changing order within a `children` array or something along those lines then\n * we could obtain a false negative and then have to do needless re-rendering\n * (i.e. we'd say two VNodes aren't equal when in fact they should be).\n *\n * @param leftVNode the first VNode to check\n * @param rightVNode the second VNode to check\n * @returns whether they're equal or not\n */\nvar isSameVnode = function isSameVnode(leftVNode, rightVNode) {\n  // compare if two vnode to see if they're \"technically\" the same\n  // need to have the same element tag, and same key to be the same\n  if (leftVNode.$tag$ === rightVNode.$tag$) {\n    if (BUILD.slotRelocation && leftVNode.$tag$ === 'slot') {\n      return leftVNode.$name$ === rightVNode.$name$;\n    }\n    // this will be set if components in the build have `key` attrs set on them\n    if (BUILD.vdomKey) {\n      return leftVNode.$key$ === rightVNode.$key$;\n    }\n    return true;\n  }\n  return false;\n};\nvar referenceNode = function referenceNode(node) {\n  // this node was relocated to a new location in the dom\n  // because of some other component's slot\n  // but we still have an html comment in place of where\n  // it's original location was according to it's original vdom\n  return node && node['s-ol'] || node;\n};\nvar parentReferenceNode = function parentReferenceNode(node) {\n  return (node['s-ol'] ? node['s-ol'] : node).parentNode;\n};\n/**\n * Handle reconciling an outdated VNode with a new one which corresponds to\n * it. This function handles flushing updates to the DOM and reconciling the\n * children of the two nodes (if any).\n *\n * @param oldVNode an old VNode whose DOM element and children we want to update\n * @param newVNode a new VNode representing an updated version of the old one\n */\nvar patch = function patch(oldVNode, newVNode) {\n  var elm = newVNode.$elm$ = oldVNode.$elm$;\n  var oldChildren = oldVNode.$children$;\n  var newChildren = newVNode.$children$;\n  var tag = newVNode.$tag$;\n  var text = newVNode.$text$;\n  var defaultHolder;\n  if (!BUILD.vdomText || text === null) {\n    if (BUILD.svg) {\n      // test if we're rendering an svg element, or still rendering nodes inside of one\n      // only add this to the when the compiler sees we're using an svg somewhere\n      isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n    }\n    if (BUILD.vdomAttribute || BUILD.reflect) {\n      if (BUILD.slot && tag === 'slot') ;else {\n        // either this is the first render of an element OR it's an update\n        // AND we already know it's possible it could have changed\n        // this updates the element's css classes, attrs, props, listeners, etc.\n        updateElement(oldVNode, newVNode, isSvgMode);\n      }\n    }\n    if (BUILD.updatable && oldChildren !== null && newChildren !== null) {\n      // looks like there's child vnodes for both the old and new vnodes\n      // so we need to call `updateChildren` to reconcile them\n      updateChildren(elm, oldChildren, newVNode, newChildren);\n    } else if (newChildren !== null) {\n      // no old child vnodes, but there are new child vnodes to add\n      if (BUILD.updatable && BUILD.vdomText && oldVNode.$text$ !== null) {\n        // the old vnode was text, so be sure to clear it out\n        elm.textContent = '';\n      }\n      // add the new vnode children\n      addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n    } else if (BUILD.updatable && oldChildren !== null) {\n      // no new child vnodes, but there are old child vnodes to remove\n      removeVnodes(oldChildren, 0, oldChildren.length - 1);\n    }\n    if (BUILD.svg && isSvgMode && tag === 'svg') {\n      isSvgMode = false;\n    }\n  } else if (BUILD.vdomText && BUILD.slotRelocation && (defaultHolder = elm['s-cr'])) {\n    // this element has slotted content\n    defaultHolder.parentNode.textContent = text;\n  } else if (BUILD.vdomText && oldVNode.$text$ !== text) {\n    // update the text content for the text only vnode\n    // and also only if the text is different than before\n    elm.data = text;\n  }\n};\n/**\n * Adjust the `.hidden` property as-needed on any nodes in a DOM subtree which\n * are slot fallbacks nodes.\n *\n * A slot fallback node should be visible by default. Then, it should be\n * conditionally hidden if:\n *\n * - it has a sibling with a `slot` property set to its slot name or if\n * - it is a default fallback slot node, in which case we hide if it has any\n *   content\n *\n * @param elm the element of interest\n */\nvar updateFallbackSlotVisibility = function updateFallbackSlotVisibility(elm) {\n  var childNodes = elm.childNodes;\n  var _iterator = _createForOfIteratorHelper(childNodes),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var childNode = _step.value;\n      if (childNode.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n        if (childNode['s-sr']) {\n          // this is a slot fallback node\n          // get the slot name for this slot reference node\n          var slotName = childNode['s-sn'];\n          // by default always show a fallback slot node\n          // then hide it if there are other slots in the light dom\n          childNode.hidden = false;\n          // we need to check all of its sibling nodes in order to see if\n          // `childNode` should be hidden\n          var _iterator2 = _createForOfIteratorHelper(childNodes),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var siblingNode = _step2.value;\n              if (siblingNode['s-hn'] !== childNode['s-hn'] || slotName !== '') {\n                // this sibling node is from a different component OR is a named\n                // fallback slot node\n                if (siblingNode.nodeType === 1 /* NODE_TYPE.ElementNode */ && slotName === siblingNode.getAttribute('slot')) {\n                  childNode.hidden = true;\n                  break;\n                }\n              } else {\n                // this is a default fallback slot node\n                // any element or text node (with content)\n                // should hide the default fallback slot node\n                if (siblingNode.nodeType === 1 /* NODE_TYPE.ElementNode */ || siblingNode.nodeType === 3 /* NODE_TYPE.TextNode */ && siblingNode.textContent.trim() !== '') {\n                  childNode.hidden = true;\n                  break;\n                }\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n        // keep drilling down\n        updateFallbackSlotVisibility(childNode);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\n/**\n * Component-global information about nodes which are either currently being\n * relocated or will be shortly.\n */\nvar relocateNodes = [];\n/**\n * Mark the contents of a slot for relocation via adding references to them to\n * the {@link relocateNodes} data structure. The actual work of relocating them\n * will then be handled in {@link renderVdom}.\n *\n * @param elm a render node whose child nodes need to be relocated\n */\nvar markSlotContentForRelocation = function markSlotContentForRelocation(elm) {\n  // tslint:disable-next-line: prefer-const\n  var node;\n  var hostContentNodes;\n  var j;\n  var _iterator3 = _createForOfIteratorHelper(elm.childNodes),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var childNode = _step3.value;\n      // we need to find child nodes which are slot references so we can then try\n      // to match them up with nodes that need to be relocated\n      if (childNode['s-sr'] && (node = childNode['s-cr']) && node.parentNode) {\n        // first get the content reference comment node ('s-cr'), then we get\n        // its parent, which is where all the host content is now\n        hostContentNodes = node.parentNode.childNodes;\n        var slotName = childNode['s-sn'];\n        // iterate through all the nodes under the location where the host was\n        // originally rendered\n        var _loop = function _loop() {\n          node = hostContentNodes[j];\n          // check that the node is not a content reference node or a node\n          // reference and then check that the host name does not match that of\n          // childNode\n          if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn']) {\n            // if `node` is located in the slot that `childNode` refers to (via the\n            // `'s-sn'` property) then we need to relocate it from it's current spot\n            // (under the host element parent) to the right slot location\n            if (isNodeLocatedInSlot(node, slotName)) {\n              // it's possible we've already decided to relocate this node\n              var relocateNodeData = relocateNodes.find(function (r) {\n                return r.$nodeToRelocate$ === node;\n              });\n              // made some changes to slots\n              // let's make sure we also double check\n              // fallbacks are correctly hidden or shown\n              checkSlotFallbackVisibility = true;\n              // ensure that the slot-name attr is correct\n              node['s-sn'] = node['s-sn'] || slotName;\n              if (relocateNodeData) {\n                // we marked this node for relocation previously but didn't find\n                // out the slot reference node to which it needs to be relocated\n                // so write it down now!\n                relocateNodeData.$slotRefNode$ = childNode;\n              } else {\n                // add to our list of nodes to relocate\n                relocateNodes.push({\n                  $slotRefNode$: childNode,\n                  $nodeToRelocate$: node\n                });\n              }\n              if (node['s-sr']) {\n                relocateNodes.map(function (relocateNode) {\n                  if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {\n                    relocateNodeData = relocateNodes.find(function (r) {\n                      return r.$nodeToRelocate$ === node;\n                    });\n                    if (relocateNodeData && !relocateNode.$slotRefNode$) {\n                      relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\n                    }\n                  }\n                });\n              }\n            } else if (!relocateNodes.some(function (r) {\n              return r.$nodeToRelocate$ === node;\n            })) {\n              // the node is not found within the slot (`childNode`) that we're\n              // currently looking at, so we stick it into `relocateNodes` to\n              // handle later. If we never find a home for this element then\n              // we'll need to hide it\n              relocateNodes.push({\n                $nodeToRelocate$: node\n              });\n            }\n          }\n        };\n        for (j = hostContentNodes.length - 1; j >= 0; j--) {\n          _loop();\n        }\n      }\n      // if we're dealing with any type of element (capable of itself being a\n      // slot reference or containing one) then we recur\n      if (childNode.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n        markSlotContentForRelocation(childNode);\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n};\n/**\n * Check whether a node is located in a given named slot.\n *\n * @param nodeToRelocate the node of interest\n * @param slotName the slot name to check\n * @returns whether the node is located in the slot or not\n */\nvar isNodeLocatedInSlot = function isNodeLocatedInSlot(nodeToRelocate, slotName) {\n  if (nodeToRelocate.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n    if (nodeToRelocate.getAttribute('slot') === null && slotName === '') {\n      // if the node doesn't have a slot attribute, and the slot we're checking\n      // is not a named slot, then we assume the node should be within the slot\n      return true;\n    }\n    if (nodeToRelocate.getAttribute('slot') === slotName) {\n      return true;\n    }\n    return false;\n  }\n  if (nodeToRelocate['s-sn'] === slotName) {\n    return true;\n  }\n  return slotName === '';\n};\n/**\n * 'Nullify' any VDom `ref` callbacks on a VDom node or its children by calling\n * them with `null`. This signals that the DOM element corresponding to the VDom\n * node has been removed from the DOM.\n *\n * @param vNode a virtual DOM node\n */\nvar nullifyVNodeRefs = function nullifyVNodeRefs(vNode) {\n  if (BUILD.vdomRef) {\n    vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n    vNode.$children$ && vNode.$children$.map(nullifyVNodeRefs);\n  }\n};\n/**\n * The main entry point for Stencil's virtual DOM-based rendering engine\n *\n * Given a {@link d.HostRef} container and some virtual DOM nodes, this\n * function will handle creating a virtual DOM tree with a single root, patching\n * the current virtual DOM tree onto an old one (if any), dealing with slot\n * relocation, and reflecting attributes.\n *\n * @param hostRef data needed to root and render the virtual DOM tree, such as\n * the DOM node into which it should be rendered.\n * @param renderFnResults the virtual DOM nodes to be rendered\n * @param isInitialLoad whether or not this is the first call after page load\n */\nvar renderVdom = function renderVdom(hostRef, renderFnResults) {\n  var isInitialLoad = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var hostElm = hostRef.$hostElement$;\n  var cmpMeta = hostRef.$cmpMeta$;\n  var oldVNode = hostRef.$vnode$ || newVNode(null, null);\n  // if `renderFnResults` is a Host node then we can use it directly. If not,\n  // we need to call `h` again to wrap the children of our component in a\n  // 'dummy' Host node (well, an empty vnode) since `renderVdom` assumes\n  // implicitly that the top-level vdom node is 1) an only child and 2)\n  // contains attrs that need to be set on the host element.\n  var rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n  hostTagName = hostElm.tagName;\n  // <Host> runtime check\n  if (BUILD.isDev && Array.isArray(renderFnResults) && renderFnResults.some(isHost)) {\n    throw new Error(\"The <Host> must be the single root component.\\nLooks like the render() function of \\\"\".concat(hostTagName.toLowerCase(), \"\\\" is returning an array that contains the <Host>.\\n\\nThe render() function should look like this instead:\\n\\nrender() {\\n  // Do not return an array\\n  return (\\n    <Host>{content}</Host>\\n  );\\n}\\n  \"));\n  }\n  if (BUILD.reflect && cmpMeta.$attrsToReflect$) {\n    rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n    cmpMeta.$attrsToReflect$.map(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n        propName = _ref3[0],\n        attribute = _ref3[1];\n      return rootVnode.$attrs$[attribute] = hostElm[propName];\n    });\n  }\n  // On the first render and *only* on the first render we want to check for\n  // any attributes set on the host element which are also set on the vdom\n  // node. If we find them, we override the value on the VDom node attrs with\n  // the value from the host element, which allows developers building apps\n  // with Stencil components to override e.g. the `role` attribute on a\n  // component even if it's already set on the `Host`.\n  if (isInitialLoad && rootVnode.$attrs$) {\n    for (var _i4 = 0, _Object$keys = Object.keys(rootVnode.$attrs$); _i4 < _Object$keys.length; _i4++) {\n      var key = _Object$keys[_i4];\n      // We have a special implementation in `setAccessor` for `style` and\n      // `class` which reconciles values coming from the VDom with values\n      // already present on the DOM element, so we don't want to override those\n      // attributes on the VDom tree with values from the host element if they\n      // are present.\n      //\n      // Likewise, `ref` and `key` are special internal values for the Stencil\n      // runtime and we don't want to override those either.\n      if (hostElm.hasAttribute(key) && !['key', 'ref', 'style', 'class'].includes(key)) {\n        rootVnode.$attrs$[key] = hostElm[key];\n      }\n    }\n  }\n  rootVnode.$tag$ = null;\n  rootVnode.$flags$ |= 4 /* VNODE_FLAGS.isHost */;\n  hostRef.$vnode$ = rootVnode;\n  rootVnode.$elm$ = oldVNode.$elm$ = BUILD.shadowDom ? hostElm.shadowRoot || hostElm : hostElm;\n  if (BUILD.scoped || BUILD.shadowDom) {\n    scopeId = hostElm['s-sc'];\n  }\n  if (BUILD.slotRelocation) {\n    contentRef = hostElm['s-cr'];\n    useNativeShadowDom = supportsShadow && (cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) !== 0;\n    // always reset\n    checkSlotFallbackVisibility = false;\n  }\n  // synchronous patch\n  patch(oldVNode, rootVnode);\n  if (BUILD.slotRelocation) {\n    // while we're moving nodes around existing nodes, temporarily disable\n    // the disconnectCallback from working\n    plt.$flags$ |= 1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n    if (checkSlotRelocate) {\n      markSlotContentForRelocation(rootVnode.$elm$);\n      var relocateData;\n      var nodeToRelocate;\n      var orgLocationNode;\n      var parentNodeRef;\n      var insertBeforeNode;\n      var refNode;\n      var _i5 = 0;\n      for (; _i5 < relocateNodes.length; _i5++) {\n        relocateData = relocateNodes[_i5];\n        nodeToRelocate = relocateData.$nodeToRelocate$;\n        if (!nodeToRelocate['s-ol']) {\n          // add a reference node marking this node's original location\n          // keep a reference to this node for later lookups\n          orgLocationNode = BUILD.isDebug || BUILD.hydrateServerSide ? originalLocationDebugNode(nodeToRelocate) : doc.createTextNode('');\n          orgLocationNode['s-nr'] = nodeToRelocate;\n          nodeToRelocate.parentNode.insertBefore(nodeToRelocate['s-ol'] = orgLocationNode, nodeToRelocate);\n        }\n      }\n      for (_i5 = 0; _i5 < relocateNodes.length; _i5++) {\n        relocateData = relocateNodes[_i5];\n        nodeToRelocate = relocateData.$nodeToRelocate$;\n        if (relocateData.$slotRefNode$) {\n          // by default we're just going to insert it directly\n          // after the slot reference node\n          parentNodeRef = relocateData.$slotRefNode$.parentNode;\n          insertBeforeNode = relocateData.$slotRefNode$.nextSibling;\n          orgLocationNode = nodeToRelocate['s-ol'];\n          while (orgLocationNode = orgLocationNode.previousSibling) {\n            refNode = orgLocationNode['s-nr'];\n            if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {\n              refNode = refNode.nextSibling;\n              if (!refNode || !refNode['s-nr']) {\n                insertBeforeNode = refNode;\n                break;\n              }\n            }\n          }\n          if (!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode || nodeToRelocate.nextSibling !== insertBeforeNode) {\n            // we've checked that it's worth while to relocate\n            // since that the node to relocate\n            // has a different next sibling or parent relocated\n            if (nodeToRelocate !== insertBeforeNode) {\n              if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {\n                // probably a component in the index.html that doesn't have its hostname set\n                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;\n              }\n              // add it back to the dom but in its new home\n              parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);\n            }\n          }\n        } else {\n          // this node doesn't have a slot home to go to, so let's hide it\n          if (nodeToRelocate.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n            nodeToRelocate.hidden = true;\n          }\n        }\n      }\n    }\n    if (checkSlotFallbackVisibility) {\n      updateFallbackSlotVisibility(rootVnode.$elm$);\n    }\n    // done moving nodes around\n    // allow the disconnect callback to work again\n    plt.$flags$ &= ~1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n    // always reset\n    relocateNodes.length = 0;\n  }\n};\n// slot comment debug nodes only created with the `--debug` flag\n// otherwise these nodes are text nodes w/out content\nvar slotReferenceDebugNode = function slotReferenceDebugNode(slotVNode) {\n  return doc.createComment(\"<slot\".concat(slotVNode.$name$ ? ' name=\"' + slotVNode.$name$ + '\"' : '', \"> (host=\").concat(hostTagName.toLowerCase(), \")\"));\n};\nvar originalLocationDebugNode = function originalLocationDebugNode(nodeToRelocate) {\n  return doc.createComment(\"org-location for \" + (nodeToRelocate.localName ? \"<\".concat(nodeToRelocate.localName, \"> (host=\").concat(nodeToRelocate['s-hn'], \")\") : \"[\".concat(nodeToRelocate.textContent, \"]\")));\n};\nvar attachToAncestor = function attachToAncestor(hostRef, ancestorComponent) {\n  if (BUILD.asyncLoading && ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n    ancestorComponent['s-p'].push(new Promise(function (r) {\n      return hostRef.$onRenderResolve$ = r;\n    }));\n  }\n};\nvar scheduleUpdate = function scheduleUpdate(hostRef, isInitialLoad) {\n  if (BUILD.taskQueue && BUILD.updatable) {\n    hostRef.$flags$ |= 16 /* HOST_FLAGS.isQueuedForUpdate */;\n  }\n\n  if (BUILD.asyncLoading && hostRef.$flags$ & 4 /* HOST_FLAGS.isWaitingForChildren */) {\n    hostRef.$flags$ |= 512 /* HOST_FLAGS.needsRerender */;\n    return;\n  }\n  attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n  // there is no ancestor component or the ancestor component\n  // has already fired off its lifecycle update then\n  // fire off the initial update\n  var dispatch = function dispatch() {\n    return dispatchHooks(hostRef, isInitialLoad);\n  };\n  return BUILD.taskQueue ? writeTask(dispatch) : dispatch();\n};\n/**\n * Dispatch initial-render and update lifecycle hooks, enqueuing calls to\n * component lifecycle methods like `componentWillLoad` as well as\n * {@link updateComponent}, which will kick off the virtual DOM re-render.\n *\n * @param hostRef a reference to a host DOM node\n * @param isInitialLoad whether we're on the initial load or not\n * @returns an empty Promise which is used to enqueue a series of operations for\n * the component\n */\nvar dispatchHooks = function dispatchHooks(hostRef, isInitialLoad) {\n  var elm = hostRef.$hostElement$;\n  var endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n  var instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n  // We're going to use this variable together with `enqueue` to implement a\n  // little promise-based queue. We start out with it `undefined`. When we add\n  // the first function to the queue we'll set this variable to be that\n  // function's return value. When we attempt to add subsequent values to the\n  // queue we'll check that value and, if it was a `Promise`, we'll then chain\n  // the new function off of that `Promise` using `.then()`. This will give our\n  // queue two nice properties:\n  //\n  // 1. If all functions added to the queue are synchronous they'll be called\n  //    synchronously right away.\n  // 2. If all functions added to the queue are asynchronous they'll all be\n  //    called in order after `dispatchHooks` exits.\n  var maybePromise;\n  if (isInitialLoad) {\n    if (BUILD.lazyLoad && BUILD.hostListener) {\n      hostRef.$flags$ |= 256 /* HOST_FLAGS.isListenReady */;\n      if (hostRef.$queuedListeners$) {\n        hostRef.$queuedListeners$.map(function (_ref4) {\n          var _ref5 = _slicedToArray(_ref4, 2),\n            methodName = _ref5[0],\n            event = _ref5[1];\n          return safeCall(instance, methodName, event);\n        });\n        hostRef.$queuedListeners$ = undefined;\n      }\n    }\n    emitLifecycleEvent(elm, 'componentWillLoad');\n    if (BUILD.cmpWillLoad) {\n      // If `componentWillLoad` returns a `Promise` then we want to wait on\n      // whatever's going on in that `Promise` before we launch into\n      // rendering the component, doing other lifecycle stuff, etc. So\n      // in that case we assign the returned promise to the variable we\n      // declared above to hold a possible 'queueing' Promise\n      maybePromise = safeCall(instance, 'componentWillLoad');\n    }\n  } else {\n    emitLifecycleEvent(elm, 'componentWillUpdate');\n    if (BUILD.cmpWillUpdate) {\n      // Like `componentWillLoad` above, we allow Stencil component\n      // authors to return a `Promise` from this lifecycle callback, and\n      // we specify that our runtime will wait for that `Promise` to\n      // resolve before the component re-renders. So if the method\n      // returns a `Promise` we need to keep it around!\n      maybePromise = safeCall(instance, 'componentWillUpdate');\n    }\n  }\n  emitLifecycleEvent(elm, 'componentWillRender');\n  if (BUILD.cmpWillRender) {\n    maybePromise = enqueue(maybePromise, function () {\n      return safeCall(instance, 'componentWillRender');\n    });\n  }\n  endSchedule();\n  return enqueue(maybePromise, function () {\n    return updateComponent(hostRef, instance, isInitialLoad);\n  });\n};\n/**\n * This function uses a Promise to implement a simple first-in, first-out queue\n * of functions to be called.\n *\n * The queue is ordered on the basis of the first argument. If it's\n * `undefined`, then nothing is on the queue yet, so the provided function can\n * be called synchronously (although note that this function may return a\n * `Promise`). The idea is that then the return value of that enqueueing\n * operation is kept around, so that if it was a `Promise` then subsequent\n * functions can be enqueued by calling this function again with that `Promise`\n * as the first argument.\n *\n * @param maybePromise either a `Promise` which should resolve before the next function is called or an 'empty' sentinel\n * @param fn a function to enqueue\n * @returns either a `Promise` or the return value of the provided function\n */\nvar enqueue = function enqueue(maybePromise, fn) {\n  return isPromisey(maybePromise) ? maybePromise.then(fn) : fn();\n};\n/**\n * Check that a value is a `Promise`. To check, we first see if the value is an\n * instance of the `Promise` global. In a few circumstances, in particular if\n * the global has been overwritten, this is could be misleading, so we also do\n * a little 'duck typing' check to see if the `.then` property of the value is\n * defined and a function.\n *\n * @param maybePromise it might be a promise!\n * @returns whether it is or not\n */\nvar isPromisey = function isPromisey(maybePromise) {\n  return maybePromise instanceof Promise || maybePromise && maybePromise.then && typeof maybePromise.then === 'function';\n};\n/**\n * Update a component given reference to its host elements and so on.\n *\n * @param hostRef an object containing references to the element's host node,\n * VDom nodes, and other metadata\n * @param instance a reference to the underlying host element where it will be\n * rendered\n * @param isInitialLoad whether or not this function is being called as part of\n * the first render cycle\n */\nvar updateComponent = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(hostRef, instance, isInitialLoad) {\n    var _a, elm, endUpdate, rc, endRender, childrenPromises, postUpdate;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          elm = hostRef.$hostElement$;\n          endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n          rc = elm['s-rc'];\n          if (BUILD.style && isInitialLoad) {\n            // DOM WRITE!\n            attachStyles(hostRef);\n          }\n          endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n          if (BUILD.isDev) {\n            hostRef.$flags$ |= 1024 /* HOST_FLAGS.devOnRender */;\n          }\n          if (!BUILD.hydrateServerSide) {\n            _context.next = 11;\n            break;\n          }\n          _context.next = 9;\n          return callRender(hostRef, instance, elm, isInitialLoad);\n        case 9:\n          _context.next = 12;\n          break;\n        case 11:\n          callRender(hostRef, instance, elm, isInitialLoad);\n        case 12:\n          if (BUILD.isDev) {\n            hostRef.$renderCount$ = hostRef.$renderCount$ === undefined ? 1 : hostRef.$renderCount$ + 1;\n            hostRef.$flags$ &= ~1024 /* HOST_FLAGS.devOnRender */;\n          }\n\n          if (BUILD.hydrateServerSide) {\n            try {\n              // manually connected child components during server-side hydrate\n              serverSideConnected(elm);\n              if (isInitialLoad) {\n                // using only during server-side hydrate\n                if (hostRef.$cmpMeta$.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                  elm['s-en'] = '';\n                } else if (hostRef.$cmpMeta$.$flags$ & 2 /* CMP_FLAGS.scopedCssEncapsulation */) {\n                  elm['s-en'] = 'c';\n                }\n              }\n            } catch (e) {\n              consoleError(e, elm);\n            }\n          }\n          if (BUILD.asyncLoading && rc) {\n            // ok, so turns out there are some child host elements\n            // waiting on this parent element to load\n            // let's fire off all update callbacks waiting\n            rc.map(function (cb) {\n              return cb();\n            });\n            elm['s-rc'] = undefined;\n          }\n          endRender();\n          endUpdate();\n          if (BUILD.asyncLoading) {\n            childrenPromises = (_a = elm['s-p']) !== null && _a !== void 0 ? _a : [];\n            postUpdate = function postUpdate() {\n              return postUpdateComponent(hostRef);\n            };\n            if (childrenPromises.length === 0) {\n              postUpdate();\n            } else {\n              Promise.all(childrenPromises).then(postUpdate);\n              hostRef.$flags$ |= 4 /* HOST_FLAGS.isWaitingForChildren */;\n              childrenPromises.length = 0;\n            }\n          } else {\n            postUpdateComponent(hostRef);\n          }\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function updateComponent(_x, _x2, _x3) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n/**\n * Handle making the call to the VDom renderer with the proper context given\n * various build variables\n *\n * @param hostRef an object containing references to the element's host node,\n * VDom nodes, and other metadata\n * @param instance a reference to the underlying host element where it will be\n * rendered\n * @param elm the Host element for the component\n * @param isInitialLoad whether or not this function is being called as part of\n * @returns an empty promise\n */\nvar callRender = function callRender(hostRef, instance, elm, isInitialLoad) {\n  // in order for bundlers to correctly tree-shake the BUILD object\n  // we need to ensure BUILD is not deoptimized within a try/catch\n  // https://rollupjs.org/guide/en/#treeshake tryCatchDeoptimization\n  var allRenderFn = BUILD.allRenderFn ? true : false;\n  var lazyLoad = BUILD.lazyLoad ? true : false;\n  var taskQueue = BUILD.taskQueue ? true : false;\n  var updatable = BUILD.updatable ? true : false;\n  try {\n    renderingRef = instance;\n    /**\n     * minification optimization: `allRenderFn` is `true` if all components have a `render`\n     * method, so we can call the method immediately. If not, check before calling it.\n     */\n    instance = allRenderFn ? instance.render() : instance.render && instance.render();\n    if (updatable && taskQueue) {\n      hostRef.$flags$ &= ~16 /* HOST_FLAGS.isQueuedForUpdate */;\n    }\n\n    if (updatable || lazyLoad) {\n      hostRef.$flags$ |= 2 /* HOST_FLAGS.hasRendered */;\n    }\n\n    if (BUILD.hasRenderFn || BUILD.reflect) {\n      if (BUILD.vdomRender || BUILD.reflect) {\n        // looks like we've got child nodes to render into this host element\n        // or we need to update the css class/attrs on the host element\n        // DOM WRITE!\n        if (BUILD.hydrateServerSide) {\n          return Promise.resolve(instance).then(function (value) {\n            return renderVdom(hostRef, value, isInitialLoad);\n          });\n        } else {\n          renderVdom(hostRef, instance, isInitialLoad);\n        }\n      } else {\n        elm.textContent = instance;\n      }\n    }\n  } catch (e) {\n    consoleError(e, hostRef.$hostElement$);\n  }\n  renderingRef = null;\n  return null;\n};\nvar getRenderingRef = function getRenderingRef() {\n  return renderingRef;\n};\nvar postUpdateComponent = function postUpdateComponent(hostRef) {\n  var tagName = hostRef.$cmpMeta$.$tagName$;\n  var elm = hostRef.$hostElement$;\n  var endPostUpdate = createTime('postUpdate', tagName);\n  var instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n  var ancestorComponent = hostRef.$ancestorComponent$;\n  if (BUILD.cmpDidRender) {\n    if (BUILD.isDev) {\n      hostRef.$flags$ |= 1024 /* HOST_FLAGS.devOnRender */;\n    }\n\n    safeCall(instance, 'componentDidRender');\n    if (BUILD.isDev) {\n      hostRef.$flags$ &= ~1024 /* HOST_FLAGS.devOnRender */;\n    }\n  }\n\n  emitLifecycleEvent(elm, 'componentDidRender');\n  if (!(hostRef.$flags$ & 64 /* HOST_FLAGS.hasLoadedComponent */)) {\n    hostRef.$flags$ |= 64 /* HOST_FLAGS.hasLoadedComponent */;\n    if (BUILD.asyncLoading && BUILD.cssAnnotations) {\n      // DOM WRITE!\n      addHydratedFlag(elm);\n    }\n    if (BUILD.cmpDidLoad) {\n      if (BUILD.isDev) {\n        hostRef.$flags$ |= 2048 /* HOST_FLAGS.devOnDidLoad */;\n      }\n\n      safeCall(instance, 'componentDidLoad');\n      if (BUILD.isDev) {\n        hostRef.$flags$ &= ~2048 /* HOST_FLAGS.devOnDidLoad */;\n      }\n    }\n\n    emitLifecycleEvent(elm, 'componentDidLoad');\n    endPostUpdate();\n    if (BUILD.asyncLoading) {\n      hostRef.$onReadyResolve$(elm);\n      if (!ancestorComponent) {\n        appDidLoad(tagName);\n      }\n    }\n  } else {\n    if (BUILD.cmpDidUpdate) {\n      // we've already loaded this component\n      // fire off the user's componentDidUpdate method (if one was provided)\n      // componentDidUpdate runs AFTER render() has been called\n      // and all child components have finished updating\n      if (BUILD.isDev) {\n        hostRef.$flags$ |= 1024 /* HOST_FLAGS.devOnRender */;\n      }\n\n      safeCall(instance, 'componentDidUpdate');\n      if (BUILD.isDev) {\n        hostRef.$flags$ &= ~1024 /* HOST_FLAGS.devOnRender */;\n      }\n    }\n\n    emitLifecycleEvent(elm, 'componentDidUpdate');\n    endPostUpdate();\n  }\n  if (BUILD.method && BUILD.lazyLoad) {\n    hostRef.$onInstanceResolve$(elm);\n  }\n  // load events fire from bottom to top\n  // the deepest elements load first then bubbles up\n  if (BUILD.asyncLoading) {\n    if (hostRef.$onRenderResolve$) {\n      hostRef.$onRenderResolve$();\n      hostRef.$onRenderResolve$ = undefined;\n    }\n    if (hostRef.$flags$ & 512 /* HOST_FLAGS.needsRerender */) {\n      nextTick(function () {\n        return scheduleUpdate(hostRef, false);\n      });\n    }\n    hostRef.$flags$ &= ~(4 /* HOST_FLAGS.isWaitingForChildren */ | 512 /* HOST_FLAGS.needsRerender */);\n  }\n  // ( •_•)\n  // ( •_•)>⌐■-■\n  // (⌐■_■)\n};\n\nvar forceUpdate = function forceUpdate(ref) {\n  if (BUILD.updatable && (Build.isBrowser || Build.isTesting)) {\n    var hostRef = getHostRef(ref);\n    var isConnected = hostRef.$hostElement$.isConnected;\n    if (isConnected && (hostRef.$flags$ & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\n      scheduleUpdate(hostRef, false);\n    }\n    // Returns \"true\" when the forced update was successfully scheduled\n    return isConnected;\n  }\n  return false;\n};\nvar appDidLoad = function appDidLoad(who) {\n  // on appload\n  // we have finish the first big initial render\n  if (BUILD.cssAnnotations) {\n    addHydratedFlag(doc.documentElement);\n  }\n  if (BUILD.asyncQueue) {\n    plt.$flags$ |= 2 /* PLATFORM_FLAGS.appLoaded */;\n  }\n\n  nextTick(function () {\n    return emitEvent(win, 'appload', {\n      detail: {\n        namespace: NAMESPACE\n      }\n    });\n  });\n  if (BUILD.profile && performance.measure) {\n    performance.measure(\"[Stencil] \".concat(NAMESPACE, \" initial load (by \").concat(who, \")\"), 'st:app:start');\n  }\n};\n/**\n * Allows to safely call a method, e.g. `componentDidLoad`, on an instance,\n * e.g. custom element node. If a build figures out that e.g. no component\n * has a `componentDidLoad` method, the instance method gets removed from the\n * output bundle and this function returns `undefined`.\n * @param instance any object that may or may not contain methods\n * @param method method name\n * @param arg single arbitrary argument\n * @returns result of method call if it exists, otherwise `undefined`\n */\nvar safeCall = function safeCall(instance, method, arg) {\n  if (instance && instance[method]) {\n    try {\n      return instance[method](arg);\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n  return undefined;\n};\n/**\n * For debugging purposes as `BUILD.lifecycleDOMEvents` is `false` by default and will\n * get removed by the compiler. Used for timing events to see how long they take.\n * @param elm the target of the Event\n * @param lifecycleName name of the event\n */\nvar emitLifecycleEvent = function emitLifecycleEvent(elm, lifecycleName) {\n  if (BUILD.lifecycleDOMEvents) {\n    emitEvent(elm, 'stencil_' + lifecycleName, {\n      bubbles: true,\n      composed: true,\n      detail: {\n        namespace: NAMESPACE\n      }\n    });\n  }\n};\nvar addHydratedFlag = function addHydratedFlag(elm) {\n  return BUILD.hydratedClass ? elm.classList.add('hydrated') : BUILD.hydratedAttribute ? elm.setAttribute('hydrated', '') : undefined;\n};\nvar serverSideConnected = function serverSideConnected(elm) {\n  var children = elm.children;\n  if (children != null) {\n    for (var _i6 = 0, ii = children.length; _i6 < ii; _i6++) {\n      var childElm = children[_i6];\n      if (typeof childElm.connectedCallback === 'function') {\n        childElm.connectedCallback();\n      }\n      serverSideConnected(childElm);\n    }\n  }\n};\nvar getValue = function getValue(ref, propName) {\n  return getHostRef(ref).$instanceValues$.get(propName);\n};\nvar setValue = function setValue(ref, propName, newVal, cmpMeta) {\n  // check our new property value against our internal value\n  var hostRef = getHostRef(ref);\n  var elm = BUILD.lazyLoad ? hostRef.$hostElement$ : ref;\n  var oldVal = hostRef.$instanceValues$.get(propName);\n  var flags = hostRef.$flags$;\n  var instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n  newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n  // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n  var areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n  var didValueChange = newVal !== oldVal && !areBothNaN;\n  if ((!BUILD.lazyLoad || !(flags & 8 /* HOST_FLAGS.isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n    // gadzooks! the property's value has changed!!\n    // set our new value!\n    hostRef.$instanceValues$.set(propName, newVal);\n    if (BUILD.isDev) {\n      if (hostRef.$flags$ & 1024 /* HOST_FLAGS.devOnRender */) {\n        consoleDevWarn(\"The state/prop \\\"\".concat(propName, \"\\\" changed during rendering. This can potentially lead to infinite-loops and other bugs.\"), '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n      } else if (hostRef.$flags$ & 2048 /* HOST_FLAGS.devOnDidLoad */) {\n        consoleDevWarn(\"The state/prop \\\"\".concat(propName, \"\\\" changed during \\\"componentDidLoad()\\\", this triggers extra re-renders, try to setup on \\\"componentWillLoad()\\\"\"), '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n      }\n    }\n    if (!BUILD.lazyLoad || instance) {\n      // get an array of method names of watch functions to call\n      if (BUILD.watchCallback && cmpMeta.$watchers$ && flags & 128 /* HOST_FLAGS.isWatchReady */) {\n        var watchMethods = cmpMeta.$watchers$[propName];\n        if (watchMethods) {\n          // this instance is watching for when this property changed\n          watchMethods.map(function (watchMethodName) {\n            try {\n              // fire off each of the watch methods that are watching this property\n              instance[watchMethodName](newVal, oldVal, propName);\n            } catch (e) {\n              consoleError(e, elm);\n            }\n          });\n        }\n      }\n      if (BUILD.updatable && (flags & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\n        if (BUILD.cmpShouldUpdate && instance.componentShouldUpdate) {\n          if (instance.componentShouldUpdate(newVal, oldVal, propName) === false) {\n            return;\n          }\n        }\n        // looks like this value actually changed, so we've got work to do!\n        // but only if we've already rendered, otherwise just chill out\n        // queue that we need to do an update, but don't worry about queuing\n        // up millions cuz this function ensures it only runs once\n        scheduleUpdate(hostRef, false);\n      }\n    }\n  }\n};\n/**\n * Attach a series of runtime constructs to a compiled Stencil component\n * constructor, including getters and setters for the `@Prop` and `@State`\n * decorators, callbacks for when attributes change, and so on.\n *\n * @param Cstr the constructor for a component that we need to process\n * @param cmpMeta metadata collected previously about the component\n * @param flags a number used to store a series of bit flags\n * @returns a reference to the same constructor passed in (but now mutated)\n */\nvar proxyComponent = function proxyComponent(Cstr, cmpMeta, flags) {\n  var _a;\n  if (BUILD.member && cmpMeta.$members$) {\n    if (BUILD.watchCallback && Cstr.watchers) {\n      cmpMeta.$watchers$ = Cstr.watchers;\n    }\n    // It's better to have a const than two Object.entries()\n    var members = Object.entries(cmpMeta.$members$);\n    var prototype = Cstr.prototype;\n    members.map(function (_ref7) {\n      var _ref8 = _slicedToArray(_ref7, 2),\n        memberName = _ref8[0],\n        _ref8$ = _slicedToArray(_ref8[1], 1),\n        memberFlags = _ref8$[0];\n      if ((BUILD.prop || BUILD.state) && (memberFlags & 31 /* MEMBER_FLAGS.Prop */ || (!BUILD.lazyLoad || flags & 2 /* PROXY_FLAGS.proxyState */) && memberFlags & 32 /* MEMBER_FLAGS.State */)) {\n        // proxyComponent - prop\n        Object.defineProperty(prototype, memberName, {\n          get: function get() {\n            // proxyComponent, get value\n            return getValue(this, memberName);\n          },\n          set: function set(newValue) {\n            // only during dev time\n            if (BUILD.isDev) {\n              var ref = getHostRef(this);\n              if (\n              // we are proxying the instance (not element)\n              (flags & 1 /* PROXY_FLAGS.isElementConstructor */) === 0 &&\n              // the element is not constructing\n              (ref.$flags$ & 8 /* HOST_FLAGS.isConstructingInstance */) === 0 &&\n              // the member is a prop\n              (memberFlags & 31 /* MEMBER_FLAGS.Prop */) !== 0 &&\n              // the member is not mutable\n              (memberFlags & 1024 /* MEMBER_FLAGS.Mutable */) === 0) {\n                consoleDevWarn(\"@Prop() \\\"\".concat(memberName, \"\\\" on <\").concat(cmpMeta.$tagName$, \"> is immutable but was modified from within the component.\\nMore information: https://stenciljs.com/docs/properties#prop-mutability\"));\n              }\n            }\n            // proxyComponent, set value\n            setValue(this, memberName, newValue, cmpMeta);\n          },\n          configurable: true,\n          enumerable: true\n        });\n      } else if (BUILD.lazyLoad && BUILD.method && flags & 1 /* PROXY_FLAGS.isElementConstructor */ && memberFlags & 64 /* MEMBER_FLAGS.Method */) {\n        // proxyComponent - method\n        Object.defineProperty(prototype, memberName, {\n          value: function value() {\n            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              args[_key2] = arguments[_key2];\n            }\n            var ref = getHostRef(this);\n            return ref.$onInstancePromise$.then(function () {\n              var _ref$$lazyInstance$;\n              return (_ref$$lazyInstance$ = ref.$lazyInstance$)[memberName].apply(_ref$$lazyInstance$, args);\n            });\n          }\n        });\n      }\n    });\n    if (BUILD.observeAttribute && (!BUILD.lazyLoad || flags & 1 /* PROXY_FLAGS.isElementConstructor */)) {\n      var attrNameToPropName = new Map();\n      prototype.attributeChangedCallback = function (attrName, oldValue, newValue) {\n        var _this = this;\n        plt.jmp(function () {\n          var propName = attrNameToPropName.get(attrName);\n          //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n          //  in the case where an attribute was set inline.\n          //  ```html\n          //    <my-component some-attribute=\"some-value\"></my-component>\n          //  ```\n          //\n          //  There is an edge case where a developer sets the attribute inline on a custom element and then\n          //  programmatically changes it before it has been upgraded as shown below:\n          //\n          //  ```html\n          //    <!-- this component has _not_ been upgraded yet -->\n          //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n          //    <script>\n          //      // grab non-upgraded component\n          //      el = document.querySelector(\"#test\");\n          //      el.someAttribute = \"another-value\";\n          //      // upgrade component\n          //      customElements.define('my-component', MyComponent);\n          //    </script>\n          //  ```\n          //  In this case if we do not un-shadow here and use the value of the shadowing property, attributeChangedCallback\n          //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n          //  to the value that was set inline i.e. \"some-value\" from above example. When\n          //  the connectedCallback attempts to un-shadow it will use \"some-value\" as the initial value rather than \"another-value\"\n          //\n          //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/un-shadowed\n          //  by connectedCallback as this attributeChangedCallback will not fire.\n          //\n          //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n          //\n          //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n          //  properties here given that this goes against best practices outlined here\n          //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n          if (_this.hasOwnProperty(propName)) {\n            newValue = _this[propName];\n            delete _this[propName];\n          } else if (prototype.hasOwnProperty(propName) && typeof _this[propName] === 'number' && _this[propName] == newValue) {\n            // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n            // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n            // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n            return;\n          } else if (propName == null) {\n            // At this point we should know this is not a \"member\", so we can treat it like watching an attribute\n            // on a vanilla web component\n            var hostRef = getHostRef(_this);\n            var _flags = hostRef === null || hostRef === void 0 ? void 0 : hostRef.$flags$;\n            // We only want to trigger the callback(s) if:\n            // 1. The instance is ready\n            // 2. The watchers are ready\n            // 3. The value has changed\n            if (!(_flags & 8 /* HOST_FLAGS.isConstructingInstance */) && _flags & 128 /* HOST_FLAGS.isWatchReady */ && newValue !== oldValue) {\n              var elm = BUILD.lazyLoad ? hostRef.$hostElement$ : _this;\n              var instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n              var entry = cmpMeta.$watchers$[attrName];\n              entry === null || entry === void 0 ? void 0 : entry.forEach(function (callbackName) {\n                if (instance[callbackName] != null) {\n                  instance[callbackName].call(instance, newValue, oldValue, attrName);\n                }\n              });\n            }\n            return;\n          }\n          _this[propName] = newValue === null && typeof _this[propName] === 'boolean' ? false : newValue;\n        });\n      };\n      // Create an array of attributes to observe\n      // This list in comprised of all strings used within a `@Watch()` decorator\n      // on a component as well as any Stencil-specific \"members\" (`@Prop()`s and `@State()`s).\n      // As such, there is no way to guarantee type-safety here that a user hasn't entered\n      // an invalid attribute.\n      Cstr.observedAttributes = Array.from(new Set([].concat(_toConsumableArray(Object.keys((_a = cmpMeta.$watchers$) !== null && _a !== void 0 ? _a : {})), _toConsumableArray(members.filter(function (_ref9) {\n        var _ref10 = _slicedToArray(_ref9, 2),\n          _ = _ref10[0],\n          m = _ref10[1];\n        return m[0] & 15;\n      } /* MEMBER_FLAGS.HasAttribute */).map(function (_ref11) {\n        var _ref12 = _slicedToArray(_ref11, 2),\n          propName = _ref12[0],\n          m = _ref12[1];\n        var attrName = m[1] || propName;\n        attrNameToPropName.set(attrName, propName);\n        if (BUILD.reflect && m[0] & 512 /* MEMBER_FLAGS.ReflectAttr */) {\n          cmpMeta.$attrsToReflect$.push([propName, attrName]);\n        }\n        return attrName;\n      })))));\n    }\n  }\n  return Cstr;\n};\n/**\n * Initialize a Stencil component given a reference to its host element, its\n * runtime bookkeeping data structure, runtime metadata about the component,\n * and (optionally) an HMR version ID.\n *\n * @param elm a host element\n * @param hostRef the element's runtime bookkeeping object\n * @param cmpMeta runtime metadata for the Stencil component\n * @param hmrVersionId an (optional) HMR version ID\n */\nvar initializeComponent = /*#__PURE__*/function () {\n  var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(elm, hostRef, cmpMeta, hmrVersionId) {\n    var Cstr, endLoad, endNewInstance, style, _scopeId, endRegisterStyles, ancestorComponent, schedule;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!((hostRef.$flags$ & 32 /* HOST_FLAGS.hasInitializedComponent */) === 0)) {\n            _context2.next = 36;\n            break;\n          }\n          // Let the runtime know that the component has been initialized\n          hostRef.$flags$ |= 32 /* HOST_FLAGS.hasInitializedComponent */;\n          if (!(BUILD.lazyLoad || BUILD.hydrateClientSide)) {\n            _context2.next = 22;\n            break;\n          }\n          // lazy loaded components\n          // request the component's implementation to be\n          // wired up with the host element\n          Cstr = loadModule(cmpMeta, hostRef, hmrVersionId);\n          if (!Cstr.then) {\n            _context2.next = 10;\n            break;\n          }\n          // Await creates a micro-task avoid if possible\n          endLoad = uniqueTime(\"st:load:\".concat(cmpMeta.$tagName$, \":\").concat(hostRef.$modeName$), \"[Stencil] Load module for <\".concat(cmpMeta.$tagName$, \">\"));\n          _context2.next = 8;\n          return Cstr;\n        case 8:\n          Cstr = _context2.sent;\n          endLoad();\n        case 10:\n          if (!((BUILD.isDev || BUILD.isDebug) && !Cstr)) {\n            _context2.next = 12;\n            break;\n          }\n          throw new Error(\"Constructor for \\\"\".concat(cmpMeta.$tagName$, \"#\").concat(hostRef.$modeName$, \"\\\" was not found\"));\n        case 12:\n          if (BUILD.member && !Cstr.isProxied) {\n            // we've never proxied this Constructor before\n            // let's add the getters/setters to its prototype before\n            // the first time we create an instance of the implementation\n            if (BUILD.watchCallback) {\n              cmpMeta.$watchers$ = Cstr.watchers;\n            }\n            proxyComponent(Cstr, cmpMeta, 2 /* PROXY_FLAGS.proxyState */);\n            Cstr.isProxied = true;\n          }\n          endNewInstance = createTime('createInstance', cmpMeta.$tagName$); // ok, time to construct the instance\n          // but let's keep track of when we start and stop\n          // so that the getters/setters don't incorrectly step on data\n          if (BUILD.member) {\n            hostRef.$flags$ |= 8 /* HOST_FLAGS.isConstructingInstance */;\n          }\n          // construct the lazy-loaded component implementation\n          // passing the hostRef is very important during\n          // construction in order to directly wire together the\n          // host element and the lazy-loaded instance\n          try {\n            new Cstr(hostRef);\n          } catch (e) {\n            consoleError(e);\n          }\n          if (BUILD.member) {\n            hostRef.$flags$ &= ~8 /* HOST_FLAGS.isConstructingInstance */;\n          }\n\n          if (BUILD.watchCallback) {\n            hostRef.$flags$ |= 128 /* HOST_FLAGS.isWatchReady */;\n          }\n\n          endNewInstance();\n          fireConnectedCallback(hostRef.$lazyInstance$);\n          _context2.next = 24;\n          break;\n        case 22:\n          // sync constructor component\n          Cstr = elm.constructor;\n          // wait for the CustomElementRegistry to mark the component as ready before setting `isWatchReady`. Otherwise,\n          // watchers may fire prematurely if `customElements.get()`/`customElements.whenDefined()` resolves _before_\n          // Stencil has completed instantiating the component.\n          customElements.whenDefined(cmpMeta.$tagName$).then(function () {\n            return hostRef.$flags$ |= 128 /* HOST_FLAGS.isWatchReady */;\n          });\n        case 24:\n          if (!(BUILD.style && Cstr.style)) {\n            _context2.next = 36;\n            break;\n          }\n          // this component has styles but we haven't registered them yet\n          style = Cstr.style;\n          if (BUILD.mode && typeof style !== 'string') {\n            style = style[hostRef.$modeName$ = computeMode(elm)];\n            if (BUILD.hydrateServerSide && hostRef.$modeName$) {\n              elm.setAttribute('s-mode', hostRef.$modeName$);\n            }\n          }\n          _scopeId = getScopeId(cmpMeta, hostRef.$modeName$);\n          if (styles.has(_scopeId)) {\n            _context2.next = 36;\n            break;\n          }\n          endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n          if (!(!BUILD.hydrateServerSide && BUILD.shadowDom &&\n          // TODO(STENCIL-854): Remove code related to legacy shadowDomShim field\n          BUILD.shadowDomShim && cmpMeta.$flags$ & 8 /* CMP_FLAGS.needsShadowDomShim */)) {\n            _context2.next = 34;\n            break;\n          }\n          _context2.next = 33;\n          return import('./shadow-css.js').then(function (m) {\n            return m.scopeCss(style, _scopeId, false);\n          });\n        case 33:\n          style = _context2.sent;\n        case 34:\n          registerStyle(_scopeId, style, !!(cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\n          endRegisterStyles();\n        case 36:\n          // we've successfully created a lazy instance\n          ancestorComponent = hostRef.$ancestorComponent$;\n          schedule = function schedule() {\n            return scheduleUpdate(hostRef, true);\n          };\n          if (BUILD.asyncLoading && ancestorComponent && ancestorComponent['s-rc']) {\n            // this is the initial load and this component it has an ancestor component\n            // but the ancestor component has NOT fired its will update lifecycle yet\n            // so let's just cool our jets and wait for the ancestor to continue first\n            // this will get fired off when the ancestor component\n            // finally gets around to rendering its lazy self\n            // fire off the initial update\n            ancestorComponent['s-rc'].push(schedule);\n          } else {\n            schedule();\n          }\n        case 39:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return function initializeComponent(_x4, _x5, _x6, _x7) {\n    return _ref13.apply(this, arguments);\n  };\n}();\nvar fireConnectedCallback = function fireConnectedCallback(instance) {\n  if (BUILD.lazyLoad && BUILD.connectedCallback) {\n    safeCall(instance, 'connectedCallback');\n  }\n};\nvar _connectedCallback = function connectedCallback(elm) {\n  if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n    var hostRef = getHostRef(elm);\n    var cmpMeta = hostRef.$cmpMeta$;\n    var endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n    if (BUILD.hostListenerTargetParent) {\n      // only run if we have listeners being attached to a parent\n      addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, true);\n    }\n    if (!(hostRef.$flags$ & 1 /* HOST_FLAGS.hasConnected */)) {\n      // first time this component has connected\n      hostRef.$flags$ |= 1 /* HOST_FLAGS.hasConnected */;\n      var hostId;\n      if (BUILD.hydrateClientSide) {\n        hostId = elm.getAttribute(HYDRATE_ID);\n        if (hostId) {\n          if (BUILD.shadowDom && supportsShadow && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n            var _scopeId2 = BUILD.mode ? addStyle(elm.shadowRoot, cmpMeta, elm.getAttribute('s-mode')) : addStyle(elm.shadowRoot, cmpMeta);\n            elm.classList.remove(_scopeId2 + '-h', _scopeId2 + '-s');\n          }\n          initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);\n        }\n      }\n      if (BUILD.slotRelocation && !hostId) {\n        // initUpdate\n        // if the slot polyfill is required we'll need to put some nodes\n        // in here to act as original content anchors as we move nodes around\n        // host element has been connected to the DOM\n        if (BUILD.hydrateServerSide || (BUILD.slot || BUILD.shadowDom) &&\n        // TODO(STENCIL-854): Remove code related to legacy shadowDomShim field\n        cmpMeta.$flags$ & (4 /* CMP_FLAGS.hasSlotRelocation */ | 8 /* CMP_FLAGS.needsShadowDomShim */)) {\n          setContentReference(elm);\n        }\n      }\n      if (BUILD.asyncLoading) {\n        // find the first ancestor component (if there is one) and register\n        // this component as one of the actively loading child components for its ancestor\n        var ancestorComponent = elm;\n        while (ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host) {\n          // climb up the ancestors looking for the first\n          // component that hasn't finished its lifecycle update yet\n          if (BUILD.hydrateClientSide && ancestorComponent.nodeType === 1 /* NODE_TYPE.ElementNode */ && ancestorComponent.hasAttribute('s-id') && ancestorComponent['s-p'] || ancestorComponent['s-p']) {\n            // we found this components first ancestor component\n            // keep a reference to this component's ancestor component\n            attachToAncestor(hostRef, hostRef.$ancestorComponent$ = ancestorComponent);\n            break;\n          }\n        }\n      }\n      // Lazy properties\n      // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n      if (BUILD.prop && !BUILD.hydrateServerSide && cmpMeta.$members$) {\n        Object.entries(cmpMeta.$members$).map(function (_ref14) {\n          var _ref15 = _slicedToArray(_ref14, 2),\n            memberName = _ref15[0],\n            _ref15$ = _slicedToArray(_ref15[1], 1),\n            memberFlags = _ref15$[0];\n          if (memberFlags & 31 /* MEMBER_FLAGS.Prop */ && elm.hasOwnProperty(memberName)) {\n            var value = elm[memberName];\n            delete elm[memberName];\n            elm[memberName] = value;\n          }\n        });\n      }\n      if (BUILD.initializeNextTick) {\n        // connectedCallback, taskQueue, initialLoad\n        // angular sets attribute AFTER connectCallback\n        // https://github.com/angular/angular/issues/18909\n        // https://github.com/angular/angular/issues/19940\n        nextTick(function () {\n          return initializeComponent(elm, hostRef, cmpMeta);\n        });\n      } else {\n        initializeComponent(elm, hostRef, cmpMeta);\n      }\n    } else {\n      // not the first time this has connected\n      // reattach any event listeners to the host\n      // since they would have been removed when disconnected\n      addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n      // fire off connectedCallback() on component instance\n      if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$lazyInstance$) {\n        fireConnectedCallback(hostRef.$lazyInstance$);\n      } else if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$onReadyPromise$) {\n        hostRef.$onReadyPromise$.then(function () {\n          return fireConnectedCallback(hostRef.$lazyInstance$);\n        });\n      }\n    }\n    endConnected();\n  }\n};\nvar setContentReference = function setContentReference(elm) {\n  // only required when we're NOT using native shadow dom (slot)\n  // or this browser doesn't support native shadow dom\n  // and this host element was NOT created with SSR\n  // let's pick out the inner content for slot projection\n  // create a node to represent where the original\n  // content was first placed, which is useful later on\n  var contentRefElm = elm['s-cr'] = doc.createComment(BUILD.isDebug ? \"content-ref (host=\".concat(elm.localName, \")\") : '');\n  contentRefElm['s-cn'] = true;\n  elm.insertBefore(contentRefElm, elm.firstChild);\n};\nvar disconnectInstance = function disconnectInstance(instance) {\n  if (BUILD.lazyLoad && BUILD.disconnectedCallback) {\n    safeCall(instance, 'disconnectedCallback');\n  }\n  if (BUILD.cmpDidUnload) {\n    safeCall(instance, 'componentDidUnload');\n  }\n};\nvar _disconnectedCallback = /*#__PURE__*/function () {\n  var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(elm) {\n    var hostRef;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n            hostRef = getHostRef(elm);\n            if (BUILD.hostListener) {\n              if (hostRef.$rmListeners$) {\n                hostRef.$rmListeners$.map(function (rmListener) {\n                  return rmListener();\n                });\n                hostRef.$rmListeners$ = undefined;\n              }\n            }\n            if (!BUILD.lazyLoad) {\n              disconnectInstance(elm);\n            } else if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$lazyInstance$) {\n              disconnectInstance(hostRef.$lazyInstance$);\n            } else if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$onReadyPromise$) {\n              hostRef.$onReadyPromise$.then(function () {\n                return disconnectInstance(hostRef.$lazyInstance$);\n              });\n            }\n          }\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return function disconnectedCallback(_x8) {\n    return _ref16.apply(this, arguments);\n  };\n}();\nvar patchPseudoShadowDom = function patchPseudoShadowDom(hostElementPrototype, descriptorPrototype) {\n  patchCloneNode(hostElementPrototype);\n  patchSlotAppendChild(hostElementPrototype);\n  patchSlotAppend(hostElementPrototype);\n  patchSlotPrepend(hostElementPrototype);\n  patchSlotInsertAdjacentElement(hostElementPrototype);\n  patchSlotInsertAdjacentHTML(hostElementPrototype);\n  patchSlotInsertAdjacentText(hostElementPrototype);\n  patchTextContent(hostElementPrototype, descriptorPrototype);\n  patchChildSlotNodes(hostElementPrototype, descriptorPrototype);\n};\nvar patchCloneNode = function patchCloneNode(HostElementPrototype) {\n  var orgCloneNode = HostElementPrototype.cloneNode;\n  HostElementPrototype.cloneNode = function (deep) {\n    var srcNode = this;\n    var isShadowDom = BUILD.shadowDom ? srcNode.shadowRoot && supportsShadow : false;\n    var clonedNode = orgCloneNode.call(srcNode, isShadowDom ? deep : false);\n    if (BUILD.slot && !isShadowDom && deep) {\n      var _i7 = 0;\n      var slotted, nonStencilNode;\n      var stencilPrivates = ['s-id', 's-cr', 's-lr', 's-rc', 's-sc', 's-p', 's-cn', 's-sr', 's-sn', 's-hn', 's-ol', 's-nr', 's-si'];\n      for (; _i7 < srcNode.childNodes.length; _i7++) {\n        slotted = srcNode.childNodes[_i7]['s-nr'];\n        nonStencilNode = stencilPrivates.every(function (privateField) {\n          return !srcNode.childNodes[_i7][privateField];\n        });\n        if (slotted) {\n          if (BUILD.appendChildSlotFix && clonedNode.__appendChild) {\n            clonedNode.__appendChild(slotted.cloneNode(true));\n          } else {\n            clonedNode.appendChild(slotted.cloneNode(true));\n          }\n        }\n        if (nonStencilNode) {\n          clonedNode.appendChild(srcNode.childNodes[_i7].cloneNode(true));\n        }\n      }\n    }\n    return clonedNode;\n  };\n};\nvar patchSlotAppendChild = function patchSlotAppendChild(HostElementPrototype) {\n  HostElementPrototype.__appendChild = HostElementPrototype.appendChild;\n  HostElementPrototype.appendChild = function (newChild) {\n    var slotName = newChild['s-sn'] = getSlotName(newChild);\n    var slotNode = getHostSlotNode(this.childNodes, slotName);\n    if (slotNode) {\n      var slotChildNodes = getHostSlotChildNodes(slotNode, slotName);\n      var appendAfter = slotChildNodes[slotChildNodes.length - 1];\n      return appendAfter.parentNode.insertBefore(newChild, appendAfter.nextSibling);\n    }\n    return this.__appendChild(newChild);\n  };\n};\n/**\n * Patches the `prepend` method for a slotted node inside a scoped component.\n *\n * @param HostElementPrototype the `Element` to be patched\n */\nvar patchSlotPrepend = function patchSlotPrepend(HostElementPrototype) {\n  var originalPrepend = HostElementPrototype.prepend;\n  HostElementPrototype.prepend = function () {\n    var _this2 = this;\n    for (var _len3 = arguments.length, newChildren = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      newChildren[_key3] = arguments[_key3];\n    }\n    newChildren.forEach(function (newChild) {\n      if (typeof newChild === 'string') {\n        newChild = _this2.ownerDocument.createTextNode(newChild);\n      }\n      var slotName = newChild['s-sn'] = getSlotName(newChild);\n      var slotNode = getHostSlotNode(_this2.childNodes, slotName);\n      if (slotNode) {\n        var slotPlaceholder = document.createTextNode('');\n        slotPlaceholder['s-nr'] = newChild;\n        slotNode['s-cr'].parentNode.__appendChild(slotPlaceholder);\n        newChild['s-ol'] = slotPlaceholder;\n        var slotChildNodes = getHostSlotChildNodes(slotNode, slotName);\n        var appendAfter = slotChildNodes[0];\n        return appendAfter.parentNode.insertBefore(newChild, appendAfter.nextSibling);\n      }\n      if (newChild.nodeType === 1 && !!newChild.getAttribute('slot')) {\n        newChild.hidden = true;\n      }\n      return originalPrepend.call(_this2, newChild);\n    });\n  };\n};\n/**\n * Patches the `append` method for a slotted node inside a scoped component. The patched method uses\n * `appendChild` under-the-hood while creating text nodes for any new children that passed as bare strings.\n *\n * @param HostElementPrototype the `Element` to be patched\n */\nvar patchSlotAppend = function patchSlotAppend(HostElementPrototype) {\n  HostElementPrototype.append = function () {\n    var _this3 = this;\n    for (var _len4 = arguments.length, newChildren = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      newChildren[_key4] = arguments[_key4];\n    }\n    newChildren.forEach(function (newChild) {\n      if (typeof newChild === 'string') {\n        newChild = _this3.ownerDocument.createTextNode(newChild);\n      }\n      _this3.appendChild(newChild);\n    });\n  };\n};\n/**\n * Patches the `insertAdjacentHTML` method for a slotted node inside a scoped component. Specifically,\n * we only need to patch the behavior for the specific `beforeend` and `afterbegin` positions so the element\n * gets inserted into the DOM in the correct location.\n *\n * @param HostElementPrototype the `Element` to be patched\n */\nvar patchSlotInsertAdjacentHTML = function patchSlotInsertAdjacentHTML(HostElementPrototype) {\n  var originalInsertAdjacentHtml = HostElementPrototype.insertAdjacentHTML;\n  HostElementPrototype.insertAdjacentHTML = function (position, text) {\n    if (position !== 'afterbegin' && position !== 'beforeend') {\n      return originalInsertAdjacentHtml.call(this, position, text);\n    }\n    var container = this.ownerDocument.createElement('_');\n    var node;\n    container.innerHTML = text;\n    if (position === 'afterbegin') {\n      while (node = container.firstChild) {\n        this.prepend(node);\n      }\n    } else if (position === 'beforeend') {\n      while (node = container.firstChild) {\n        this.append(node);\n      }\n    }\n  };\n};\n/**\n * Patches the `insertAdjacentText` method for a slotted node inside a scoped component. Specifically,\n * we only need to patch the behavior for the specific `beforeend` and `afterbegin` positions so the text node\n * gets inserted into the DOM in the correct location.\n *\n * @param HostElementPrototype the `Element` to be patched\n */\nvar patchSlotInsertAdjacentText = function patchSlotInsertAdjacentText(HostElementPrototype) {\n  HostElementPrototype.insertAdjacentText = function (position, text) {\n    this.insertAdjacentHTML(position, text);\n  };\n};\n/**\n * Patches the `insertAdjacentElement` method for a slotted node inside a scoped component. Specifically,\n * we only need to patch the behavior for the specific `beforeend` and `afterbegin` positions so the element\n * gets inserted into the DOM in the correct location.\n *\n * @param HostElementPrototype the `Element` to be patched\n */\nvar patchSlotInsertAdjacentElement = function patchSlotInsertAdjacentElement(HostElementPrototype) {\n  var originalInsertAdjacentElement = HostElementPrototype.insertAdjacentElement;\n  HostElementPrototype.insertAdjacentElement = function (position, element) {\n    if (position !== 'afterbegin' && position !== 'beforeend') {\n      return originalInsertAdjacentElement.call(this, position, element);\n    }\n    if (position === 'afterbegin') {\n      this.prepend(element);\n      return element;\n    } else if (position === 'beforeend') {\n      this.append(element);\n      return element;\n    }\n    return element;\n  };\n};\n/**\n * Patches the text content of an unnamed slotted node inside a scoped component\n * @param hostElementPrototype the `Element` to be patched\n * @param cmpMeta component runtime metadata used to determine if the component should be patched or not\n */\nvar patchTextContent = function patchTextContent(hostElementPrototype, cmpMeta) {\n  if (BUILD.scoped && cmpMeta.$flags$ & 2 /* CMP_FLAGS.scopedCssEncapsulation */) {\n    var descriptor = Object.getOwnPropertyDescriptor(Node.prototype, 'textContent');\n    Object.defineProperty(hostElementPrototype, '__textContent', descriptor);\n    Object.defineProperty(hostElementPrototype, 'textContent', {\n      get: function get() {\n        var _a;\n        // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\n        // the empty string\n        var slotNode = getHostSlotNode(this.childNodes, '');\n        // when a slot node is found, the textContent _may_ be found in the next sibling (text) node, depending on how\n        // nodes were reordered during the vdom render. first try to get the text content from the sibling.\n        if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3 /* NODE_TYPES.TEXT_NODE */) {\n          return slotNode.nextSibling.textContent;\n        } else if (slotNode) {\n          return slotNode.textContent;\n        } else {\n          // fallback to the original implementation\n          return this.__textContent;\n        }\n      },\n      set: function set(value) {\n        var _a;\n        // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\n        // the empty string\n        var slotNode = getHostSlotNode(this.childNodes, '');\n        // when a slot node is found, the textContent _may_ need to be placed in the next sibling (text) node,\n        // depending on how nodes were reordered during the vdom render. first try to set the text content on the\n        // sibling.\n        if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3 /* NODE_TYPES.TEXT_NODE */) {\n          slotNode.nextSibling.textContent = value;\n        } else if (slotNode) {\n          slotNode.textContent = value;\n        } else {\n          // we couldn't find a slot, but that doesn't mean that there isn't one. if this check ran before the DOM\n          // loaded, we could have missed it. check for a content reference element on the scoped component and insert\n          // it there\n          this.__textContent = value;\n          var contentRefElm = this['s-cr'];\n          if (contentRefElm) {\n            this.insertBefore(contentRefElm, this.firstChild);\n          }\n        }\n      }\n    });\n  }\n};\nvar patchChildSlotNodes = function patchChildSlotNodes(elm, cmpMeta) {\n  var FakeNodeList = /*#__PURE__*/function (_Array) {\n    _inherits(FakeNodeList, _Array);\n    var _super = _createSuper(FakeNodeList);\n    function FakeNodeList() {\n      _classCallCheck(this, FakeNodeList);\n      return _super.apply(this, arguments);\n    }\n    _createClass(FakeNodeList, [{\n      key: \"item\",\n      value: function item(n) {\n        return this[n];\n      }\n    }]);\n    return FakeNodeList;\n  }( /*#__PURE__*/_wrapNativeSuper(Array)); // TODO(STENCIL-854): Remove code related to legacy shadowDomShim field\n  if (cmpMeta.$flags$ & 8 /* CMP_FLAGS.needsShadowDomShim */) {\n    var childNodesFn = elm.__lookupGetter__('childNodes');\n    Object.defineProperty(elm, 'children', {\n      get: function get() {\n        return this.childNodes.map(function (n) {\n          return n.nodeType === 1;\n        });\n      }\n    });\n    Object.defineProperty(elm, 'childElementCount', {\n      get: function get() {\n        return elm.children.length;\n      }\n    });\n    Object.defineProperty(elm, 'childNodes', {\n      get: function get() {\n        var childNodes = childNodesFn.call(this);\n        if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0 && getHostRef(this).$flags$ & 2 /* HOST_FLAGS.hasRendered */) {\n          var result = new FakeNodeList();\n          for (var _i8 = 0; _i8 < childNodes.length; _i8++) {\n            var slot = childNodes[_i8]['s-nr'];\n            if (slot) {\n              result.push(slot);\n            }\n          }\n          return result;\n        }\n        return FakeNodeList.from(childNodes);\n      }\n    });\n  }\n};\nvar getSlotName = function getSlotName(node) {\n  return node['s-sn'] || node.nodeType === 1 && node.getAttribute('slot') || '';\n};\n/**\n * Recursively searches a series of child nodes for a slot with the provided name.\n * @param childNodes the nodes to search for a slot with a specific name.\n * @param slotName the name of the slot to match on.\n * @returns a reference to the slot node that matches the provided name, `null` otherwise\n */\nvar getHostSlotNode = function getHostSlotNode(childNodes, slotName) {\n  var i = 0;\n  var childNode;\n  for (; i < childNodes.length; i++) {\n    childNode = childNodes[i];\n    if (childNode['s-sr'] && childNode['s-sn'] === slotName) {\n      return childNode;\n    }\n    childNode = getHostSlotNode(childNode.childNodes, slotName);\n    if (childNode) {\n      return childNode;\n    }\n  }\n  return null;\n};\nvar getHostSlotChildNodes = function getHostSlotChildNodes(n, slotName) {\n  var childNodes = [n];\n  while ((n = n.nextSibling) && n['s-sn'] === slotName) {\n    childNodes.push(n);\n  }\n  return childNodes;\n};\nvar defineCustomElement = function defineCustomElement(Cstr, compactMeta) {\n  customElements.define(compactMeta[1], proxyCustomElement(Cstr, compactMeta));\n};\nvar proxyCustomElement = function proxyCustomElement(Cstr, compactMeta) {\n  var cmpMeta = {\n    $flags$: compactMeta[0],\n    $tagName$: compactMeta[1]\n  };\n  if (BUILD.member) {\n    cmpMeta.$members$ = compactMeta[2];\n  }\n  if (BUILD.hostListener) {\n    cmpMeta.$listeners$ = compactMeta[3];\n  }\n  if (BUILD.watchCallback) {\n    cmpMeta.$watchers$ = Cstr.$watchers$;\n  }\n  if (BUILD.reflect) {\n    cmpMeta.$attrsToReflect$ = [];\n  }\n  if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n    // TODO(STENCIL-854): Remove code related to legacy shadowDomShim field\n    cmpMeta.$flags$ |= 8 /* CMP_FLAGS.needsShadowDomShim */;\n  }\n  // TODO(STENCIL-914): this check and `else` block can go away and be replaced by just `BUILD.scoped` once we\n  // default our pseudo-slot behavior\n  if (BUILD.patchPseudoShadowDom && BUILD.scoped) {\n    patchPseudoShadowDom(Cstr.prototype, cmpMeta);\n  } else {\n    if (BUILD.slotChildNodesFix) {\n      patchChildSlotNodes(Cstr.prototype, cmpMeta);\n    }\n    if (BUILD.cloneNodeFix) {\n      patchCloneNode(Cstr.prototype);\n    }\n    if (BUILD.appendChildSlotFix) {\n      patchSlotAppendChild(Cstr.prototype);\n    }\n    if (BUILD.scopedSlotTextContentFix) {\n      patchTextContent(Cstr.prototype, cmpMeta);\n    }\n  }\n  var originalConnectedCallback = Cstr.prototype.connectedCallback;\n  var originalDisconnectedCallback = Cstr.prototype.disconnectedCallback;\n  Object.assign(Cstr.prototype, {\n    __registerHost: function __registerHost() {\n      registerHost(this, cmpMeta);\n    },\n    connectedCallback: function connectedCallback() {\n      _connectedCallback(this);\n      if (BUILD.connectedCallback && originalConnectedCallback) {\n        originalConnectedCallback.call(this);\n      }\n    },\n    disconnectedCallback: function disconnectedCallback() {\n      _disconnectedCallback(this);\n      if (BUILD.disconnectedCallback && originalDisconnectedCallback) {\n        originalDisconnectedCallback.call(this);\n      }\n    },\n    __attachShadow: function __attachShadow() {\n      if (supportsShadow) {\n        if (BUILD.shadowDelegatesFocus) {\n          this.attachShadow({\n            mode: 'open',\n            delegatesFocus: !!(cmpMeta.$flags$ & 16 /* CMP_FLAGS.shadowDelegatesFocus */)\n          });\n        } else {\n          this.attachShadow({\n            mode: 'open'\n          });\n        }\n      } else {\n        this.shadowRoot = this;\n      }\n    }\n  });\n  Cstr.is = cmpMeta.$tagName$;\n  return proxyComponent(Cstr, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */ | 2 /* PROXY_FLAGS.proxyState */);\n};\n\nvar forceModeUpdate = function forceModeUpdate(elm) {\n  if (BUILD.style && BUILD.mode && !BUILD.lazyLoad) {\n    var mode = computeMode(elm);\n    var hostRef = getHostRef(elm);\n    if (hostRef.$modeName$ !== mode) {\n      var cmpMeta = hostRef.$cmpMeta$;\n      var oldScopeId = elm['s-sc'];\n      var _scopeId3 = getScopeId(cmpMeta, mode);\n      var style = elm.constructor.style[mode];\n      var flags = cmpMeta.$flags$;\n      if (style) {\n        if (!styles.has(_scopeId3)) {\n          registerStyle(_scopeId3, style, !!(flags & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\n        }\n\n        hostRef.$modeName$ = mode;\n        elm.classList.remove(oldScopeId + '-h', oldScopeId + '-s');\n        attachStyles(hostRef);\n        forceUpdate(elm);\n      }\n    }\n  }\n};\n/**\n * Kick off hot-module-replacement for a component. In order to replace the\n * component in-place we:\n *\n * 1. get a reference to the {@link d.HostRef} for the element\n * 2. reset the element's runtime flags\n * 3. re-run the initialization logic for the element (via\n *    {@link initializeComponent})\n *\n * @param hostElement the host element for the component which we want to start\n * doing HMR\n * @param cmpMeta runtime metadata for the component\n * @param hmrVersionId the current HMR version ID\n */\nvar hmrStart = function hmrStart(hostElement, cmpMeta, hmrVersionId) {\n  // ¯\\_(ツ)_/¯\n  var hostRef = getHostRef(hostElement);\n  // reset state flags to only have been connected\n  hostRef.$flags$ = 1 /* HOST_FLAGS.hasConnected */;\n  // TODO\n  // detach any event listeners that may have been added\n  // because we're not passing an exact event name it'll\n  // remove all of this element's event, which is good\n  // re-initialize the component\n  initializeComponent(hostElement, hostRef, cmpMeta, hmrVersionId);\n};\nvar bootstrapLazy = function bootstrapLazy(lazyBundles) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _a;\n  if (BUILD.profile && performance.mark) {\n    performance.mark('st:app:start');\n  }\n  installDevTools();\n  var endBootstrap = createTime('bootstrapLazy');\n  var cmpTags = [];\n  var exclude = options.exclude || [];\n  var customElements = win.customElements;\n  var head = doc.head;\n  var metaCharset = /*@__PURE__*/head.querySelector('meta[charset]');\n  var visibilityStyle = /*@__PURE__*/doc.createElement('style');\n  var deferredConnectedCallbacks = [];\n  var styles = /*@__PURE__*/doc.querySelectorAll(\"[\".concat(HYDRATED_STYLE_ID, \"]\"));\n  var appLoadFallback;\n  var isBootstrapping = true;\n  var i = 0;\n  Object.assign(plt, options);\n  plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n  if (BUILD.asyncQueue) {\n    if (options.syncQueue) {\n      plt.$flags$ |= 4 /* PLATFORM_FLAGS.queueSync */;\n    }\n  }\n\n  if (BUILD.hydrateClientSide) {\n    // If the app is already hydrated there is not point to disable the\n    // async queue. This will improve the first input delay\n    plt.$flags$ |= 2 /* PLATFORM_FLAGS.appLoaded */;\n  }\n\n  if (BUILD.hydrateClientSide && BUILD.shadowDom) {\n    for (; i < styles.length; i++) {\n      registerStyle(styles[i].getAttribute(HYDRATED_STYLE_ID), convertScopedToShadow(styles[i].innerHTML), true);\n    }\n  }\n  lazyBundles.map(function (lazyBundle) {\n    lazyBundle[1].map(function (compactMeta) {\n      var _a;\n      var cmpMeta = {\n        $flags$: compactMeta[0],\n        $tagName$: compactMeta[1],\n        $members$: compactMeta[2],\n        $listeners$: compactMeta[3]\n      };\n      if (BUILD.member) {\n        cmpMeta.$members$ = compactMeta[2];\n      }\n      if (BUILD.hostListener) {\n        cmpMeta.$listeners$ = compactMeta[3];\n      }\n      if (BUILD.reflect) {\n        cmpMeta.$attrsToReflect$ = [];\n      }\n      if (BUILD.watchCallback) {\n        cmpMeta.$watchers$ = (_a = compactMeta[4]) !== null && _a !== void 0 ? _a : {};\n      }\n      if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n        // TODO(STENCIL-854): Remove code related to legacy shadowDomShim field\n        cmpMeta.$flags$ |= 8 /* CMP_FLAGS.needsShadowDomShim */;\n      }\n\n      var tagName = BUILD.transformTagName && options.transformTagName ? options.transformTagName(cmpMeta.$tagName$) : cmpMeta.$tagName$;\n      var HostElement = /*#__PURE__*/function (_HTMLElement) {\n        _inherits(HostElement, _HTMLElement);\n        var _super2 = _createSuper(HostElement);\n        // StencilLazyHost\n        function HostElement(self) {\n          var _this4;\n          _classCallCheck(this, HostElement);\n          // @ts-ignore\n          _this4 = _super2.call(this, self);\n          self = _assertThisInitialized(_this4);\n          registerHost(self, cmpMeta);\n          if (BUILD.shadowDom && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n            // this component is using shadow dom\n            // and this browser supports shadow dom\n            // add the read-only property \"shadowRoot\" to the host element\n            // adding the shadow root build conditionals to minimize runtime\n            if (supportsShadow) {\n              if (BUILD.shadowDelegatesFocus) {\n                self.attachShadow({\n                  mode: 'open',\n                  delegatesFocus: !!(cmpMeta.$flags$ & 16 /* CMP_FLAGS.shadowDelegatesFocus */)\n                });\n              } else {\n                self.attachShadow({\n                  mode: 'open'\n                });\n              }\n            } else if (!BUILD.hydrateServerSide && !('shadowRoot' in self)) {\n              self.shadowRoot = self;\n            }\n          }\n          return _this4;\n        }\n        _createClass(HostElement, [{\n          key: \"connectedCallback\",\n          value: function connectedCallback() {\n            var _this5 = this;\n            if (appLoadFallback) {\n              clearTimeout(appLoadFallback);\n              appLoadFallback = null;\n            }\n            if (isBootstrapping) {\n              // connectedCallback will be processed once all components have been registered\n              deferredConnectedCallbacks.push(this);\n            } else {\n              plt.jmp(function () {\n                return _connectedCallback(_this5);\n              });\n            }\n          }\n        }, {\n          key: \"disconnectedCallback\",\n          value: function disconnectedCallback() {\n            var _this6 = this;\n            plt.jmp(function () {\n              return _disconnectedCallback(_this6);\n            });\n          }\n        }, {\n          key: \"componentOnReady\",\n          value: function componentOnReady() {\n            return getHostRef(this).$onReadyPromise$;\n          }\n        }]);\n        return HostElement;\n      }( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n      // TODO(STENCIL-914): this check and `else` block can go away and be replaced by just `BUILD.scoped` once we\n      // default our pseudo-slot behavior\n      if (BUILD.patchPseudoShadowDom && BUILD.scoped) {\n        patchPseudoShadowDom(HostElement.prototype, cmpMeta);\n      } else {\n        if (BUILD.slotChildNodesFix) {\n          patchChildSlotNodes(HostElement.prototype, cmpMeta);\n        }\n        if (BUILD.cloneNodeFix) {\n          patchCloneNode(HostElement.prototype);\n        }\n        if (BUILD.appendChildSlotFix) {\n          patchSlotAppendChild(HostElement.prototype);\n        }\n        if (BUILD.scopedSlotTextContentFix) {\n          patchTextContent(HostElement.prototype, cmpMeta);\n        }\n      }\n      // if the component is formAssociated we need to set that on the host\n      // element so that it will be ready for `attachInternals` to be called on\n      // it later on\n      if (BUILD.formAssociated && cmpMeta.$flags$ & 64 /* CMP_FLAGS.formAssociated */) {\n        HostElement.formAssociated = true;\n      }\n      if (BUILD.hotModuleReplacement) {\n        // if we're in an HMR dev build then we need to set up the callback\n        // which will carry out the work of actually replacing the module for\n        // this particular component\n        HostElement.prototype['s-hmr'] = function (hmrVersionId) {\n          hmrStart(this, cmpMeta, hmrVersionId);\n        };\n      }\n      cmpMeta.$lazyBundleId$ = lazyBundle[0];\n      if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n        cmpTags.push(tagName);\n        customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */));\n      }\n    });\n  });\n\n  if (BUILD.invisiblePrehydration && (BUILD.hydratedClass || BUILD.hydratedAttribute)) {\n    visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n    visibilityStyle.setAttribute('data-styles', '');\n    // Apply CSP nonce to the style tag if it exists\n    var nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n    if (nonce != null) {\n      visibilityStyle.setAttribute('nonce', nonce);\n    }\n    head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n  }\n  // Process deferred connectedCallbacks now all components have been registered\n  isBootstrapping = false;\n  if (deferredConnectedCallbacks.length) {\n    deferredConnectedCallbacks.map(function (host) {\n      return host.connectedCallback();\n    });\n  } else {\n    if (BUILD.profile) {\n      plt.jmp(function () {\n        return appLoadFallback = setTimeout(appDidLoad, 30, 'timeout');\n      });\n    } else {\n      plt.jmp(function () {\n        return appLoadFallback = setTimeout(appDidLoad, 30);\n      });\n    }\n  }\n  // Fallback appLoad event\n  endBootstrap();\n};\nvar Fragment = function Fragment(_, children) {\n  return children;\n};\nvar addHostEventListeners = function addHostEventListeners(elm, hostRef, listeners, attachParentListeners) {\n  if (BUILD.hostListener && listeners) {\n    // this is called immediately within the element's constructor\n    // initialize our event listeners on the host element\n    // we do this now so that we can listen to events that may\n    // have fired even before the instance is ready\n    if (BUILD.hostListenerTargetParent) {\n      // this component may have event listeners that should be attached to the parent\n      if (attachParentListeners) {\n        // this is being ran from within the connectedCallback\n        // which is important so that we know the host element actually has a parent element\n        // filter out the listeners to only have the ones that ARE being attached to the parent\n        listeners = listeners.filter(function (_ref17) {\n          var _ref18 = _slicedToArray(_ref17, 1),\n            flags = _ref18[0];\n          return flags & 32;\n        } /* LISTENER_FLAGS.TargetParent */);\n      } else {\n        // this is being ran from within the component constructor\n        // everything BUT the parent element listeners should be attached at this time\n        // filter out the listeners that are NOT being attached to the parent\n        listeners = listeners.filter(function (_ref19) {\n          var _ref20 = _slicedToArray(_ref19, 1),\n            flags = _ref20[0];\n          return !(flags & 32 /* LISTENER_FLAGS.TargetParent */);\n        });\n      }\n    }\n\n    listeners.map(function (_ref21) {\n      var _ref22 = _slicedToArray(_ref21, 3),\n        flags = _ref22[0],\n        name = _ref22[1],\n        method = _ref22[2];\n      var target = BUILD.hostListenerTarget ? getHostListenerTarget(elm, flags) : elm;\n      var handler = hostListenerProxy(hostRef, method);\n      var opts = hostListenerOpts(flags);\n      plt.ael(target, name, handler, opts);\n      (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(function () {\n        return plt.rel(target, name, handler, opts);\n      });\n    });\n  }\n};\nvar hostListenerProxy = function hostListenerProxy(hostRef, methodName) {\n  return function (ev) {\n    try {\n      if (BUILD.lazyLoad) {\n        if (hostRef.$flags$ & 256 /* HOST_FLAGS.isListenReady */) {\n          // instance is ready, let's call it's member method for this event\n          hostRef.$lazyInstance$[methodName](ev);\n        } else {\n          (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\n        }\n      } else {\n        hostRef.$hostElement$[methodName](ev);\n      }\n    } catch (e) {\n      consoleError(e);\n    }\n  };\n};\nvar getHostListenerTarget = function getHostListenerTarget(elm, flags) {\n  if (BUILD.hostListenerTargetDocument && flags & 4 /* LISTENER_FLAGS.TargetDocument */) return doc;\n  if (BUILD.hostListenerTargetWindow && flags & 8 /* LISTENER_FLAGS.TargetWindow */) return win;\n  if (BUILD.hostListenerTargetBody && flags & 16 /* LISTENER_FLAGS.TargetBody */) return doc.body;\n  if (BUILD.hostListenerTargetParent && flags & 32 /* LISTENER_FLAGS.TargetParent */) return elm.parentElement;\n  return elm;\n};\n// prettier-ignore\nvar hostListenerOpts = function hostListenerOpts(flags) {\n  return supportsListenerOptions ? {\n    passive: (flags & 1 /* LISTENER_FLAGS.Passive */) !== 0,\n    capture: (flags & 2 /* LISTENER_FLAGS.Capture */) !== 0\n  } : (flags & 2 /* LISTENER_FLAGS.Capture */) !== 0;\n};\n/**\n * Assigns the given value to the nonce property on the runtime platform object.\n * During runtime, this value is used to set the nonce attribute on all dynamically created script and style tags.\n * @param nonce The value to be assigned to the platform nonce property.\n * @returns void\n */\nvar setNonce = function setNonce(nonce) {\n  return plt.$nonce$ = nonce;\n};\nvar setPlatformOptions = function setPlatformOptions(opts) {\n  return Object.assign(plt, opts);\n};\nvar insertVdomAnnotations = function insertVdomAnnotations(doc, staticComponents) {\n  if (doc != null) {\n    var docData = {\n      hostIds: 0,\n      rootLevelIds: 0,\n      staticComponents: new Set(staticComponents)\n    };\n    var orgLocationNodes = [];\n    parseVNodeAnnotations(doc, doc.body, docData, orgLocationNodes);\n    orgLocationNodes.forEach(function (orgLocationNode) {\n      if (orgLocationNode != null) {\n        var nodeRef = orgLocationNode['s-nr'];\n        var hostId = nodeRef['s-host-id'];\n        var nodeId = nodeRef['s-node-id'];\n        var childId = \"\".concat(hostId, \".\").concat(nodeId);\n        if (hostId == null) {\n          hostId = 0;\n          docData.rootLevelIds++;\n          nodeId = docData.rootLevelIds;\n          childId = \"\".concat(hostId, \".\").concat(nodeId);\n          if (nodeRef.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n            nodeRef.setAttribute(HYDRATE_CHILD_ID, childId);\n          } else if (nodeRef.nodeType === 3 /* NODE_TYPE.TextNode */) {\n            if (hostId === 0) {\n              var textContent = nodeRef.nodeValue.trim();\n              if (textContent === '') {\n                // useless whitespace node at the document root\n                orgLocationNode.remove();\n                return;\n              }\n            }\n            var commentBeforeTextNode = doc.createComment(childId);\n            commentBeforeTextNode.nodeValue = \"\".concat(TEXT_NODE_ID, \".\").concat(childId);\n            nodeRef.parentNode.insertBefore(commentBeforeTextNode, nodeRef);\n          }\n        }\n        var orgLocationNodeId = \"\".concat(ORG_LOCATION_ID, \".\").concat(childId);\n        var orgLocationParentNode = orgLocationNode.parentElement;\n        if (orgLocationParentNode) {\n          if (orgLocationParentNode['s-en'] === '') {\n            // ending with a \".\" means that the parent element\n            // of this node's original location is a SHADOW dom element\n            // and this node is apart of the root level light dom\n            orgLocationNodeId += \".\";\n          } else if (orgLocationParentNode['s-en'] === 'c') {\n            // ending with a \".c\" means that the parent element\n            // of this node's original location is a SCOPED element\n            // and this node is apart of the root level light dom\n            orgLocationNodeId += \".c\";\n          }\n        }\n        orgLocationNode.nodeValue = orgLocationNodeId;\n      }\n    });\n  }\n};\nvar parseVNodeAnnotations = function parseVNodeAnnotations(doc, node, docData, orgLocationNodes) {\n  if (node == null) {\n    return;\n  }\n  if (node['s-nr'] != null) {\n    orgLocationNodes.push(node);\n  }\n  if (node.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n    node.childNodes.forEach(function (childNode) {\n      var hostRef = getHostRef(childNode);\n      if (hostRef != null && !docData.staticComponents.has(childNode.nodeName.toLowerCase())) {\n        var cmpData = {\n          nodeIds: 0\n        };\n        insertVNodeAnnotations(doc, childNode, hostRef.$vnode$, docData, cmpData);\n      }\n      parseVNodeAnnotations(doc, childNode, docData, orgLocationNodes);\n    });\n  }\n};\nvar insertVNodeAnnotations = function insertVNodeAnnotations(doc, hostElm, vnode, docData, cmpData) {\n  if (vnode != null) {\n    var hostId = ++docData.hostIds;\n    hostElm.setAttribute(HYDRATE_ID, hostId);\n    if (hostElm['s-cr'] != null) {\n      hostElm['s-cr'].nodeValue = \"\".concat(CONTENT_REF_ID, \".\").concat(hostId);\n    }\n    if (vnode.$children$ != null) {\n      var depth = 0;\n      vnode.$children$.forEach(function (vnodeChild, index) {\n        insertChildVNodeAnnotations(doc, vnodeChild, cmpData, hostId, depth, index);\n      });\n    }\n    if (hostElm && vnode && vnode.$elm$ && !hostElm.hasAttribute('c-id')) {\n      var parent = hostElm.parentElement;\n      if (parent && parent.childNodes) {\n        var parentChildNodes = Array.from(parent.childNodes);\n        var comment = parentChildNodes.find(function (node) {\n          return node.nodeType === 8 /* NODE_TYPE.CommentNode */ && node['s-sr'];\n        });\n        if (comment) {\n          var index = parentChildNodes.indexOf(hostElm) - 1;\n          vnode.$elm$.setAttribute(HYDRATE_CHILD_ID, \"\".concat(comment['s-host-id'], \".\").concat(comment['s-node-id'], \".0.\").concat(index));\n        }\n      }\n    }\n  }\n};\nvar insertChildVNodeAnnotations = function insertChildVNodeAnnotations(doc, vnodeChild, cmpData, hostId, depth, index) {\n  var childElm = vnodeChild.$elm$;\n  if (childElm == null) {\n    return;\n  }\n  var nodeId = cmpData.nodeIds++;\n  var childId = \"\".concat(hostId, \".\").concat(nodeId, \".\").concat(depth, \".\").concat(index);\n  childElm['s-host-id'] = hostId;\n  childElm['s-node-id'] = nodeId;\n  if (childElm.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n    childElm.setAttribute(HYDRATE_CHILD_ID, childId);\n  } else if (childElm.nodeType === 3 /* NODE_TYPE.TextNode */) {\n    var parentNode = childElm.parentNode;\n    var nodeName = parentNode.nodeName;\n    if (nodeName !== 'STYLE' && nodeName !== 'SCRIPT') {\n      var textNodeId = \"\".concat(TEXT_NODE_ID, \".\").concat(childId);\n      var commentBeforeTextNode = doc.createComment(textNodeId);\n      parentNode.insertBefore(commentBeforeTextNode, childElm);\n    }\n  } else if (childElm.nodeType === 8 /* NODE_TYPE.CommentNode */) {\n    if (childElm['s-sr']) {\n      var slotName = childElm['s-sn'] || '';\n      var slotNodeId = \"\".concat(SLOT_NODE_ID, \".\").concat(childId, \".\").concat(slotName);\n      childElm.nodeValue = slotNodeId;\n    }\n  }\n  if (vnodeChild.$children$ != null) {\n    var childDepth = depth + 1;\n    vnodeChild.$children$.forEach(function (vnode, index) {\n      insertChildVNodeAnnotations(doc, vnode, cmpData, hostId, childDepth, index);\n    });\n  }\n};\n/**\n * A WeakMap mapping runtime component references to their corresponding host reference\n * instances.\n */\nvar hostRefs = /*@__PURE__*/new WeakMap();\n/**\n * Given a {@link d.RuntimeRef} retrieve the corresponding {@link d.HostRef}\n *\n * @param ref the runtime ref of interest\n * @returns the Host reference (if found) or undefined\n */\nvar getHostRef = function getHostRef(ref) {\n  return hostRefs.get(ref);\n};\n/**\n * Register a lazy instance with the {@link hostRefs} object so it's\n * corresponding {@link d.HostRef} can be retrieved later.\n *\n * @param lazyInstance the lazy instance of interest\n * @param hostRef that instances `HostRef` object\n * @returns a reference to the host ref WeakMap\n */\nvar registerInstance = function registerInstance(lazyInstance, hostRef) {\n  return hostRefs.set(hostRef.$lazyInstance$ = lazyInstance, hostRef);\n};\n/**\n * Register a host element for a Stencil component, setting up various metadata\n * and callbacks based on {@link BUILD} flags as well as the component's runtime\n * metadata.\n *\n * @param hostElement the host element to register\n * @param cmpMeta runtime metadata for that component\n * @returns a reference to the host ref WeakMap\n */\nvar registerHost = function registerHost(hostElement, cmpMeta) {\n  var hostRef = {\n    $flags$: 0,\n    $hostElement$: hostElement,\n    $cmpMeta$: cmpMeta,\n    $instanceValues$: new Map()\n  };\n  if (BUILD.isDev) {\n    hostRef.$renderCount$ = 0;\n  }\n  if (BUILD.method && BUILD.lazyLoad) {\n    hostRef.$onInstancePromise$ = new Promise(function (r) {\n      return hostRef.$onInstanceResolve$ = r;\n    });\n  }\n  if (BUILD.asyncLoading) {\n    hostRef.$onReadyPromise$ = new Promise(function (r) {\n      return hostRef.$onReadyResolve$ = r;\n    });\n    hostElement['s-p'] = [];\n    hostElement['s-rc'] = [];\n  }\n  addHostEventListeners(hostElement, hostRef, cmpMeta.$listeners$, false);\n  return hostRefs.set(hostElement, hostRef);\n};\nvar isMemberInElement = function isMemberInElement(elm, memberName) {\n  return memberName in elm;\n};\nvar consoleError = function consoleError(e, el) {\n  return (customError || console.error)(e, el);\n};\nvar STENCIL_DEV_MODE = BUILD.isTesting ? ['STENCIL:'] // E2E testing\n: ['%cstencil', 'color: white;background:#4c47ff;font-weight: bold; font-size:10px; padding:2px 6px; border-radius: 5px'];\nvar consoleDevError = function consoleDevError() {\n  var _console;\n  for (var _len5 = arguments.length, m = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    m[_key5] = arguments[_key5];\n  }\n  return (_console = console).error.apply(_console, STENCIL_DEV_MODE.concat(m));\n};\nvar consoleDevWarn = function consoleDevWarn() {\n  var _console2;\n  for (var _len6 = arguments.length, m = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n    m[_key6] = arguments[_key6];\n  }\n  return (_console2 = console).warn.apply(_console2, STENCIL_DEV_MODE.concat(m));\n};\nvar consoleDevInfo = function consoleDevInfo() {\n  var _console3;\n  for (var _len7 = arguments.length, m = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n    m[_key7] = arguments[_key7];\n  }\n  return (_console3 = console).info.apply(_console3, STENCIL_DEV_MODE.concat(m));\n};\nvar setErrorHandler = function setErrorHandler(handler) {\n  return customError = handler;\n};\nvar cmpModules = /*@__PURE__*/new Map();\nvar loadModule = function loadModule(cmpMeta, hostRef, hmrVersionId) {\n  // loadModuleImport\n  var exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n  var bundleId = cmpMeta.$lazyBundleId$;\n  if (BUILD.isDev && typeof bundleId !== 'string') {\n    consoleDevError(\"Trying to lazily load component <\".concat(cmpMeta.$tagName$, \"> with style mode \\\"\").concat(hostRef.$modeName$, \"\\\", but it does not exist.\"));\n    return undefined;\n  }\n  var module = !BUILD.hotModuleReplacement ? cmpModules.get(bundleId) : false;\n  if (module) {\n    return module[exportName];\n  }\n  /*!__STENCIL_STATIC_IMPORT_SWITCH__*/\n  return import(\n  /* @vite-ignore */\n  /* webpackInclude: /\\.entry\\.js$/ */\n  /* webpackExclude: /\\.system\\.entry\\.js$/ */\n  /* webpackMode: \"lazy\" */\n  \"./\".concat(bundleId, \".entry.js\").concat(BUILD.hotModuleReplacement && hmrVersionId ? '?s-hmr=' + hmrVersionId : '')).then(function (importedModule) {\n    if (!BUILD.hotModuleReplacement) {\n      cmpModules.set(bundleId, importedModule);\n    }\n    return importedModule[exportName];\n  }, consoleError);\n};\nvar styles = /*@__PURE__*/new Map();\nvar modeResolutionChain = [];\nvar win = typeof window !== 'undefined' ? window : {};\nvar doc = win.document || {\n  head: {}\n};\nvar H = win.HTMLElement || /*#__PURE__*/function () {\n  function _class() {\n    _classCallCheck(this, _class);\n  }\n  return _createClass(_class);\n}();\nvar plt = {\n  $flags$: 0,\n  $resourcesUrl$: '',\n  jmp: function jmp(h) {\n    return h();\n  },\n  raf: function raf(h) {\n    return requestAnimationFrame(h);\n  },\n  ael: function ael(el, eventName, listener, opts) {\n    return el.addEventListener(eventName, listener, opts);\n  },\n  rel: function rel(el, eventName, listener, opts) {\n    return el.removeEventListener(eventName, listener, opts);\n  },\n  ce: function ce(eventName, opts) {\n    return new CustomEvent(eventName, opts);\n  }\n};\nvar setPlatformHelpers = function setPlatformHelpers(helpers) {\n  Object.assign(plt, helpers);\n};\nvar supportsShadow =\n// TODO(STENCIL-854): Remove code related to legacy shadowDomShim field\nBUILD.shadowDomShim && BUILD.shadowDom ? /*@__PURE__*/function () {\n  return (doc.head.attachShadow + '').indexOf('[native') > -1;\n}() : true;\nvar supportsListenerOptions = /*@__PURE__*/function () {\n  var supportsListenerOptions = false;\n  try {\n    doc.addEventListener('e', null, Object.defineProperty({}, 'passive', {\n      get: function get() {\n        supportsListenerOptions = true;\n      }\n    }));\n  } catch (e) {}\n  return supportsListenerOptions;\n}();\nvar promiseResolve = function promiseResolve(v) {\n  return Promise.resolve(v);\n};\nvar supportsConstructableStylesheets = BUILD.constructableCSS ? /*@__PURE__*/function () {\n  try {\n    new CSSStyleSheet();\n    return typeof new CSSStyleSheet().replaceSync === 'function';\n  } catch (e) {}\n  return false;\n}() : false;\nvar queueDomReads = [];\nvar queueDomWrites = [];\nvar queueDomWritesLow = [];\nvar queueTask = function queueTask(queue, write) {\n  return function (cb) {\n    queue.push(cb);\n    if (!queuePending) {\n      queuePending = true;\n      if (write && plt.$flags$ & 4 /* PLATFORM_FLAGS.queueSync */) {\n        nextTick(flush);\n      } else {\n        plt.raf(flush);\n      }\n    }\n  };\n};\nvar consume = function consume(queue) {\n  for (var _i9 = 0; _i9 < queue.length; _i9++) {\n    try {\n      queue[_i9](performance.now());\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n  queue.length = 0;\n};\nvar consumeTimeout = function consumeTimeout(queue, timeout) {\n  var i = 0;\n  var ts = 0;\n  while (i < queue.length && (ts = performance.now()) < timeout) {\n    try {\n      queue[i++](ts);\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n  if (i === queue.length) {\n    queue.length = 0;\n  } else if (i !== 0) {\n    queue.splice(0, i);\n  }\n};\nvar flush = function flush() {\n  if (BUILD.asyncQueue) {\n    queueCongestion++;\n  }\n  // always force a bunch of medium callbacks to run, but still have\n  // a throttle on how many can run in a certain time\n  // DOM READS!!!\n  consume(queueDomReads);\n  // DOM WRITES!!!\n  if (BUILD.asyncQueue) {\n    var timeout = (plt.$flags$ & 6 /* PLATFORM_FLAGS.queueMask */) === 2 /* PLATFORM_FLAGS.appLoaded */ ? performance.now() + 14 * Math.ceil(queueCongestion * (1.0 / 10.0)) : Infinity;\n    consumeTimeout(queueDomWrites, timeout);\n    consumeTimeout(queueDomWritesLow, timeout);\n    if (queueDomWrites.length > 0) {\n      queueDomWritesLow.push.apply(queueDomWritesLow, queueDomWrites);\n      queueDomWrites.length = 0;\n    }\n    if (queuePending = queueDomReads.length + queueDomWrites.length + queueDomWritesLow.length > 0) {\n      // still more to do yet, but we've run out of time\n      // let's let this thing cool off and try again in the next tick\n      plt.raf(flush);\n    } else {\n      queueCongestion = 0;\n    }\n  } else {\n    consume(queueDomWrites);\n    if (queuePending = queueDomReads.length > 0) {\n      // still more to do yet, but we've run out of time\n      // let's let this thing cool off and try again in the next tick\n      plt.raf(flush);\n    }\n  }\n};\nvar nextTick = /*@__PURE__*/function nextTick(cb) {\n  return promiseResolve().then(cb);\n};\nvar readTask = /*@__PURE__*/queueTask(queueDomReads, false);\nvar writeTask = /*@__PURE__*/queueTask(queueDomWrites, true);\nexport { BUILD, Env, NAMESPACE } from '@stencil/core/internal/app-data';\nexport { Build, Fragment, H, H as HTMLElement, Host, STENCIL_DEV_MODE, addHostEventListeners, bootstrapLazy, cmpModules, _connectedCallback as connectedCallback, consoleDevError, consoleDevInfo, consoleDevWarn, consoleError, createEvent, defineCustomElement, _disconnectedCallback as disconnectedCallback, doc, forceModeUpdate, forceUpdate, getAssetPath, getElement, getHostRef, getMode, getRenderingRef, getValue, h, insertVdomAnnotations, isMemberInElement, loadModule, modeResolutionChain, nextTick, parsePropertyValue, plt, postUpdateComponent, promiseResolve, proxyComponent, proxyCustomElement, readTask, registerHost, registerInstance, renderVdom, setAssetPath, setErrorHandler, setMode, setNonce, setPlatformHelpers, setPlatformOptions, setValue, styles, supportsConstructableStylesheets, supportsListenerOptions, supportsShadow, win, writeTask };","map":{"version":3,"names":["scopeId","contentRef","hostTagName","customError","i","useNativeShadowDom","checkSlotFallbackVisibility","checkSlotRelocate","isSvgMode","renderingRef","queueCongestion","queuePending","BUILD","NAMESPACE","Build","isDev","isBrowser","isServer","isTesting","getAssetPath","path","assetUrl","URL","plt","$resourcesUrl$","origin","win","location","href","pathname","setAssetPath","createTime","fnName","tagName","arguments","length","undefined","profile","performance","mark","key","concat","measure","uniqueTime","measureText","getEntriesByName","inspect","ref","_ref","hostRef","getHostRef","flags","$flags$","hostElement","$hostElement$","renderCount","$renderCount$","hasRendered","hasConnected","isWaitingForChildren","isConstructingInstance","isQueuedForUpdate","hasInitializedComponent","hasLoadedComponent","isWatchReady","isListenReady","needsRerender","instanceValues","$instanceValues$","ancestorComponent","$ancestorComponent$","lazyInstance","$lazyInstance$","vnode","$vnode$","modeName","$modeName$","onReadyPromise","$onReadyPromise$","onReadyResolve","$onReadyResolve$","onInstancePromise","$onInstancePromise$","onInstanceResolve","$onInstanceResolve$","onRenderResolve","$onRenderResolve$","queuedListeners","$queuedListeners$","rmListeners","$rmListeners$","_defineProperty","installDevTools","devTools","stencil","originalInspect","result","CONTENT_REF_ID","ORG_LOCATION_ID","SLOT_NODE_ID","TEXT_NODE_ID","HYDRATE_ID","HYDRATED_STYLE_ID","HYDRATE_CHILD_ID","HYDRATED_CSS","XLINK_NS","EMPTY_OBJ","SVG_NS","HTML_NS","isDef","v","isComplexType","o","queryNonceMetaTagContent","doc","_a","_b","_c","head","querySelector","getAttribute","h","nodeName","vnodeData","child","slotName","simple","lastSimple","vNodeChildren","walk","c","Array","isArray","String","consoleDevError","$text$","push","newVNode","_len","children","_key","validateInputProperties","vdomKey","slotRelocation","name","vdomClass","classData","className","class","Object","keys","filter","k","join","some","isHost","vdomFunctional","vdomFnUtils","$attrs$","$children$","$key$","$name$","tag","text","$tag$","$elm$","vdomAttribute","Host","node","forEach","cb","map","convertToPublic","convertToPrivate","vattrs","vchildren","vkey","vname","vtag","vtext","assign","apply","_toConsumableArray","inputElm","props","value","indexOf","typeIndex","minIndex","maxIndex","stepIndex","consoleDevWarn","initializeClientHydrate","hostElm","hostId","endHydrate","shadowRoot","childRenderNodes","slotNodes","shadowRootNodes","shadowDom","$orgLocNodes$","initializeDocumentHydrate","body","Map","removeAttribute","clientHydrate","orgLocationId","$hostId$","$nodeId$","orgLocationNode","get","supportsShadow","parentNode","insertBefore","nextSibling","delete","shadowRootNode","appendChild","parentVNode","childNodeType","childIdSplt","childVNode","nodeType","split","$depth$","$index$","toLowerCase","childNodes","nodeValue","textContent","remove","createElement","setAttribute","orgLocNodes","set","computeMode","elm","modeResolutionChain","find","m","setMode","handler","getMode","parsePropertyValue","propValue","propType","propBoolean","propNumber","parseFloat","propString","getElement","lazyLoad","createEvent","emit","detail","isConnected","emitEvent","bubbles","composed","cancelable","opts","ev","ce","dispatchEvent","rootAppliedStyles","WeakMap","registerStyle","cssText","allowCS","style","styles","supportsConstructableStylesheets","CSSStyleSheet","replaceSync","addStyle","styleContainerNode","cmpMeta","mode","getScopeId","attachStyles","appliedStyles","styleElm","Set","has","hydrateClientSide","host","innerHTML","nonce","$nonce$","hydrateServerSide","hotModuleReplacement","add","constructableCSS","adoptedStyleSheets","includes","$cmpMeta$","endAttachStyles","$tagName$","getRootNode","scoped","cssAnnotations","classList","cmp","convertScopedToShadow","css","replace","setAccessor","memberName","oldValue","newValue","isSvg","isProp","isMemberInElement","ln","oldClasses","parseClassList","newClasses","vdomStyle","updatable","prop","removeProperty","setProperty","vdomRef","vdomListener","__lookupSetter__","slice","rel","ael","vdomPropOrAttr","isComplex","n","e","xlink","vdomXlink","removeAttributeNS","setAttributeNS","parseClassListRegex","updateElement","oldVnode","newVnode","oldVnodeAttrs","newVnodeAttrs","createElm","oldParentVNode","newParentVNode","childIndex","parentElm","childNode","oldVNode","vdomText","createTextNode","isDebug","slotReferenceDebugNode","svg","createElementNS","putBackInOriginalLocation","recursive","oldSlotChildNodes","parentReferenceNode","referenceNode","addVnodes","before","vnodes","startIdx","endIdx","containerElm","removeVnodes","index","nullifyVNodeRefs","updateChildren","oldCh","newCh","oldStartIdx","newStartIdx","idxInOld","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","elmToMove","isSameVnode","patch","leftVNode","rightVNode","oldChildren","newChildren","defaultHolder","reflect","slot","data","updateFallbackSlotVisibility","_iterator","_createForOfIteratorHelper","_step","s","done","hidden","_iterator2","_step2","siblingNode","trim","err","f","relocateNodes","markSlotContentForRelocation","hostContentNodes","j","_iterator3","_step3","_loop","isNodeLocatedInSlot","relocateNodeData","r","$nodeToRelocate$","$slotRefNode$","relocateNode","nodeToRelocate","vNode","renderVdom","renderFnResults","isInitialLoad","rootVnode","Error","$attrsToReflect$","_ref2","_ref3","_slicedToArray","propName","attribute","_i4","_Object$keys","hasAttribute","relocateData","parentNodeRef","insertBeforeNode","refNode","originalLocationDebugNode","previousSibling","slotVNode","createComment","localName","attachToAncestor","asyncLoading","Promise","scheduleUpdate","taskQueue","dispatch","dispatchHooks","writeTask","endSchedule","instance","maybePromise","hostListener","_ref4","_ref5","methodName","event","safeCall","emitLifecycleEvent","cmpWillLoad","cmpWillUpdate","cmpWillRender","enqueue","updateComponent","fn","isPromisey","then","_ref6","_asyncToGenerator","_regeneratorRuntime","_callee","endUpdate","rc","endRender","childrenPromises","postUpdate","wrap","_callee$","_context","prev","next","callRender","serverSideConnected","consoleError","postUpdateComponent","all","stop","_x","_x2","_x3","allRenderFn","render","hasRenderFn","vdomRender","resolve","getRenderingRef","endPostUpdate","cmpDidRender","addHydratedFlag","cmpDidLoad","appDidLoad","cmpDidUpdate","method","nextTick","forceUpdate","who","documentElement","asyncQueue","namespace","arg","lifecycleName","lifecycleDOMEvents","hydratedClass","hydratedAttribute","ii","childElm","connectedCallback","getValue","setValue","newVal","oldVal","$members$","areBothNaN","Number","isNaN","didValueChange","watchCallback","$watchers$","watchMethods","watchMethodName","cmpShouldUpdate","componentShouldUpdate","proxyComponent","Cstr","member","watchers","members","entries","prototype","_ref7","_ref8","_ref8$","memberFlags","state","defineProperty","configurable","enumerable","_len2","args","_key2","_ref$$lazyInstance$","observeAttribute","attrNameToPropName","attributeChangedCallback","attrName","_this","jmp","hasOwnProperty","entry","callbackName","call","observedAttributes","from","_ref9","_ref10","_","_ref11","_ref12","initializeComponent","_ref13","_callee2","hmrVersionId","endLoad","endNewInstance","_scopeId","endRegisterStyles","schedule","_callee2$","_context2","loadModule","sent","isProxied","fireConnectedCallback","constructor","customElements","whenDefined","shadowDomShim","scopeCss","_x4","_x5","_x6","_x7","endConnected","hostListenerTargetParent","addHostEventListeners","$listeners$","setContentReference","_ref14","_ref15","_ref15$","initializeNextTick","contentRefElm","firstChild","disconnectInstance","disconnectedCallback","cmpDidUnload","_ref16","_callee3","_callee3$","_context3","rmListener","_x8","patchPseudoShadowDom","hostElementPrototype","descriptorPrototype","patchCloneNode","patchSlotAppendChild","patchSlotAppend","patchSlotPrepend","patchSlotInsertAdjacentElement","patchSlotInsertAdjacentHTML","patchSlotInsertAdjacentText","patchTextContent","patchChildSlotNodes","HostElementPrototype","orgCloneNode","cloneNode","deep","srcNode","isShadowDom","clonedNode","slotted","nonStencilNode","stencilPrivates","every","privateField","appendChildSlotFix","__appendChild","newChild","getSlotName","slotNode","getHostSlotNode","slotChildNodes","getHostSlotChildNodes","appendAfter","originalPrepend","prepend","_this2","_len3","_key3","ownerDocument","slotPlaceholder","document","append","_this3","_len4","_key4","originalInsertAdjacentHtml","insertAdjacentHTML","position","container","insertAdjacentText","originalInsertAdjacentElement","insertAdjacentElement","element","descriptor","getOwnPropertyDescriptor","Node","__textContent","FakeNodeList","_Array","_inherits","_super","_createSuper","_classCallCheck","_createClass","item","_wrapNativeSuper","childNodesFn","__lookupGetter__","defineCustomElement","compactMeta","define","proxyCustomElement","slotChildNodesFix","cloneNodeFix","scopedSlotTextContentFix","originalConnectedCallback","originalDisconnectedCallback","__registerHost","registerHost","__attachShadow","shadowDelegatesFocus","attachShadow","delegatesFocus","is","forceModeUpdate","oldScopeId","hmrStart","bootstrapLazy","lazyBundles","options","endBootstrap","cmpTags","exclude","metaCharset","visibilityStyle","deferredConnectedCallbacks","querySelectorAll","appLoadFallback","isBootstrapping","resourcesUrl","baseURI","syncQueue","lazyBundle","transformTagName","HostElement","_HTMLElement","_super2","self","_this4","_assertThisInitialized","_this5","clearTimeout","_this6","componentOnReady","HTMLElement","formAssociated","$lazyBundleId$","invisiblePrehydration","setTimeout","Fragment","listeners","attachParentListeners","_ref17","_ref18","_ref19","_ref20","_ref21","_ref22","target","hostListenerTarget","getHostListenerTarget","hostListenerProxy","hostListenerOpts","hostListenerTargetDocument","hostListenerTargetWindow","hostListenerTargetBody","parentElement","supportsListenerOptions","passive","capture","setNonce","setPlatformOptions","insertVdomAnnotations","staticComponents","docData","hostIds","rootLevelIds","orgLocationNodes","parseVNodeAnnotations","nodeRef","nodeId","childId","commentBeforeTextNode","orgLocationNodeId","orgLocationParentNode","cmpData","nodeIds","insertVNodeAnnotations","depth","vnodeChild","insertChildVNodeAnnotations","parent","parentChildNodes","comment","textNodeId","slotNodeId","childDepth","hostRefs","registerInstance","el","console","error","STENCIL_DEV_MODE","_console","_len5","_key5","_console2","_len6","_key6","warn","consoleDevInfo","_console3","_len7","_key7","info","setErrorHandler","cmpModules","exportName","bundleId","module","importedModule","window","H","_class","raf","requestAnimationFrame","eventName","listener","addEventListener","removeEventListener","CustomEvent","setPlatformHelpers","helpers","promiseResolve","queueDomReads","queueDomWrites","queueDomWritesLow","queueTask","queue","write","flush","consume","now","consumeTimeout","timeout","ts","splice","Math","ceil","Infinity","readTask","Env"],"sources":["C:/Users/renan/ionic-app/node_modules/@stencil/core/internal/client/index.js"],"sourcesContent":["/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/snabbdom/snabbdom/blob/master/LICENSE\n *\n * Modified for Stencil's renderer and slot projection\n */\nlet scopeId;\nlet contentRef;\nlet hostTagName;\nlet customError;\nlet i = 0;\nlet useNativeShadowDom = false;\nlet checkSlotFallbackVisibility = false;\nlet checkSlotRelocate = false;\nlet isSvgMode = false;\nlet renderingRef = null;\nlet queueCongestion = 0;\nlet queuePending = false;\n/*\n Stencil Client Platform v4.6.0 | MIT Licensed | https://stenciljs.com\n */\nimport { BUILD, NAMESPACE } from '@stencil/core/internal/app-data';\nconst Build = {\n    isDev: BUILD.isDev ? true : false,\n    isBrowser: true,\n    isServer: false,\n    isTesting: BUILD.isTesting ? true : false,\n};\nconst getAssetPath = (path) => {\n    const assetUrl = new URL(path, plt.$resourcesUrl$);\n    return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;\n};\nconst setAssetPath = (path) => (plt.$resourcesUrl$ = path);\nconst createTime = (fnName, tagName = '') => {\n    if (BUILD.profile && performance.mark) {\n        const key = `st:${fnName}:${tagName}:${i++}`;\n        // Start\n        performance.mark(key);\n        // End\n        return () => performance.measure(`[Stencil] ${fnName}() <${tagName}>`, key);\n    }\n    else {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    if (BUILD.profile && performance.mark) {\n        if (performance.getEntriesByName(key, 'mark').length === 0) {\n            performance.mark(key);\n        }\n        return () => {\n            if (performance.getEntriesByName(measureText, 'measure').length === 0) {\n                performance.measure(measureText, key);\n            }\n        };\n    }\n    else {\n        return () => {\n            return;\n        };\n    }\n};\nconst inspect = (ref) => {\n    const hostRef = getHostRef(ref);\n    if (!hostRef) {\n        return undefined;\n    }\n    const flags = hostRef.$flags$;\n    const hostElement = hostRef.$hostElement$;\n    return {\n        renderCount: hostRef.$renderCount$,\n        flags: {\n            hasRendered: !!(flags & 2 /* HOST_FLAGS.hasRendered */),\n            hasConnected: !!(flags & 1 /* HOST_FLAGS.hasConnected */),\n            isWaitingForChildren: !!(flags & 4 /* HOST_FLAGS.isWaitingForChildren */),\n            isConstructingInstance: !!(flags & 8 /* HOST_FLAGS.isConstructingInstance */),\n            isQueuedForUpdate: !!(flags & 16 /* HOST_FLAGS.isQueuedForUpdate */),\n            hasInitializedComponent: !!(flags & 32 /* HOST_FLAGS.hasInitializedComponent */),\n            hasLoadedComponent: !!(flags & 64 /* HOST_FLAGS.hasLoadedComponent */),\n            isWatchReady: !!(flags & 128 /* HOST_FLAGS.isWatchReady */),\n            isListenReady: !!(flags & 256 /* HOST_FLAGS.isListenReady */),\n            needsRerender: !!(flags & 512 /* HOST_FLAGS.needsRerender */),\n        },\n        instanceValues: hostRef.$instanceValues$,\n        ancestorComponent: hostRef.$ancestorComponent$,\n        hostElement,\n        lazyInstance: hostRef.$lazyInstance$,\n        vnode: hostRef.$vnode$,\n        modeName: hostRef.$modeName$,\n        onReadyPromise: hostRef.$onReadyPromise$,\n        onReadyResolve: hostRef.$onReadyResolve$,\n        onInstancePromise: hostRef.$onInstancePromise$,\n        onInstanceResolve: hostRef.$onInstanceResolve$,\n        onRenderResolve: hostRef.$onRenderResolve$,\n        queuedListeners: hostRef.$queuedListeners$,\n        rmListeners: hostRef.$rmListeners$,\n        ['s-id']: hostElement['s-id'],\n        ['s-cr']: hostElement['s-cr'],\n        ['s-lr']: hostElement['s-lr'],\n        ['s-p']: hostElement['s-p'],\n        ['s-rc']: hostElement['s-rc'],\n        ['s-sc']: hostElement['s-sc'],\n    };\n};\nconst installDevTools = () => {\n    if (BUILD.devTools) {\n        const stencil = (win.stencil = win.stencil || {});\n        const originalInspect = stencil.inspect;\n        stencil.inspect = (ref) => {\n            let result = inspect(ref);\n            if (!result && typeof originalInspect === 'function') {\n                result = originalInspect(ref);\n            }\n            return result;\n        };\n    }\n};\nconst CONTENT_REF_ID = 'r';\nconst ORG_LOCATION_ID = 'o';\nconst SLOT_NODE_ID = 's';\nconst TEXT_NODE_ID = 't';\nconst HYDRATE_ID = 's-id';\nconst HYDRATED_STYLE_ID = 'sty-id';\nconst HYDRATE_CHILD_ID = 'c-id';\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nconst XLINK_NS = 'http://www.w3.org/1999/xlink';\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\n/**\n * Namespaces\n */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\nconst isDef = (v) => v != null;\n/**\n * Check whether a value is a 'complex type', defined here as an object or a\n * function.\n *\n * @param o the value to check\n * @returns whether it's a complex type or not\n */\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Helper method for querying a `meta` tag that contains a nonce value\n * out of a DOM's head.\n *\n * @param doc The DOM containing the `head` to query against\n * @returns The content of the meta tag representing the nonce value, or `undefined` if no tag\n * exists or the tag has no content.\n */\nfunction queryNonceMetaTagContent(doc) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = doc.head) === null || _a === void 0 ? void 0 : _a.querySelector('meta[name=\"csp-nonce\"]')) === null || _b === void 0 ? void 0 : _b.getAttribute('content')) !== null && _c !== void 0 ? _c : undefined;\n}\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let key = null;\n    let slotName = null;\n    let simple = false;\n    let lastSimple = false;\n    const vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                else if (BUILD.isDev && typeof nodeName !== 'function' && child.$flags$ === undefined) {\n                    consoleDevError(`vNode passed as children has unexpected type.\nMake sure it's using the correct h() function.\nEmpty objects can also be the cause, look for JSX comments that became objects.`);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        if (BUILD.isDev && nodeName === 'input') {\n            validateInputProperties(vnodeData);\n        }\n        if (BUILD.vdomKey && vnodeData.key) {\n            key = vnodeData.key;\n        }\n        if (BUILD.slotRelocation && vnodeData.name) {\n            slotName = vnodeData.name;\n        }\n        // normalize class / className attributes\n        if (BUILD.vdomClass) {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter((k) => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    if (BUILD.isDev && vNodeChildren.some(isHost)) {\n        consoleDevError(`The <Host> must be the single root component. Make sure:\n- You are NOT using hostData() and <Host> in the same component.\n- <Host> is used once, and it's the single root component of the render() function.`);\n    }\n    if (BUILD.vdomFunctional && typeof nodeName === 'function') {\n        // nodeName is a functional component\n        return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    if (BUILD.vdomKey) {\n        vnode.$key$ = key;\n    }\n    if (BUILD.slotRelocation) {\n        vnode.$name$ = slotName;\n    }\n    return vnode;\n};\n/**\n * A utility function for creating a virtual DOM node from a tag and some\n * possible text content.\n *\n * @param tag the tag for this element\n * @param text possible text content for the node\n * @returns a newly-minted virtual DOM node\n */\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    if (BUILD.vdomAttribute) {\n        vnode.$attrs$ = null;\n    }\n    if (BUILD.vdomKey) {\n        vnode.$key$ = null;\n    }\n    if (BUILD.slotRelocation) {\n        vnode.$name$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\n/**\n * Check whether a given node is a Host node or not\n *\n * @param node the virtual DOM node to check\n * @returns whether it's a Host node or not\n */\nconst isHost = (node) => node && node.$tag$ === Host;\n/**\n * Implementation of {@link d.FunctionalUtilities} for Stencil's VDom.\n *\n * Note that these functions convert from {@link d.VNode} to\n * {@link d.ChildNode} to give functional component developers a friendly\n * interface.\n */\nconst vdomFnUtils = {\n    forEach: (children, cb) => children.map(convertToPublic).forEach(cb),\n    map: (children, cb) => children.map(convertToPublic).map(cb).map(convertToPrivate),\n};\n/**\n * Convert a {@link d.VNode} to a {@link d.ChildNode} in order to present a\n * friendlier public interface (hence, 'convertToPublic').\n *\n * @param node the virtual DOM node to convert\n * @returns a converted child node\n */\nconst convertToPublic = (node) => ({\n    vattrs: node.$attrs$,\n    vchildren: node.$children$,\n    vkey: node.$key$,\n    vname: node.$name$,\n    vtag: node.$tag$,\n    vtext: node.$text$,\n});\n/**\n * Convert a {@link d.ChildNode} back to an equivalent {@link d.VNode} in\n * order to use the resulting object in the virtual DOM. The initial object was\n * likely created as part of presenting a public API, so converting it back\n * involved making it 'private' again (hence, `convertToPrivate`).\n *\n * @param node the child node to convert\n * @returns a converted virtual DOM node\n */\nconst convertToPrivate = (node) => {\n    if (typeof node.vtag === 'function') {\n        const vnodeData = Object.assign({}, node.vattrs);\n        if (node.vkey) {\n            vnodeData.key = node.vkey;\n        }\n        if (node.vname) {\n            vnodeData.name = node.vname;\n        }\n        return h(node.vtag, vnodeData, ...(node.vchildren || []));\n    }\n    const vnode = newVNode(node.vtag, node.vtext);\n    vnode.$attrs$ = node.vattrs;\n    vnode.$children$ = node.vchildren;\n    vnode.$key$ = node.vkey;\n    vnode.$name$ = node.vname;\n    return vnode;\n};\n/**\n * Validates the ordering of attributes on an input element\n *\n * @param inputElm the element to validate\n */\nconst validateInputProperties = (inputElm) => {\n    const props = Object.keys(inputElm);\n    const value = props.indexOf('value');\n    if (value === -1) {\n        return;\n    }\n    const typeIndex = props.indexOf('type');\n    const minIndex = props.indexOf('min');\n    const maxIndex = props.indexOf('max');\n    const stepIndex = props.indexOf('step');\n    if (value < typeIndex || value < minIndex || value < maxIndex || value < stepIndex) {\n        consoleDevWarn(`The \"value\" prop of <input> should be set after \"min\", \"max\", \"type\" and \"step\"`);\n    }\n};\nconst initializeClientHydrate = (hostElm, tagName, hostId, hostRef) => {\n    const endHydrate = createTime('hydrateClient', tagName);\n    const shadowRoot = hostElm.shadowRoot;\n    const childRenderNodes = [];\n    const slotNodes = [];\n    const shadowRootNodes = BUILD.shadowDom && shadowRoot ? [] : null;\n    const vnode = (hostRef.$vnode$ = newVNode(tagName, null));\n    if (!plt.$orgLocNodes$) {\n        initializeDocumentHydrate(doc.body, (plt.$orgLocNodes$ = new Map()));\n    }\n    hostElm[HYDRATE_ID] = hostId;\n    hostElm.removeAttribute(HYDRATE_ID);\n    clientHydrate(vnode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, hostElm, hostId);\n    childRenderNodes.map((c) => {\n        const orgLocationId = c.$hostId$ + '.' + c.$nodeId$;\n        const orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);\n        const node = c.$elm$;\n        if (orgLocationNode && supportsShadow && orgLocationNode['s-en'] === '') {\n            orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);\n        }\n        if (!shadowRoot) {\n            node['s-hn'] = tagName;\n            if (orgLocationNode) {\n                node['s-ol'] = orgLocationNode;\n                node['s-ol']['s-nr'] = node;\n            }\n        }\n        plt.$orgLocNodes$.delete(orgLocationId);\n    });\n    if (BUILD.shadowDom && shadowRoot) {\n        shadowRootNodes.map((shadowRootNode) => {\n            if (shadowRootNode) {\n                shadowRoot.appendChild(shadowRootNode);\n            }\n        });\n    }\n    endHydrate();\n};\nconst clientHydrate = (parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId) => {\n    let childNodeType;\n    let childIdSplt;\n    let childVNode;\n    let i;\n    if (node.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n        childNodeType = node.getAttribute(HYDRATE_CHILD_ID);\n        if (childNodeType) {\n            // got the node data from the element's attribute\n            // `${hostId}.${nodeId}.${depth}.${index}`\n            childIdSplt = childNodeType.split('.');\n            if (childIdSplt[0] === hostId || childIdSplt[0] === '0') {\n                childVNode = {\n                    $flags$: 0,\n                    $hostId$: childIdSplt[0],\n                    $nodeId$: childIdSplt[1],\n                    $depth$: childIdSplt[2],\n                    $index$: childIdSplt[3],\n                    $tag$: node.tagName.toLowerCase(),\n                    $elm$: node,\n                    $attrs$: null,\n                    $children$: null,\n                    $key$: null,\n                    $name$: null,\n                    $text$: null,\n                };\n                childRenderNodes.push(childVNode);\n                node.removeAttribute(HYDRATE_CHILD_ID);\n                // this is a new child vnode\n                // so ensure its parent vnode has the vchildren array\n                if (!parentVNode.$children$) {\n                    parentVNode.$children$ = [];\n                }\n                // add our child vnode to a specific index of the vnode's children\n                parentVNode.$children$[childVNode.$index$] = childVNode;\n                // this is now the new parent vnode for all the next child checks\n                parentVNode = childVNode;\n                if (shadowRootNodes && childVNode.$depth$ === '0') {\n                    shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                }\n            }\n        }\n        // recursively drill down, end to start so we can remove nodes\n        for (i = node.childNodes.length - 1; i >= 0; i--) {\n            clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.childNodes[i], hostId);\n        }\n        if (node.shadowRoot) {\n            // keep drilling down through the shadow root nodes\n            for (i = node.shadowRoot.childNodes.length - 1; i >= 0; i--) {\n                clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.shadowRoot.childNodes[i], hostId);\n            }\n        }\n    }\n    else if (node.nodeType === 8 /* NODE_TYPE.CommentNode */) {\n        // `${COMMENT_TYPE}.${hostId}.${nodeId}.${depth}.${index}`\n        childIdSplt = node.nodeValue.split('.');\n        if (childIdSplt[1] === hostId || childIdSplt[1] === '0') {\n            // comment node for either the host id or a 0 host id\n            childNodeType = childIdSplt[0];\n            childVNode = {\n                $flags$: 0,\n                $hostId$: childIdSplt[1],\n                $nodeId$: childIdSplt[2],\n                $depth$: childIdSplt[3],\n                $index$: childIdSplt[4],\n                $elm$: node,\n                $attrs$: null,\n                $children$: null,\n                $key$: null,\n                $name$: null,\n                $tag$: null,\n                $text$: null,\n            };\n            if (childNodeType === TEXT_NODE_ID) {\n                childVNode.$elm$ = node.nextSibling;\n                if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3 /* NODE_TYPE.TextNode */) {\n                    childVNode.$text$ = childVNode.$elm$.textContent;\n                    childRenderNodes.push(childVNode);\n                    // remove the text comment since it's no longer needed\n                    node.remove();\n                    if (!parentVNode.$children$) {\n                        parentVNode.$children$ = [];\n                    }\n                    parentVNode.$children$[childVNode.$index$] = childVNode;\n                    if (shadowRootNodes && childVNode.$depth$ === '0') {\n                        shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                    }\n                }\n            }\n            else if (childVNode.$hostId$ === hostId) {\n                // this comment node is specifically for this host id\n                if (childNodeType === SLOT_NODE_ID) {\n                    // `${SLOT_NODE_ID}.${hostId}.${nodeId}.${depth}.${index}.${slotName}`;\n                    childVNode.$tag$ = 'slot';\n                    if (childIdSplt[5]) {\n                        node['s-sn'] = childVNode.$name$ = childIdSplt[5];\n                    }\n                    else {\n                        node['s-sn'] = '';\n                    }\n                    node['s-sr'] = true;\n                    if (BUILD.shadowDom && shadowRootNodes) {\n                        // browser support shadowRoot and this is a shadow dom component\n                        // create an actual slot element\n                        childVNode.$elm$ = doc.createElement(childVNode.$tag$);\n                        if (childVNode.$name$) {\n                            // add the slot name attribute\n                            childVNode.$elm$.setAttribute('name', childVNode.$name$);\n                        }\n                        // insert the new slot element before the slot comment\n                        node.parentNode.insertBefore(childVNode.$elm$, node);\n                        // remove the slot comment since it's not needed for shadow\n                        node.remove();\n                        if (childVNode.$depth$ === '0') {\n                            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                        }\n                    }\n                    slotNodes.push(childVNode);\n                    if (!parentVNode.$children$) {\n                        parentVNode.$children$ = [];\n                    }\n                    parentVNode.$children$[childVNode.$index$] = childVNode;\n                }\n                else if (childNodeType === CONTENT_REF_ID) {\n                    // `${CONTENT_REF_ID}.${hostId}`;\n                    if (BUILD.shadowDom && shadowRootNodes) {\n                        // remove the content ref comment since it's not needed for shadow\n                        node.remove();\n                    }\n                    else if (BUILD.slotRelocation) {\n                        hostElm['s-cr'] = node;\n                        node['s-cn'] = true;\n                    }\n                }\n            }\n        }\n    }\n    else if (parentVNode && parentVNode.$tag$ === 'style') {\n        const vnode = newVNode(null, node.textContent);\n        vnode.$elm$ = node;\n        vnode.$index$ = '0';\n        parentVNode.$children$ = [vnode];\n    }\n};\nconst initializeDocumentHydrate = (node, orgLocNodes) => {\n    if (node.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n        let i = 0;\n        for (; i < node.childNodes.length; i++) {\n            initializeDocumentHydrate(node.childNodes[i], orgLocNodes);\n        }\n        if (node.shadowRoot) {\n            for (i = 0; i < node.shadowRoot.childNodes.length; i++) {\n                initializeDocumentHydrate(node.shadowRoot.childNodes[i], orgLocNodes);\n            }\n        }\n    }\n    else if (node.nodeType === 8 /* NODE_TYPE.CommentNode */) {\n        const childIdSplt = node.nodeValue.split('.');\n        if (childIdSplt[0] === ORG_LOCATION_ID) {\n            orgLocNodes.set(childIdSplt[1] + '.' + childIdSplt[2], node);\n            node.nodeValue = '';\n            // useful to know if the original location is\n            // the root light-dom of a shadow dom component\n            node['s-en'] = childIdSplt[3];\n        }\n    }\n};\n// Private\nconst computeMode = (elm) => modeResolutionChain.map((h) => h(elm)).find((m) => !!m);\n// Public\nconst setMode = (handler) => modeResolutionChain.push(handler);\nconst getMode = (ref) => getHostRef(ref).$modeName$;\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if (BUILD.propBoolean && propType & 4 /* MEMBER_FLAGS.Boolean */) {\n            // per the HTML spec, any string value means it is a boolean true value\n            // but we'll cheat here and say that the string \"false\" is the boolean false\n            return propValue === 'false' ? false : propValue === '' || !!propValue;\n        }\n        if (BUILD.propNumber && propType & 2 /* MEMBER_FLAGS.Number */) {\n            // force it to be a number\n            return parseFloat(propValue);\n        }\n        if (BUILD.propString && propType & 1 /* MEMBER_FLAGS.String */) {\n            // could have been passed as a number or boolean\n            // but we still want it as a string\n            return String(propValue);\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getElement = (ref) => (BUILD.lazyLoad ? getHostRef(ref).$hostElement$ : ref);\nconst createEvent = (ref, name, flags) => {\n    const elm = getElement(ref);\n    return {\n        emit: (detail) => {\n            if (BUILD.isDev && !elm.isConnected) {\n                consoleDevWarn(`The \"${name}\" event was emitted, but the dispatcher node is no longer connected to the dom.`);\n            }\n            return emitEvent(elm, name, {\n                bubbles: !!(flags & 4 /* EVENT_FLAGS.Bubbles */),\n                composed: !!(flags & 2 /* EVENT_FLAGS.Composed */),\n                cancelable: !!(flags & 1 /* EVENT_FLAGS.Cancellable */),\n                detail,\n            });\n        },\n    };\n};\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst rootAppliedStyles = /*@__PURE__*/ new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructableStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        if (typeof style === 'string') {\n            style = cssText;\n        }\n        else {\n            style.replaceSync(cssText);\n        }\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode) => {\n    var _a;\n    const scopeId = getScopeId(cmpMeta, mode);\n    const style = styles.get(scopeId);\n    if (!BUILD.attachStyles) {\n        return scopeId;\n    }\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* NODE_TYPE.DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                if (BUILD.hydrateClientSide &&\n                    styleContainerNode.host &&\n                    (styleElm = styleContainerNode.querySelector(`[${HYDRATED_STYLE_ID}=\"${scopeId}\"]`))) {\n                    // This is only happening on native shadow-dom, do not needs CSS var shim\n                    styleElm.innerHTML = style;\n                }\n                else {\n                    styleElm = doc.createElement('style');\n                    styleElm.innerHTML = style;\n                    // Apply CSP nonce to the style tag if it exists\n                    const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n                    if (nonce != null) {\n                        styleElm.setAttribute('nonce', nonce);\n                    }\n                    if (BUILD.hydrateServerSide || BUILD.hotModuleReplacement) {\n                        styleElm.setAttribute(HYDRATED_STYLE_ID, scopeId);\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if (BUILD.constructableCSS && !styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const flags = cmpMeta.$flags$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    const scopeId = addStyle(BUILD.shadowDom && supportsShadow && elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta, hostRef.$modeName$);\n    if ((BUILD.shadowDom || BUILD.scoped) && BUILD.cssAnnotations && flags & 10 /* CMP_FLAGS.needsScopedEncapsulation */) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm['s-sc'] = scopeId;\n        elm.classList.add(scopeId + '-h');\n        if (BUILD.scoped && flags & 2 /* CMP_FLAGS.scopedCssEncapsulation */) {\n            elm.classList.add(scopeId + '-s');\n        }\n    }\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (BUILD.mode && mode && cmp.$flags$ & 32 /* CMP_FLAGS.hasMode */ ? cmp.$tagName$ + '-' + mode : cmp.$tagName$);\nconst convertScopedToShadow = (css) => css.replace(/\\/\\*!@([^\\/]+)\\*\\/[^\\{]+\\{/g, '$1{');\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n/**\n * When running a VDom render set properties present on a VDom node onto the\n * corresponding HTML element.\n *\n * Note that this function has special functionality for the `class`,\n * `style`, `key`, and `ref` attributes, as well as event handlers (like\n * `onClick`, etc). All others are just passed through as-is.\n *\n * @param elm the HTMLElement onto which attributes should be set\n * @param memberName the name of the attribute to set\n * @param oldValue the old value for the attribute\n * @param newValue the new value for the attribute\n * @param isSvg whether we're in an svg context or not\n * @param flags bitflags for Vdom variables\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        let ln = memberName.toLowerCase();\n        if (BUILD.vdomClass && memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));\n        }\n        else if (BUILD.vdomStyle && memberName === 'style') {\n            // update style attribute, css properties and values\n            if (BUILD.updatable) {\n                for (const prop in oldValue) {\n                    if (!newValue || newValue[prop] == null) {\n                        if (!BUILD.hydrateServerSide && prop.includes('-')) {\n                            elm.style.removeProperty(prop);\n                        }\n                        else {\n                            elm.style[prop] = '';\n                        }\n                    }\n                }\n            }\n            for (const prop in newValue) {\n                if (!oldValue || newValue[prop] !== oldValue[prop]) {\n                    if (!BUILD.hydrateServerSide && prop.includes('-')) {\n                        elm.style.setProperty(prop, newValue[prop]);\n                    }\n                    else {\n                        elm.style[prop] = newValue[prop];\n                    }\n                }\n            }\n        }\n        else if (BUILD.vdomKey && memberName === 'key')\n            ;\n        else if (BUILD.vdomRef && memberName === 'ref') {\n            // minifier will clean this up\n            if (newValue) {\n                newValue(elm);\n            }\n        }\n        else if (BUILD.vdomListener &&\n            (BUILD.lazyLoad ? !isProp : !elm.__lookupSetter__(memberName)) &&\n            memberName[0] === 'o' &&\n            memberName[1] === 'n') {\n            // Event Handlers\n            // so if the member name starts with \"on\" and the 3rd characters is\n            // a capital letter, and it's not already a member on the element,\n            // then we're assuming it's an event listener\n            if (memberName[2] === '-') {\n                // on- prefixed events\n                // allows to be explicit about the dom event to listen without any magic\n                // under the hood:\n                // <my-cmp on-click> // listens for \"click\"\n                // <my-cmp on-Click> // listens for \"Click\"\n                // <my-cmp on-ionChange> // listens for \"ionChange\"\n                // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n                memberName = memberName.slice(3);\n            }\n            else if (isMemberInElement(win, ln)) {\n                // standard event\n                // the JSX attribute could have been \"onMouseOver\" and the\n                // member name \"onmouseover\" is on the window's prototype\n                // so let's add the listener \"mouseover\", which is all lowercased\n                memberName = ln.slice(2);\n            }\n            else {\n                // custom event\n                // the JSX attribute could have been \"onMyCustomEvent\"\n                // so let's trim off the \"on\" prefix and lowercase the first character\n                // and add the listener \"myCustomEvent\"\n                // except for the first character, we keep the event name case\n                memberName = ln[2] + memberName.slice(3);\n            }\n            if (oldValue) {\n                plt.rel(elm, memberName, oldValue, false);\n            }\n            if (newValue) {\n                plt.ael(elm, memberName, newValue, false);\n            }\n        }\n        else if (BUILD.vdomPropOrAttr) {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        const n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) { }\n            }\n            /**\n             * Need to manually update attribute if:\n             * - memberName is not an attribute\n             * - if we are rendering the host element in order to reflect attribute\n             * - if it's a SVG, since properties might not work in <svg>\n             * - if the newValue is null/undefined or 'false'.\n             */\n            let xlink = false;\n            if (BUILD.vdomXlink) {\n                if (ln !== (ln = ln.replace(/^xlink\\:?/, ''))) {\n                    memberName = ln;\n                    xlink = true;\n                }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    if (BUILD.vdomXlink && xlink) {\n                        elm.removeAttributeNS(XLINK_NS, memberName);\n                    }\n                    else {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* VNODE_FLAGS.isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                if (BUILD.vdomXlink && xlink) {\n                    elm.setAttributeNS(XLINK_NS, memberName, newValue);\n                }\n                else {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* NODE_TYPE.DocumentFragment */ && newVnode.$elm$.host\n        ? newVnode.$elm$.host\n        : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    if (BUILD.updatable) {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\n/**\n * Create a DOM Node corresponding to one of the children of a given VNode.\n *\n * @param oldParentVNode the parent VNode from the previous render\n * @param newParentVNode the parent VNode from the current render\n * @param childIndex the index of the VNode, in the _new_ parent node's\n * children, for which we will create a new DOM node\n * @param parentElm the parent DOM node which our new node will be a child of\n * @returns the newly created node\n */\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    const newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    let oldVNode;\n    if (BUILD.slotRelocation && !useNativeShadowDom) {\n        // remember for later we need to check to relocate nodes\n        checkSlotRelocate = true;\n        if (newVNode.$tag$ === 'slot') {\n            if (scopeId) {\n                // scoped css needs to add its scoped id to the parent element\n                parentElm.classList.add(scopeId + '-s');\n            }\n            newVNode.$flags$ |= newVNode.$children$\n                ? // slot element has fallback content\n                    2 /* VNODE_FLAGS.isSlotFallback */\n                : // slot element does not have fallback content\n                    1 /* VNODE_FLAGS.isSlotReference */;\n        }\n    }\n    if (BUILD.isDev && newVNode.$elm$) {\n        consoleDevError(`The JSX ${newVNode.$text$ !== null ? `\"${newVNode.$text$}\" text` : `\"${newVNode.$tag$}\" element`} node should not be shared within the same renderer. The renderer caches element lookups in order to improve performance. However, a side effect from this is that the exact same JSX node should not be reused. For more information please see https://stenciljs.com/docs/templating-jsx#avoid-shared-jsx-nodes`);\n    }\n    if (BUILD.vdomText && newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else if (BUILD.slotRelocation && newVNode.$flags$ & 1 /* VNODE_FLAGS.isSlotReference */) {\n        // create a slot reference node\n        elm = newVNode.$elm$ =\n            BUILD.isDebug || BUILD.hydrateServerSide ? slotReferenceDebugNode(newVNode) : doc.createTextNode('');\n    }\n    else {\n        if (BUILD.svg && !isSvgMode) {\n            isSvgMode = newVNode.$tag$ === 'svg';\n        }\n        // create element\n        elm = newVNode.$elm$ = (BUILD.svg\n            ? doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, BUILD.slotRelocation && newVNode.$flags$ & 2 /* VNODE_FLAGS.isSlotFallback */\n                ? 'slot-fb'\n                : newVNode.$tag$)\n            : doc.createElement(BUILD.slotRelocation && newVNode.$flags$ & 2 /* VNODE_FLAGS.isSlotFallback */\n                ? 'slot-fb'\n                : newVNode.$tag$));\n        if (BUILD.svg && isSvgMode && newVNode.$tag$ === 'foreignObject') {\n            isSvgMode = false;\n        }\n        // add css classes, attrs, props, listeners, etc.\n        if (BUILD.vdomAttribute) {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if ((BUILD.shadowDom || BUILD.scoped) && isDef(scopeId) && elm['s-si'] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add((elm['s-si'] = scopeId));\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i, elm);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n        if (BUILD.svg) {\n            if (newVNode.$tag$ === 'svg') {\n                // Only reset the SVG context when we're exiting <svg> element\n                isSvgMode = false;\n            }\n            else if (elm.tagName === 'foreignObject') {\n                // Reenter SVG context when we're exiting <foreignObject> element\n                isSvgMode = true;\n            }\n        }\n    }\n    if (BUILD.slotRelocation) {\n        elm['s-hn'] = hostTagName;\n        if (newVNode.$flags$ & (2 /* VNODE_FLAGS.isSlotFallback */ | 1 /* VNODE_FLAGS.isSlotReference */)) {\n            // remember the content reference comment\n            elm['s-sr'] = true;\n            // remember the content reference comment\n            elm['s-cr'] = contentRef;\n            // remember the slot name, or empty string for default slot\n            elm['s-sn'] = newVNode.$name$ || '';\n            // check if we've got an old vnode for this slot\n            oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n            if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\n                // we've got an old slot vnode and the wrapper is being replaced\n                // so let's move the old slot content back to it's original location\n                putBackInOriginalLocation(oldParentVNode.$elm$, false);\n            }\n        }\n    }\n    return elm;\n};\nconst putBackInOriginalLocation = (parentElm, recursive) => {\n    plt.$flags$ |= 1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n    const oldSlotChildNodes = parentElm.childNodes;\n    for (let i = oldSlotChildNodes.length - 1; i >= 0; i--) {\n        const childNode = oldSlotChildNodes[i];\n        if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {\n            // // this child node in the old element is from another component\n            // // remove this node from the old slot's parent\n            // childNode.remove();\n            // and relocate it back to it's original location\n            parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode));\n            // remove the old original location comment entirely\n            // later on the patch function will know what to do\n            // and move this to the correct spot if need be\n            childNode['s-ol'].remove();\n            childNode['s-ol'] = undefined;\n            checkSlotRelocate = true;\n        }\n        if (recursive) {\n            putBackInOriginalLocation(childNode, recursive);\n        }\n    }\n    plt.$flags$ &= ~1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n};\n/**\n * Create DOM nodes corresponding to a list of {@link d.Vnode} objects and\n * add them to the DOM in the appropriate place.\n *\n * @param parentElm the DOM node which should be used as a parent for the new\n * DOM nodes\n * @param before a child of the `parentElm` which the new children should be\n * inserted before (optional)\n * @param parentVNode the parent virtual DOM node\n * @param vnodes the new child virtual DOM nodes to produce DOM nodes for\n * @param startIdx the index in the child virtual DOM nodes at which to start\n * creating DOM nodes (inclusive)\n * @param endIdx the index in the child virtual DOM nodes at which to stop\n * creating DOM nodes (inclusive)\n */\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = ((BUILD.slotRelocation && parentElm['s-cr'] && parentElm['s-cr'].parentNode) || parentElm);\n    let childNode;\n    if (BUILD.shadowDom && containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx, parentElm);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, BUILD.slotRelocation ? referenceNode(before) : before);\n            }\n        }\n    }\n};\n/**\n * Remove the DOM elements corresponding to a list of {@link d.VNode} objects.\n * This can be used to, for instance, clean up after a list of children which\n * should no longer be shown.\n *\n * This function also handles some of Stencil's slot relocation logic.\n *\n * @param vnodes a list of virtual DOM nodes to remove\n * @param startIdx the index at which to start removing nodes (inclusive)\n * @param endIdx the index at which to stop removing nodes (inclusive)\n */\nconst removeVnodes = (vnodes, startIdx, endIdx) => {\n    for (let index = startIdx; index <= endIdx; ++index) {\n        const vnode = vnodes[index];\n        if (vnode) {\n            const elm = vnode.$elm$;\n            nullifyVNodeRefs(vnode);\n            if (elm) {\n                if (BUILD.slotRelocation) {\n                    // we're removing this element\n                    // so it's possible we need to show slot fallback content now\n                    checkSlotFallbackVisibility = true;\n                    if (elm['s-ol']) {\n                        // remove the original location comment\n                        elm['s-ol'].remove();\n                    }\n                    else {\n                        // it's possible that child nodes of the node\n                        // that's being removed are slot nodes\n                        putBackInOriginalLocation(elm, true);\n                    }\n                }\n                // remove the vnode's element from the dom\n                elm.remove();\n            }\n        }\n    }\n};\n/**\n * Reconcile the children of a new VNode with the children of an old VNode by\n * traversing the two collections of children, identifying nodes that are\n * conserved or changed, calling out to `patch` to make any necessary\n * updates to the DOM, and rearranging DOM nodes as needed.\n *\n * The algorithm for reconciling children works by analyzing two 'windows' onto\n * the two arrays of children (`oldCh` and `newCh`). We keep track of the\n * 'windows' by storing start and end indices and references to the\n * corresponding array entries. Initially the two 'windows' are basically equal\n * to the entire array, but we progressively narrow the windows until there are\n * no children left to update by doing the following:\n *\n * 1. Skip any `null` entries at the beginning or end of the two arrays, so\n *    that if we have an initial array like the following we'll end up dealing\n *    only with a window bounded by the highlighted elements:\n *\n *    [null, null, VNode1 , ... , VNode2, null, null]\n *                 ^^^^^^         ^^^^^^\n *\n * 2. Check to see if the elements at the head and tail positions are equal\n *    across the windows. This will basically detect elements which haven't\n *    been added, removed, or changed position, i.e. if you had the following\n *    VNode elements (represented as HTML):\n *\n *    oldVNode: `<div><p><span>HEY</span></p></div>`\n *    newVNode: `<div><p><span>THERE</span></p></div>`\n *\n *    Then when comparing the children of the `<div>` tag we check the equality\n *    of the VNodes corresponding to the `<p>` tags and, since they are the\n *    same tag in the same position, we'd be able to avoid completely\n *    re-rendering the subtree under them with a new DOM element and would just\n *    call out to `patch` to handle reconciling their children and so on.\n *\n * 3. Check, for both windows, to see if the element at the beginning of the\n *    window corresponds to the element at the end of the other window. This is\n *    a heuristic which will let us identify _some_ situations in which\n *    elements have changed position, for instance it _should_ detect that the\n *    children nodes themselves have not changed but merely moved in the\n *    following example:\n *\n *    oldVNode: `<div><element-one /><element-two /></div>`\n *    newVNode: `<div><element-two /><element-one /></div>`\n *\n *    If we find cases like this then we also need to move the concrete DOM\n *    elements corresponding to the moved children to write the re-order to the\n *    DOM.\n *\n * 4. Finally, if VNodes have the `key` attribute set on them we check for any\n *    nodes in the old children which have the same key as the first element in\n *    our window on the new children. If we find such a node we handle calling\n *    out to `patch`, moving relevant DOM nodes, and so on, in accordance with\n *    what we find.\n *\n * Finally, once we've narrowed our 'windows' to the point that either of them\n * collapse (i.e. they have length 0) we then handle any remaining VNode\n * insertion or deletion that needs to happen to get a DOM state that correctly\n * reflects the new child VNodes. If, for instance, after our window on the old\n * children has collapsed we still have more nodes on the new children that\n * we haven't dealt with yet then we need to add them, or if the new children\n * collapse but we still have unhandled _old_ children then we need to make\n * sure the corresponding DOM nodes are removed.\n *\n * @param parentElm the node into which the parent VNode is rendered\n * @param oldCh the old children of the parent node\n * @param newVNode the new VNode which will replace the parent\n * @param newCh the new children of the parent node\n */\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let idxInOld = 0;\n    let i = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    let elmToMove;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // VNode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            // if the start nodes are the same then we should patch the new VNode\n            // onto the old one, and increment our `newStartIdx` and `oldStartIdx`\n            // indices to reflect that. We don't need to move any DOM Nodes around\n            // since things are matched up in order.\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            // likewise, if the end nodes are the same we patch new onto old and\n            // decrement our end indices, and also likewise in this case we don't\n            // need to move any DOM Nodes.\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            // case: \"Vnode moved right\"\n            //\n            // We've found that the last node in our window on the new children is\n            // the same VNode as the _first_ node in our window on the old children\n            // we're dealing with now. Visually, this is the layout of these two\n            // nodes:\n            //\n            // newCh: [..., newStartVnode , ... , newEndVnode , ...]\n            //                                    ^^^^^^^^^^^\n            // oldCh: [..., oldStartVnode , ... , oldEndVnode , ...]\n            //              ^^^^^^^^^^^^^\n            //\n            // In this situation we need to patch `newEndVnode` onto `oldStartVnode`\n            // and move the DOM element for `oldStartVnode`.\n            if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n            }\n            patch(oldStartVnode, newEndVnode);\n            // We need to move the element for `oldStartVnode` into a position which\n            // will be appropriate for `newEndVnode`. For this we can use\n            // `.insertBefore` and `oldEndVnode.$elm$.nextSibling`. If there is a\n            // sibling for `oldEndVnode.$elm$` then we want to move the DOM node for\n            // `oldStartVnode` between `oldEndVnode` and it's sibling, like so:\n            //\n            // <old-start-node />\n            // <some-intervening-node />\n            // <old-end-node />\n            // <!-- ->              <-- `oldStartVnode.$elm$` should be inserted here\n            // <next-sibling />\n            //\n            // If instead `oldEndVnode.$elm$` has no sibling then we just want to put\n            // the node for `oldStartVnode` at the end of the children of\n            // `parentElm`. Luckily, `Node.nextSibling` will return `null` if there\n            // aren't any siblings, and passing `null` to `Node.insertBefore` will\n            // append it to the children of the parent element.\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            // case: \"Vnode moved left\"\n            //\n            // We've found that the first node in our window on the new children is\n            // the same VNode as the _last_ node in our window on the old children.\n            // Visually, this is the layout of these two nodes:\n            //\n            // newCh: [..., newStartVnode , ... , newEndVnode , ...]\n            //              ^^^^^^^^^^^^^\n            // oldCh: [..., oldStartVnode , ... , oldEndVnode , ...]\n            //                                    ^^^^^^^^^^^\n            //\n            // In this situation we need to patch `newStartVnode` onto `oldEndVnode`\n            // (which will handle updating any changed attributes, reconciling their\n            // children etc) but we also need to move the DOM node to which\n            // `oldEndVnode` corresponds.\n            if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n            }\n            patch(oldEndVnode, newStartVnode);\n            // We've already checked above if `oldStartVnode` and `newStartVnode` are\n            // the same node, so since we're here we know that they are not. Thus we\n            // can move the element for `oldEndVnode` _before_ the element for\n            // `oldStartVnode`, leaving `oldStartVnode` to be reconciled in the\n            // future.\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            // Here we do some checks to match up old and new nodes based on the\n            // `$key$` attribute, which is set by putting a `key=\"my-key\"` attribute\n            // in the JSX for a DOM element in the implementation of a Stencil\n            // component.\n            //\n            // First we check to see if there are any nodes in the array of old\n            // children which have the same key as the first node in the new\n            // children.\n            idxInOld = -1;\n            if (BUILD.vdomKey) {\n                for (i = oldStartIdx; i <= oldEndIdx; ++i) {\n                    if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {\n                        idxInOld = i;\n                        break;\n                    }\n                }\n            }\n            if (BUILD.vdomKey && idxInOld >= 0) {\n                // We found a node in the old children which matches up with the first\n                // node in the new children! So let's deal with that\n                elmToMove = oldCh[idxInOld];\n                if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n                    // the tag doesn't match so we'll need a new DOM element\n                    node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld, parentElm);\n                }\n                else {\n                    patch(elmToMove, newStartVnode);\n                    // invalidate the matching old node so that we won't try to update it\n                    // again later on\n                    oldCh[idxInOld] = undefined;\n                    node = elmToMove.$elm$;\n                }\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else {\n                // We either didn't find an element in the old children that matches\n                // the key of the first new child OR the build is not using `key`\n                // attributes at all. In either case we need to create a new element\n                // for the new node.\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx, parentElm);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                // if we created a new node then handle inserting it to the DOM\n                if (BUILD.slotRelocation) {\n                    parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\n                }\n                else {\n                    oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        // we have some more new nodes to add which don't match up with old nodes\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if (BUILD.updatable && newStartIdx > newEndIdx) {\n        // there are nodes in the `oldCh` array which no longer correspond to nodes\n        // in the new array, so lets remove them (which entails cleaning up the\n        // relevant DOM nodes)\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\n/**\n * Compare two VNodes to determine if they are the same\n *\n * **NB**: This function is an equality _heuristic_ based on the available\n * information set on the two VNodes and can be misleading under certain\n * circumstances. In particular, if the two nodes do not have `key` attrs\n * (available under `$key$` on VNodes) then the function falls back on merely\n * checking that they have the same tag.\n *\n * So, in other words, if `key` attrs are not set on VNodes which may be\n * changing order within a `children` array or something along those lines then\n * we could obtain a false negative and then have to do needless re-rendering\n * (i.e. we'd say two VNodes aren't equal when in fact they should be).\n *\n * @param leftVNode the first VNode to check\n * @param rightVNode the second VNode to check\n * @returns whether they're equal or not\n */\nconst isSameVnode = (leftVNode, rightVNode) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (leftVNode.$tag$ === rightVNode.$tag$) {\n        if (BUILD.slotRelocation && leftVNode.$tag$ === 'slot') {\n            return leftVNode.$name$ === rightVNode.$name$;\n        }\n        // this will be set if components in the build have `key` attrs set on them\n        if (BUILD.vdomKey) {\n            return leftVNode.$key$ === rightVNode.$key$;\n        }\n        return true;\n    }\n    return false;\n};\nconst referenceNode = (node) => {\n    // this node was relocated to a new location in the dom\n    // because of some other component's slot\n    // but we still have an html comment in place of where\n    // it's original location was according to it's original vdom\n    return (node && node['s-ol']) || node;\n};\nconst parentReferenceNode = (node) => (node['s-ol'] ? node['s-ol'] : node).parentNode;\n/**\n * Handle reconciling an outdated VNode with a new one which corresponds to\n * it. This function handles flushing updates to the DOM and reconciling the\n * children of the two nodes (if any).\n *\n * @param oldVNode an old VNode whose DOM element and children we want to update\n * @param newVNode a new VNode representing an updated version of the old one\n */\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const tag = newVNode.$tag$;\n    const text = newVNode.$text$;\n    let defaultHolder;\n    if (!BUILD.vdomText || text === null) {\n        if (BUILD.svg) {\n            // test if we're rendering an svg element, or still rendering nodes inside of one\n            // only add this to the when the compiler sees we're using an svg somewhere\n            isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n        }\n        if (BUILD.vdomAttribute || BUILD.reflect) {\n            if (BUILD.slot && tag === 'slot')\n                ;\n            else {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if (BUILD.updatable && oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            // so we need to call `updateChildren` to reconcile them\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if (BUILD.updatable && BUILD.vdomText && oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if (BUILD.updatable && oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n        if (BUILD.svg && isSvgMode && tag === 'svg') {\n            isSvgMode = false;\n        }\n    }\n    else if (BUILD.vdomText && BUILD.slotRelocation && (defaultHolder = elm['s-cr'])) {\n        // this element has slotted content\n        defaultHolder.parentNode.textContent = text;\n    }\n    else if (BUILD.vdomText && oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\n/**\n * Adjust the `.hidden` property as-needed on any nodes in a DOM subtree which\n * are slot fallbacks nodes.\n *\n * A slot fallback node should be visible by default. Then, it should be\n * conditionally hidden if:\n *\n * - it has a sibling with a `slot` property set to its slot name or if\n * - it is a default fallback slot node, in which case we hide if it has any\n *   content\n *\n * @param elm the element of interest\n */\nconst updateFallbackSlotVisibility = (elm) => {\n    const childNodes = elm.childNodes;\n    for (const childNode of childNodes) {\n        if (childNode.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n            if (childNode['s-sr']) {\n                // this is a slot fallback node\n                // get the slot name for this slot reference node\n                const slotName = childNode['s-sn'];\n                // by default always show a fallback slot node\n                // then hide it if there are other slots in the light dom\n                childNode.hidden = false;\n                // we need to check all of its sibling nodes in order to see if\n                // `childNode` should be hidden\n                for (const siblingNode of childNodes) {\n                    if (siblingNode['s-hn'] !== childNode['s-hn'] || slotName !== '') {\n                        // this sibling node is from a different component OR is a named\n                        // fallback slot node\n                        if (siblingNode.nodeType === 1 /* NODE_TYPE.ElementNode */ && slotName === siblingNode.getAttribute('slot')) {\n                            childNode.hidden = true;\n                            break;\n                        }\n                    }\n                    else {\n                        // this is a default fallback slot node\n                        // any element or text node (with content)\n                        // should hide the default fallback slot node\n                        if (siblingNode.nodeType === 1 /* NODE_TYPE.ElementNode */ ||\n                            (siblingNode.nodeType === 3 /* NODE_TYPE.TextNode */ && siblingNode.textContent.trim() !== '')) {\n                            childNode.hidden = true;\n                            break;\n                        }\n                    }\n                }\n            }\n            // keep drilling down\n            updateFallbackSlotVisibility(childNode);\n        }\n    }\n};\n/**\n * Component-global information about nodes which are either currently being\n * relocated or will be shortly.\n */\nconst relocateNodes = [];\n/**\n * Mark the contents of a slot for relocation via adding references to them to\n * the {@link relocateNodes} data structure. The actual work of relocating them\n * will then be handled in {@link renderVdom}.\n *\n * @param elm a render node whose child nodes need to be relocated\n */\nconst markSlotContentForRelocation = (elm) => {\n    // tslint:disable-next-line: prefer-const\n    let node;\n    let hostContentNodes;\n    let j;\n    for (const childNode of elm.childNodes) {\n        // we need to find child nodes which are slot references so we can then try\n        // to match them up with nodes that need to be relocated\n        if (childNode['s-sr'] && (node = childNode['s-cr']) && node.parentNode) {\n            // first get the content reference comment node ('s-cr'), then we get\n            // its parent, which is where all the host content is now\n            hostContentNodes = node.parentNode.childNodes;\n            const slotName = childNode['s-sn'];\n            // iterate through all the nodes under the location where the host was\n            // originally rendered\n            for (j = hostContentNodes.length - 1; j >= 0; j--) {\n                node = hostContentNodes[j];\n                // check that the node is not a content reference node or a node\n                // reference and then check that the host name does not match that of\n                // childNode\n                if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn']) {\n                    // if `node` is located in the slot that `childNode` refers to (via the\n                    // `'s-sn'` property) then we need to relocate it from it's current spot\n                    // (under the host element parent) to the right slot location\n                    if (isNodeLocatedInSlot(node, slotName)) {\n                        // it's possible we've already decided to relocate this node\n                        let relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n                        // made some changes to slots\n                        // let's make sure we also double check\n                        // fallbacks are correctly hidden or shown\n                        checkSlotFallbackVisibility = true;\n                        // ensure that the slot-name attr is correct\n                        node['s-sn'] = node['s-sn'] || slotName;\n                        if (relocateNodeData) {\n                            // we marked this node for relocation previously but didn't find\n                            // out the slot reference node to which it needs to be relocated\n                            // so write it down now!\n                            relocateNodeData.$slotRefNode$ = childNode;\n                        }\n                        else {\n                            // add to our list of nodes to relocate\n                            relocateNodes.push({\n                                $slotRefNode$: childNode,\n                                $nodeToRelocate$: node,\n                            });\n                        }\n                        if (node['s-sr']) {\n                            relocateNodes.map((relocateNode) => {\n                                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {\n                                    relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n                                    if (relocateNodeData && !relocateNode.$slotRefNode$) {\n                                        relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\n                                    }\n                                }\n                            });\n                        }\n                    }\n                    else if (!relocateNodes.some((r) => r.$nodeToRelocate$ === node)) {\n                        // the node is not found within the slot (`childNode`) that we're\n                        // currently looking at, so we stick it into `relocateNodes` to\n                        // handle later. If we never find a home for this element then\n                        // we'll need to hide it\n                        relocateNodes.push({\n                            $nodeToRelocate$: node,\n                        });\n                    }\n                }\n            }\n        }\n        // if we're dealing with any type of element (capable of itself being a\n        // slot reference or containing one) then we recur\n        if (childNode.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n            markSlotContentForRelocation(childNode);\n        }\n    }\n};\n/**\n * Check whether a node is located in a given named slot.\n *\n * @param nodeToRelocate the node of interest\n * @param slotName the slot name to check\n * @returns whether the node is located in the slot or not\n */\nconst isNodeLocatedInSlot = (nodeToRelocate, slotName) => {\n    if (nodeToRelocate.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n        if (nodeToRelocate.getAttribute('slot') === null && slotName === '') {\n            // if the node doesn't have a slot attribute, and the slot we're checking\n            // is not a named slot, then we assume the node should be within the slot\n            return true;\n        }\n        if (nodeToRelocate.getAttribute('slot') === slotName) {\n            return true;\n        }\n        return false;\n    }\n    if (nodeToRelocate['s-sn'] === slotName) {\n        return true;\n    }\n    return slotName === '';\n};\n/**\n * 'Nullify' any VDom `ref` callbacks on a VDom node or its children by calling\n * them with `null`. This signals that the DOM element corresponding to the VDom\n * node has been removed from the DOM.\n *\n * @param vNode a virtual DOM node\n */\nconst nullifyVNodeRefs = (vNode) => {\n    if (BUILD.vdomRef) {\n        vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n        vNode.$children$ && vNode.$children$.map(nullifyVNodeRefs);\n    }\n};\n/**\n * The main entry point for Stencil's virtual DOM-based rendering engine\n *\n * Given a {@link d.HostRef} container and some virtual DOM nodes, this\n * function will handle creating a virtual DOM tree with a single root, patching\n * the current virtual DOM tree onto an old one (if any), dealing with slot\n * relocation, and reflecting attributes.\n *\n * @param hostRef data needed to root and render the virtual DOM tree, such as\n * the DOM node into which it should be rendered.\n * @param renderFnResults the virtual DOM nodes to be rendered\n * @param isInitialLoad whether or not this is the first call after page load\n */\nconst renderVdom = (hostRef, renderFnResults, isInitialLoad = false) => {\n    const hostElm = hostRef.$hostElement$;\n    const cmpMeta = hostRef.$cmpMeta$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    // if `renderFnResults` is a Host node then we can use it directly. If not,\n    // we need to call `h` again to wrap the children of our component in a\n    // 'dummy' Host node (well, an empty vnode) since `renderVdom` assumes\n    // implicitly that the top-level vdom node is 1) an only child and 2)\n    // contains attrs that need to be set on the host element.\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    // <Host> runtime check\n    if (BUILD.isDev && Array.isArray(renderFnResults) && renderFnResults.some(isHost)) {\n        throw new Error(`The <Host> must be the single root component.\nLooks like the render() function of \"${hostTagName.toLowerCase()}\" is returning an array that contains the <Host>.\n\nThe render() function should look like this instead:\n\nrender() {\n  // Do not return an array\n  return (\n    <Host>{content}</Host>\n  );\n}\n  `);\n    }\n    if (BUILD.reflect && cmpMeta.$attrsToReflect$) {\n        rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n        cmpMeta.$attrsToReflect$.map(([propName, attribute]) => (rootVnode.$attrs$[attribute] = hostElm[propName]));\n    }\n    // On the first render and *only* on the first render we want to check for\n    // any attributes set on the host element which are also set on the vdom\n    // node. If we find them, we override the value on the VDom node attrs with\n    // the value from the host element, which allows developers building apps\n    // with Stencil components to override e.g. the `role` attribute on a\n    // component even if it's already set on the `Host`.\n    if (isInitialLoad && rootVnode.$attrs$) {\n        for (const key of Object.keys(rootVnode.$attrs$)) {\n            // We have a special implementation in `setAccessor` for `style` and\n            // `class` which reconciles values coming from the VDom with values\n            // already present on the DOM element, so we don't want to override those\n            // attributes on the VDom tree with values from the host element if they\n            // are present.\n            //\n            // Likewise, `ref` and `key` are special internal values for the Stencil\n            // runtime and we don't want to override those either.\n            if (hostElm.hasAttribute(key) && !['key', 'ref', 'style', 'class'].includes(key)) {\n                rootVnode.$attrs$[key] = hostElm[key];\n            }\n        }\n    }\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* VNODE_FLAGS.isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = (BUILD.shadowDom ? hostElm.shadowRoot || hostElm : hostElm);\n    if (BUILD.scoped || BUILD.shadowDom) {\n        scopeId = hostElm['s-sc'];\n    }\n    if (BUILD.slotRelocation) {\n        contentRef = hostElm['s-cr'];\n        useNativeShadowDom = supportsShadow && (cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) !== 0;\n        // always reset\n        checkSlotFallbackVisibility = false;\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n    if (BUILD.slotRelocation) {\n        // while we're moving nodes around existing nodes, temporarily disable\n        // the disconnectCallback from working\n        plt.$flags$ |= 1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n        if (checkSlotRelocate) {\n            markSlotContentForRelocation(rootVnode.$elm$);\n            let relocateData;\n            let nodeToRelocate;\n            let orgLocationNode;\n            let parentNodeRef;\n            let insertBeforeNode;\n            let refNode;\n            let i = 0;\n            for (; i < relocateNodes.length; i++) {\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (!nodeToRelocate['s-ol']) {\n                    // add a reference node marking this node's original location\n                    // keep a reference to this node for later lookups\n                    orgLocationNode =\n                        BUILD.isDebug || BUILD.hydrateServerSide\n                            ? originalLocationDebugNode(nodeToRelocate)\n                            : doc.createTextNode('');\n                    orgLocationNode['s-nr'] = nodeToRelocate;\n                    nodeToRelocate.parentNode.insertBefore((nodeToRelocate['s-ol'] = orgLocationNode), nodeToRelocate);\n                }\n            }\n            for (i = 0; i < relocateNodes.length; i++) {\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (relocateData.$slotRefNode$) {\n                    // by default we're just going to insert it directly\n                    // after the slot reference node\n                    parentNodeRef = relocateData.$slotRefNode$.parentNode;\n                    insertBeforeNode = relocateData.$slotRefNode$.nextSibling;\n                    orgLocationNode = nodeToRelocate['s-ol'];\n                    while ((orgLocationNode = orgLocationNode.previousSibling)) {\n                        refNode = orgLocationNode['s-nr'];\n                        if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {\n                            refNode = refNode.nextSibling;\n                            if (!refNode || !refNode['s-nr']) {\n                                insertBeforeNode = refNode;\n                                break;\n                            }\n                        }\n                    }\n                    if ((!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode) ||\n                        nodeToRelocate.nextSibling !== insertBeforeNode) {\n                        // we've checked that it's worth while to relocate\n                        // since that the node to relocate\n                        // has a different next sibling or parent relocated\n                        if (nodeToRelocate !== insertBeforeNode) {\n                            if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {\n                                // probably a component in the index.html that doesn't have its hostname set\n                                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;\n                            }\n                            // add it back to the dom but in its new home\n                            parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);\n                        }\n                    }\n                }\n                else {\n                    // this node doesn't have a slot home to go to, so let's hide it\n                    if (nodeToRelocate.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n                        nodeToRelocate.hidden = true;\n                    }\n                }\n            }\n        }\n        if (checkSlotFallbackVisibility) {\n            updateFallbackSlotVisibility(rootVnode.$elm$);\n        }\n        // done moving nodes around\n        // allow the disconnect callback to work again\n        plt.$flags$ &= ~1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n        // always reset\n        relocateNodes.length = 0;\n    }\n};\n// slot comment debug nodes only created with the `--debug` flag\n// otherwise these nodes are text nodes w/out content\nconst slotReferenceDebugNode = (slotVNode) => doc.createComment(`<slot${slotVNode.$name$ ? ' name=\"' + slotVNode.$name$ + '\"' : ''}> (host=${hostTagName.toLowerCase()})`);\nconst originalLocationDebugNode = (nodeToRelocate) => doc.createComment(`org-location for ` +\n    (nodeToRelocate.localName\n        ? `<${nodeToRelocate.localName}> (host=${nodeToRelocate['s-hn']})`\n        : `[${nodeToRelocate.textContent}]`));\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if (BUILD.asyncLoading && ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    if (BUILD.taskQueue && BUILD.updatable) {\n        hostRef.$flags$ |= 16 /* HOST_FLAGS.isQueuedForUpdate */;\n    }\n    if (BUILD.asyncLoading && hostRef.$flags$ & 4 /* HOST_FLAGS.isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* HOST_FLAGS.needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return BUILD.taskQueue ? writeTask(dispatch) : dispatch();\n};\n/**\n * Dispatch initial-render and update lifecycle hooks, enqueuing calls to\n * component lifecycle methods like `componentWillLoad` as well as\n * {@link updateComponent}, which will kick off the virtual DOM re-render.\n *\n * @param hostRef a reference to a host DOM node\n * @param isInitialLoad whether we're on the initial load or not\n * @returns an empty Promise which is used to enqueue a series of operations for\n * the component\n */\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const elm = hostRef.$hostElement$;\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    // We're going to use this variable together with `enqueue` to implement a\n    // little promise-based queue. We start out with it `undefined`. When we add\n    // the first function to the queue we'll set this variable to be that\n    // function's return value. When we attempt to add subsequent values to the\n    // queue we'll check that value and, if it was a `Promise`, we'll then chain\n    // the new function off of that `Promise` using `.then()`. This will give our\n    // queue two nice properties:\n    //\n    // 1. If all functions added to the queue are synchronous they'll be called\n    //    synchronously right away.\n    // 2. If all functions added to the queue are asynchronous they'll all be\n    //    called in order after `dispatchHooks` exits.\n    let maybePromise;\n    if (isInitialLoad) {\n        if (BUILD.lazyLoad && BUILD.hostListener) {\n            hostRef.$flags$ |= 256 /* HOST_FLAGS.isListenReady */;\n            if (hostRef.$queuedListeners$) {\n                hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event));\n                hostRef.$queuedListeners$ = undefined;\n            }\n        }\n        emitLifecycleEvent(elm, 'componentWillLoad');\n        if (BUILD.cmpWillLoad) {\n            // If `componentWillLoad` returns a `Promise` then we want to wait on\n            // whatever's going on in that `Promise` before we launch into\n            // rendering the component, doing other lifecycle stuff, etc. So\n            // in that case we assign the returned promise to the variable we\n            // declared above to hold a possible 'queueing' Promise\n            maybePromise = safeCall(instance, 'componentWillLoad');\n        }\n    }\n    else {\n        emitLifecycleEvent(elm, 'componentWillUpdate');\n        if (BUILD.cmpWillUpdate) {\n            // Like `componentWillLoad` above, we allow Stencil component\n            // authors to return a `Promise` from this lifecycle callback, and\n            // we specify that our runtime will wait for that `Promise` to\n            // resolve before the component re-renders. So if the method\n            // returns a `Promise` we need to keep it around!\n            maybePromise = safeCall(instance, 'componentWillUpdate');\n        }\n    }\n    emitLifecycleEvent(elm, 'componentWillRender');\n    if (BUILD.cmpWillRender) {\n        maybePromise = enqueue(maybePromise, () => safeCall(instance, 'componentWillRender'));\n    }\n    endSchedule();\n    return enqueue(maybePromise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\n/**\n * This function uses a Promise to implement a simple first-in, first-out queue\n * of functions to be called.\n *\n * The queue is ordered on the basis of the first argument. If it's\n * `undefined`, then nothing is on the queue yet, so the provided function can\n * be called synchronously (although note that this function may return a\n * `Promise`). The idea is that then the return value of that enqueueing\n * operation is kept around, so that if it was a `Promise` then subsequent\n * functions can be enqueued by calling this function again with that `Promise`\n * as the first argument.\n *\n * @param maybePromise either a `Promise` which should resolve before the next function is called or an 'empty' sentinel\n * @param fn a function to enqueue\n * @returns either a `Promise` or the return value of the provided function\n */\nconst enqueue = (maybePromise, fn) => isPromisey(maybePromise) ? maybePromise.then(fn) : fn();\n/**\n * Check that a value is a `Promise`. To check, we first see if the value is an\n * instance of the `Promise` global. In a few circumstances, in particular if\n * the global has been overwritten, this is could be misleading, so we also do\n * a little 'duck typing' check to see if the `.then` property of the value is\n * defined and a function.\n *\n * @param maybePromise it might be a promise!\n * @returns whether it is or not\n */\nconst isPromisey = (maybePromise) => maybePromise instanceof Promise ||\n    (maybePromise && maybePromise.then && typeof maybePromise.then === 'function');\n/**\n * Update a component given reference to its host elements and so on.\n *\n * @param hostRef an object containing references to the element's host node,\n * VDom nodes, and other metadata\n * @param instance a reference to the underlying host element where it will be\n * rendered\n * @param isInitialLoad whether or not this function is being called as part of\n * the first render cycle\n */\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    var _a;\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if (BUILD.style && isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    if (BUILD.isDev) {\n        hostRef.$flags$ |= 1024 /* HOST_FLAGS.devOnRender */;\n    }\n    if (BUILD.hydrateServerSide) {\n        await callRender(hostRef, instance, elm, isInitialLoad);\n    }\n    else {\n        callRender(hostRef, instance, elm, isInitialLoad);\n    }\n    if (BUILD.isDev) {\n        hostRef.$renderCount$ = hostRef.$renderCount$ === undefined ? 1 : hostRef.$renderCount$ + 1;\n        hostRef.$flags$ &= ~1024 /* HOST_FLAGS.devOnRender */;\n    }\n    if (BUILD.hydrateServerSide) {\n        try {\n            // manually connected child components during server-side hydrate\n            serverSideConnected(elm);\n            if (isInitialLoad) {\n                // using only during server-side hydrate\n                if (hostRef.$cmpMeta$.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                    elm['s-en'] = '';\n                }\n                else if (hostRef.$cmpMeta$.$flags$ & 2 /* CMP_FLAGS.scopedCssEncapsulation */) {\n                    elm['s-en'] = 'c';\n                }\n            }\n        }\n        catch (e) {\n            consoleError(e, elm);\n        }\n    }\n    if (BUILD.asyncLoading && rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map((cb) => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    if (BUILD.asyncLoading) {\n        const childrenPromises = (_a = elm['s-p']) !== null && _a !== void 0 ? _a : [];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* HOST_FLAGS.isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n    else {\n        postUpdateComponent(hostRef);\n    }\n};\n/**\n * Handle making the call to the VDom renderer with the proper context given\n * various build variables\n *\n * @param hostRef an object containing references to the element's host node,\n * VDom nodes, and other metadata\n * @param instance a reference to the underlying host element where it will be\n * rendered\n * @param elm the Host element for the component\n * @param isInitialLoad whether or not this function is being called as part of\n * @returns an empty promise\n */\nconst callRender = (hostRef, instance, elm, isInitialLoad) => {\n    // in order for bundlers to correctly tree-shake the BUILD object\n    // we need to ensure BUILD is not deoptimized within a try/catch\n    // https://rollupjs.org/guide/en/#treeshake tryCatchDeoptimization\n    const allRenderFn = BUILD.allRenderFn ? true : false;\n    const lazyLoad = BUILD.lazyLoad ? true : false;\n    const taskQueue = BUILD.taskQueue ? true : false;\n    const updatable = BUILD.updatable ? true : false;\n    try {\n        renderingRef = instance;\n        /**\n         * minification optimization: `allRenderFn` is `true` if all components have a `render`\n         * method, so we can call the method immediately. If not, check before calling it.\n         */\n        instance = allRenderFn ? instance.render() : instance.render && instance.render();\n        if (updatable && taskQueue) {\n            hostRef.$flags$ &= ~16 /* HOST_FLAGS.isQueuedForUpdate */;\n        }\n        if (updatable || lazyLoad) {\n            hostRef.$flags$ |= 2 /* HOST_FLAGS.hasRendered */;\n        }\n        if (BUILD.hasRenderFn || BUILD.reflect) {\n            if (BUILD.vdomRender || BUILD.reflect) {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                if (BUILD.hydrateServerSide) {\n                    return Promise.resolve(instance).then((value) => renderVdom(hostRef, value, isInitialLoad));\n                }\n                else {\n                    renderVdom(hostRef, instance, isInitialLoad);\n                }\n            }\n            else {\n                elm.textContent = instance;\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    renderingRef = null;\n    return null;\n};\nconst getRenderingRef = () => renderingRef;\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    if (BUILD.cmpDidRender) {\n        if (BUILD.isDev) {\n            hostRef.$flags$ |= 1024 /* HOST_FLAGS.devOnRender */;\n        }\n        safeCall(instance, 'componentDidRender');\n        if (BUILD.isDev) {\n            hostRef.$flags$ &= ~1024 /* HOST_FLAGS.devOnRender */;\n        }\n    }\n    emitLifecycleEvent(elm, 'componentDidRender');\n    if (!(hostRef.$flags$ & 64 /* HOST_FLAGS.hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* HOST_FLAGS.hasLoadedComponent */;\n        if (BUILD.asyncLoading && BUILD.cssAnnotations) {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        if (BUILD.cmpDidLoad) {\n            if (BUILD.isDev) {\n                hostRef.$flags$ |= 2048 /* HOST_FLAGS.devOnDidLoad */;\n            }\n            safeCall(instance, 'componentDidLoad');\n            if (BUILD.isDev) {\n                hostRef.$flags$ &= ~2048 /* HOST_FLAGS.devOnDidLoad */;\n            }\n        }\n        emitLifecycleEvent(elm, 'componentDidLoad');\n        endPostUpdate();\n        if (BUILD.asyncLoading) {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad(tagName);\n            }\n        }\n    }\n    else {\n        if (BUILD.cmpDidUpdate) {\n            // we've already loaded this component\n            // fire off the user's componentDidUpdate method (if one was provided)\n            // componentDidUpdate runs AFTER render() has been called\n            // and all child components have finished updating\n            if (BUILD.isDev) {\n                hostRef.$flags$ |= 1024 /* HOST_FLAGS.devOnRender */;\n            }\n            safeCall(instance, 'componentDidUpdate');\n            if (BUILD.isDev) {\n                hostRef.$flags$ &= ~1024 /* HOST_FLAGS.devOnRender */;\n            }\n        }\n        emitLifecycleEvent(elm, 'componentDidUpdate');\n        endPostUpdate();\n    }\n    if (BUILD.method && BUILD.lazyLoad) {\n        hostRef.$onInstanceResolve$(elm);\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    if (BUILD.asyncLoading) {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* HOST_FLAGS.needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* HOST_FLAGS.isWaitingForChildren */ | 512 /* HOST_FLAGS.needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst forceUpdate = (ref) => {\n    if (BUILD.updatable && (Build.isBrowser || Build.isTesting)) {\n        const hostRef = getHostRef(ref);\n        const isConnected = hostRef.$hostElement$.isConnected;\n        if (isConnected &&\n            (hostRef.$flags$ & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\n            scheduleUpdate(hostRef, false);\n        }\n        // Returns \"true\" when the forced update was successfully scheduled\n        return isConnected;\n    }\n    return false;\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    if (BUILD.cssAnnotations) {\n        addHydratedFlag(doc.documentElement);\n    }\n    if (BUILD.asyncQueue) {\n        plt.$flags$ |= 2 /* PLATFORM_FLAGS.appLoaded */;\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n    if (BUILD.profile && performance.measure) {\n        performance.measure(`[Stencil] ${NAMESPACE} initial load (by ${who})`, 'st:app:start');\n    }\n};\n/**\n * Allows to safely call a method, e.g. `componentDidLoad`, on an instance,\n * e.g. custom element node. If a build figures out that e.g. no component\n * has a `componentDidLoad` method, the instance method gets removed from the\n * output bundle and this function returns `undefined`.\n * @param instance any object that may or may not contain methods\n * @param method method name\n * @param arg single arbitrary argument\n * @returns result of method call if it exists, otherwise `undefined`\n */\nconst safeCall = (instance, method, arg) => {\n    if (instance && instance[method]) {\n        try {\n            return instance[method](arg);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    return undefined;\n};\n/**\n * For debugging purposes as `BUILD.lifecycleDOMEvents` is `false` by default and will\n * get removed by the compiler. Used for timing events to see how long they take.\n * @param elm the target of the Event\n * @param lifecycleName name of the event\n */\nconst emitLifecycleEvent = (elm, lifecycleName) => {\n    if (BUILD.lifecycleDOMEvents) {\n        emitEvent(elm, 'stencil_' + lifecycleName, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                namespace: NAMESPACE,\n            },\n        });\n    }\n};\nconst addHydratedFlag = (elm) => BUILD.hydratedClass\n    ? elm.classList.add('hydrated')\n    : BUILD.hydratedAttribute\n        ? elm.setAttribute('hydrated', '')\n        : undefined;\nconst serverSideConnected = (elm) => {\n    const children = elm.children;\n    if (children != null) {\n        for (let i = 0, ii = children.length; i < ii; i++) {\n            const childElm = children[i];\n            if (typeof childElm.connectedCallback === 'function') {\n                childElm.connectedCallback();\n            }\n            serverSideConnected(childElm);\n        }\n    }\n};\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const elm = BUILD.lazyLoad ? hostRef.$hostElement$ : ref;\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n    const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n    const didValueChange = newVal !== oldVal && !areBothNaN;\n    if ((!BUILD.lazyLoad || !(flags & 8 /* HOST_FLAGS.isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (BUILD.isDev) {\n            if (hostRef.$flags$ & 1024 /* HOST_FLAGS.devOnRender */) {\n                consoleDevWarn(`The state/prop \"${propName}\" changed during rendering. This can potentially lead to infinite-loops and other bugs.`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n            }\n            else if (hostRef.$flags$ & 2048 /* HOST_FLAGS.devOnDidLoad */) {\n                consoleDevWarn(`The state/prop \"${propName}\" changed during \"componentDidLoad()\", this triggers extra re-renders, try to setup on \"componentWillLoad()\"`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n            }\n        }\n        if (!BUILD.lazyLoad || instance) {\n            // get an array of method names of watch functions to call\n            if (BUILD.watchCallback && cmpMeta.$watchers$ && flags & 128 /* HOST_FLAGS.isWatchReady */) {\n                const watchMethods = cmpMeta.$watchers$[propName];\n                if (watchMethods) {\n                    // this instance is watching for when this property changed\n                    watchMethods.map((watchMethodName) => {\n                        try {\n                            // fire off each of the watch methods that are watching this property\n                            instance[watchMethodName](newVal, oldVal, propName);\n                        }\n                        catch (e) {\n                            consoleError(e, elm);\n                        }\n                    });\n                }\n            }\n            if (BUILD.updatable &&\n                (flags & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\n                if (BUILD.cmpShouldUpdate && instance.componentShouldUpdate) {\n                    if (instance.componentShouldUpdate(newVal, oldVal, propName) === false) {\n                        return;\n                    }\n                }\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\n/**\n * Attach a series of runtime constructs to a compiled Stencil component\n * constructor, including getters and setters for the `@Prop` and `@State`\n * decorators, callbacks for when attributes change, and so on.\n *\n * @param Cstr the constructor for a component that we need to process\n * @param cmpMeta metadata collected previously about the component\n * @param flags a number used to store a series of bit flags\n * @returns a reference to the same constructor passed in (but now mutated)\n */\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    var _a;\n    if (BUILD.member && cmpMeta.$members$) {\n        if (BUILD.watchCallback && Cstr.watchers) {\n            cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]]) => {\n            if ((BUILD.prop || BUILD.state) &&\n                (memberFlags & 31 /* MEMBER_FLAGS.Prop */ ||\n                    ((!BUILD.lazyLoad || flags & 2 /* PROXY_FLAGS.proxyState */) && memberFlags & 32 /* MEMBER_FLAGS.State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // only during dev time\n                        if (BUILD.isDev) {\n                            const ref = getHostRef(this);\n                            if (\n                            // we are proxying the instance (not element)\n                            (flags & 1 /* PROXY_FLAGS.isElementConstructor */) === 0 &&\n                                // the element is not constructing\n                                (ref.$flags$ & 8 /* HOST_FLAGS.isConstructingInstance */) === 0 &&\n                                // the member is a prop\n                                (memberFlags & 31 /* MEMBER_FLAGS.Prop */) !== 0 &&\n                                // the member is not mutable\n                                (memberFlags & 1024 /* MEMBER_FLAGS.Mutable */) === 0) {\n                                consoleDevWarn(`@Prop() \"${memberName}\" on <${cmpMeta.$tagName$}> is immutable but was modified from within the component.\\nMore information: https://stenciljs.com/docs/properties#prop-mutability`);\n                            }\n                        }\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n            else if (BUILD.lazyLoad &&\n                BUILD.method &&\n                flags & 1 /* PROXY_FLAGS.isElementConstructor */ &&\n                memberFlags & 64 /* MEMBER_FLAGS.Method */) {\n                // proxyComponent - method\n                Object.defineProperty(prototype, memberName, {\n                    value(...args) {\n                        const ref = getHostRef(this);\n                        return ref.$onInstancePromise$.then(() => ref.$lazyInstance$[memberName](...args));\n                    },\n                });\n            }\n        });\n        if (BUILD.observeAttribute && (!BUILD.lazyLoad || flags & 1 /* PROXY_FLAGS.isElementConstructor */)) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function (attrName, oldValue, newValue) {\n                plt.jmp(() => {\n                    const propName = attrNameToPropName.get(attrName);\n                    //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n                    //  in the case where an attribute was set inline.\n                    //  ```html\n                    //    <my-component some-attribute=\"some-value\"></my-component>\n                    //  ```\n                    //\n                    //  There is an edge case where a developer sets the attribute inline on a custom element and then\n                    //  programmatically changes it before it has been upgraded as shown below:\n                    //\n                    //  ```html\n                    //    <!-- this component has _not_ been upgraded yet -->\n                    //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n                    //    <script>\n                    //      // grab non-upgraded component\n                    //      el = document.querySelector(\"#test\");\n                    //      el.someAttribute = \"another-value\";\n                    //      // upgrade component\n                    //      customElements.define('my-component', MyComponent);\n                    //    </script>\n                    //  ```\n                    //  In this case if we do not un-shadow here and use the value of the shadowing property, attributeChangedCallback\n                    //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n                    //  to the value that was set inline i.e. \"some-value\" from above example. When\n                    //  the connectedCallback attempts to un-shadow it will use \"some-value\" as the initial value rather than \"another-value\"\n                    //\n                    //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/un-shadowed\n                    //  by connectedCallback as this attributeChangedCallback will not fire.\n                    //\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n                    //\n                    //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n                    //  properties here given that this goes against best practices outlined here\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n                    if (this.hasOwnProperty(propName)) {\n                        newValue = this[propName];\n                        delete this[propName];\n                    }\n                    else if (prototype.hasOwnProperty(propName) &&\n                        typeof this[propName] === 'number' &&\n                        this[propName] == newValue) {\n                        // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n                        // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n                        // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n                        return;\n                    }\n                    else if (propName == null) {\n                        // At this point we should know this is not a \"member\", so we can treat it like watching an attribute\n                        // on a vanilla web component\n                        const hostRef = getHostRef(this);\n                        const flags = hostRef === null || hostRef === void 0 ? void 0 : hostRef.$flags$;\n                        // We only want to trigger the callback(s) if:\n                        // 1. The instance is ready\n                        // 2. The watchers are ready\n                        // 3. The value has changed\n                        if (!(flags & 8 /* HOST_FLAGS.isConstructingInstance */) &&\n                            flags & 128 /* HOST_FLAGS.isWatchReady */ &&\n                            newValue !== oldValue) {\n                            const elm = BUILD.lazyLoad ? hostRef.$hostElement$ : this;\n                            const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n                            const entry = cmpMeta.$watchers$[attrName];\n                            entry === null || entry === void 0 ? void 0 : entry.forEach((callbackName) => {\n                                if (instance[callbackName] != null) {\n                                    instance[callbackName].call(instance, newValue, oldValue, attrName);\n                                }\n                            });\n                        }\n                        return;\n                    }\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n                });\n            };\n            // Create an array of attributes to observe\n            // This list in comprised of all strings used within a `@Watch()` decorator\n            // on a component as well as any Stencil-specific \"members\" (`@Prop()`s and `@State()`s).\n            // As such, there is no way to guarantee type-safety here that a user hasn't entered\n            // an invalid attribute.\n            Cstr.observedAttributes = Array.from(new Set([\n                ...Object.keys((_a = cmpMeta.$watchers$) !== null && _a !== void 0 ? _a : {}),\n                ...members\n                    .filter(([_, m]) => m[0] & 15 /* MEMBER_FLAGS.HasAttribute */)\n                    .map(([propName, m]) => {\n                    const attrName = m[1] || propName;\n                    attrNameToPropName.set(attrName, propName);\n                    if (BUILD.reflect && m[0] & 512 /* MEMBER_FLAGS.ReflectAttr */) {\n                        cmpMeta.$attrsToReflect$.push([propName, attrName]);\n                    }\n                    return attrName;\n                }),\n            ]));\n        }\n    }\n    return Cstr;\n};\n/**\n * Initialize a Stencil component given a reference to its host element, its\n * runtime bookkeeping data structure, runtime metadata about the component,\n * and (optionally) an HMR version ID.\n *\n * @param elm a host element\n * @param hostRef the element's runtime bookkeeping object\n * @param cmpMeta runtime metadata for the Stencil component\n * @param hmrVersionId an (optional) HMR version ID\n */\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId) => {\n    let Cstr;\n    // initializeComponent\n    if ((hostRef.$flags$ & 32 /* HOST_FLAGS.hasInitializedComponent */) === 0) {\n        // Let the runtime know that the component has been initialized\n        hostRef.$flags$ |= 32 /* HOST_FLAGS.hasInitializedComponent */;\n        if (BUILD.lazyLoad || BUILD.hydrateClientSide) {\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta, hostRef, hmrVersionId);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime(`st:load:${cmpMeta.$tagName$}:${hostRef.$modeName$}`, `[Stencil] Load module for <${cmpMeta.$tagName$}>`);\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if ((BUILD.isDev || BUILD.isDebug) && !Cstr) {\n                throw new Error(`Constructor for \"${cmpMeta.$tagName$}#${hostRef.$modeName$}\" was not found`);\n            }\n            if (BUILD.member && !Cstr.isProxied) {\n                // we've never proxied this Constructor before\n                // let's add the getters/setters to its prototype before\n                // the first time we create an instance of the implementation\n                if (BUILD.watchCallback) {\n                    cmpMeta.$watchers$ = Cstr.watchers;\n                }\n                proxyComponent(Cstr, cmpMeta, 2 /* PROXY_FLAGS.proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            if (BUILD.member) {\n                hostRef.$flags$ |= 8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            if (BUILD.member) {\n                hostRef.$flags$ &= ~8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            if (BUILD.watchCallback) {\n                hostRef.$flags$ |= 128 /* HOST_FLAGS.isWatchReady */;\n            }\n            endNewInstance();\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        else {\n            // sync constructor component\n            Cstr = elm.constructor;\n            // wait for the CustomElementRegistry to mark the component as ready before setting `isWatchReady`. Otherwise,\n            // watchers may fire prematurely if `customElements.get()`/`customElements.whenDefined()` resolves _before_\n            // Stencil has completed instantiating the component.\n            customElements.whenDefined(cmpMeta.$tagName$).then(() => (hostRef.$flags$ |= 128 /* HOST_FLAGS.isWatchReady */));\n        }\n        if (BUILD.style && Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            if (BUILD.mode && typeof style !== 'string') {\n                style = style[(hostRef.$modeName$ = computeMode(elm))];\n                if (BUILD.hydrateServerSide && hostRef.$modeName$) {\n                    elm.setAttribute('s-mode', hostRef.$modeName$);\n                }\n            }\n            const scopeId = getScopeId(cmpMeta, hostRef.$modeName$);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                if (!BUILD.hydrateServerSide &&\n                    BUILD.shadowDom &&\n                    // TODO(STENCIL-854): Remove code related to legacy shadowDomShim field\n                    BUILD.shadowDomShim &&\n                    cmpMeta.$flags$ & 8 /* CMP_FLAGS.needsShadowDomShim */) {\n                    style = await import('./shadow-css.js').then((m) => m.scopeCss(style, scopeId, false));\n                }\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if (BUILD.asyncLoading && ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the initial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst fireConnectedCallback = (instance) => {\n    if (BUILD.lazyLoad && BUILD.connectedCallback) {\n        safeCall(instance, 'connectedCallback');\n    }\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (BUILD.hostListenerTargetParent) {\n            // only run if we have listeners being attached to a parent\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, true);\n        }\n        if (!(hostRef.$flags$ & 1 /* HOST_FLAGS.hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* HOST_FLAGS.hasConnected */;\n            let hostId;\n            if (BUILD.hydrateClientSide) {\n                hostId = elm.getAttribute(HYDRATE_ID);\n                if (hostId) {\n                    if (BUILD.shadowDom && supportsShadow && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                        const scopeId = BUILD.mode\n                            ? addStyle(elm.shadowRoot, cmpMeta, elm.getAttribute('s-mode'))\n                            : addStyle(elm.shadowRoot, cmpMeta);\n                        elm.classList.remove(scopeId + '-h', scopeId + '-s');\n                    }\n                    initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);\n                }\n            }\n            if (BUILD.slotRelocation && !hostId) {\n                // initUpdate\n                // if the slot polyfill is required we'll need to put some nodes\n                // in here to act as original content anchors as we move nodes around\n                // host element has been connected to the DOM\n                if (BUILD.hydrateServerSide ||\n                    ((BUILD.slot || BUILD.shadowDom) &&\n                        // TODO(STENCIL-854): Remove code related to legacy shadowDomShim field\n                        cmpMeta.$flags$ & (4 /* CMP_FLAGS.hasSlotRelocation */ | 8 /* CMP_FLAGS.needsShadowDomShim */))) {\n                    setContentReference(elm);\n                }\n            }\n            if (BUILD.asyncLoading) {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if ((BUILD.hydrateClientSide &&\n                        ancestorComponent.nodeType === 1 /* NODE_TYPE.ElementNode */ &&\n                        ancestorComponent.hasAttribute('s-id') &&\n                        ancestorComponent['s-p']) ||\n                        ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (BUILD.prop && !BUILD.hydrateServerSide && cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* MEMBER_FLAGS.Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            if (BUILD.initializeNextTick) {\n                // connectedCallback, taskQueue, initialLoad\n                // angular sets attribute AFTER connectCallback\n                // https://github.com/angular/angular/issues/18909\n                // https://github.com/angular/angular/issues/19940\n                nextTick(() => initializeComponent(elm, hostRef, cmpMeta));\n            }\n            else {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        else {\n            // not the first time this has connected\n            // reattach any event listeners to the host\n            // since they would have been removed when disconnected\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n            // fire off connectedCallback() on component instance\n            if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$lazyInstance$) {\n                fireConnectedCallback(hostRef.$lazyInstance$);\n            }\n            else if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$onReadyPromise$) {\n                hostRef.$onReadyPromise$.then(() => fireConnectedCallback(hostRef.$lazyInstance$));\n            }\n        }\n        endConnected();\n    }\n};\nconst setContentReference = (elm) => {\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    const contentRefElm = (elm['s-cr'] = doc.createComment(BUILD.isDebug ? `content-ref (host=${elm.localName})` : ''));\n    contentRefElm['s-cn'] = true;\n    elm.insertBefore(contentRefElm, elm.firstChild);\n};\nconst disconnectInstance = (instance) => {\n    if (BUILD.lazyLoad && BUILD.disconnectedCallback) {\n        safeCall(instance, 'disconnectedCallback');\n    }\n    if (BUILD.cmpDidUnload) {\n        safeCall(instance, 'componentDidUnload');\n    }\n};\nconst disconnectedCallback = async (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        if (BUILD.hostListener) {\n            if (hostRef.$rmListeners$) {\n                hostRef.$rmListeners$.map((rmListener) => rmListener());\n                hostRef.$rmListeners$ = undefined;\n            }\n        }\n        if (!BUILD.lazyLoad) {\n            disconnectInstance(elm);\n        }\n        else if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$lazyInstance$) {\n            disconnectInstance(hostRef.$lazyInstance$);\n        }\n        else if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$onReadyPromise$) {\n            hostRef.$onReadyPromise$.then(() => disconnectInstance(hostRef.$lazyInstance$));\n        }\n    }\n};\nconst patchPseudoShadowDom = (hostElementPrototype, descriptorPrototype) => {\n    patchCloneNode(hostElementPrototype);\n    patchSlotAppendChild(hostElementPrototype);\n    patchSlotAppend(hostElementPrototype);\n    patchSlotPrepend(hostElementPrototype);\n    patchSlotInsertAdjacentElement(hostElementPrototype);\n    patchSlotInsertAdjacentHTML(hostElementPrototype);\n    patchSlotInsertAdjacentText(hostElementPrototype);\n    patchTextContent(hostElementPrototype, descriptorPrototype);\n    patchChildSlotNodes(hostElementPrototype, descriptorPrototype);\n};\nconst patchCloneNode = (HostElementPrototype) => {\n    const orgCloneNode = HostElementPrototype.cloneNode;\n    HostElementPrototype.cloneNode = function (deep) {\n        const srcNode = this;\n        const isShadowDom = BUILD.shadowDom ? srcNode.shadowRoot && supportsShadow : false;\n        const clonedNode = orgCloneNode.call(srcNode, isShadowDom ? deep : false);\n        if (BUILD.slot && !isShadowDom && deep) {\n            let i = 0;\n            let slotted, nonStencilNode;\n            const stencilPrivates = [\n                's-id',\n                's-cr',\n                's-lr',\n                's-rc',\n                's-sc',\n                's-p',\n                's-cn',\n                's-sr',\n                's-sn',\n                's-hn',\n                's-ol',\n                's-nr',\n                's-si',\n            ];\n            for (; i < srcNode.childNodes.length; i++) {\n                slotted = srcNode.childNodes[i]['s-nr'];\n                nonStencilNode = stencilPrivates.every((privateField) => !srcNode.childNodes[i][privateField]);\n                if (slotted) {\n                    if (BUILD.appendChildSlotFix && clonedNode.__appendChild) {\n                        clonedNode.__appendChild(slotted.cloneNode(true));\n                    }\n                    else {\n                        clonedNode.appendChild(slotted.cloneNode(true));\n                    }\n                }\n                if (nonStencilNode) {\n                    clonedNode.appendChild(srcNode.childNodes[i].cloneNode(true));\n                }\n            }\n        }\n        return clonedNode;\n    };\n};\nconst patchSlotAppendChild = (HostElementPrototype) => {\n    HostElementPrototype.__appendChild = HostElementPrototype.appendChild;\n    HostElementPrototype.appendChild = function (newChild) {\n        const slotName = (newChild['s-sn'] = getSlotName(newChild));\n        const slotNode = getHostSlotNode(this.childNodes, slotName);\n        if (slotNode) {\n            const slotChildNodes = getHostSlotChildNodes(slotNode, slotName);\n            const appendAfter = slotChildNodes[slotChildNodes.length - 1];\n            return appendAfter.parentNode.insertBefore(newChild, appendAfter.nextSibling);\n        }\n        return this.__appendChild(newChild);\n    };\n};\n/**\n * Patches the `prepend` method for a slotted node inside a scoped component.\n *\n * @param HostElementPrototype the `Element` to be patched\n */\nconst patchSlotPrepend = (HostElementPrototype) => {\n    const originalPrepend = HostElementPrototype.prepend;\n    HostElementPrototype.prepend = function (...newChildren) {\n        newChildren.forEach((newChild) => {\n            if (typeof newChild === 'string') {\n                newChild = this.ownerDocument.createTextNode(newChild);\n            }\n            const slotName = (newChild['s-sn'] = getSlotName(newChild));\n            const slotNode = getHostSlotNode(this.childNodes, slotName);\n            if (slotNode) {\n                const slotPlaceholder = document.createTextNode('');\n                slotPlaceholder['s-nr'] = newChild;\n                slotNode['s-cr'].parentNode.__appendChild(slotPlaceholder);\n                newChild['s-ol'] = slotPlaceholder;\n                const slotChildNodes = getHostSlotChildNodes(slotNode, slotName);\n                const appendAfter = slotChildNodes[0];\n                return appendAfter.parentNode.insertBefore(newChild, appendAfter.nextSibling);\n            }\n            if (newChild.nodeType === 1 && !!newChild.getAttribute('slot')) {\n                newChild.hidden = true;\n            }\n            return originalPrepend.call(this, newChild);\n        });\n    };\n};\n/**\n * Patches the `append` method for a slotted node inside a scoped component. The patched method uses\n * `appendChild` under-the-hood while creating text nodes for any new children that passed as bare strings.\n *\n * @param HostElementPrototype the `Element` to be patched\n */\nconst patchSlotAppend = (HostElementPrototype) => {\n    HostElementPrototype.append = function (...newChildren) {\n        newChildren.forEach((newChild) => {\n            if (typeof newChild === 'string') {\n                newChild = this.ownerDocument.createTextNode(newChild);\n            }\n            this.appendChild(newChild);\n        });\n    };\n};\n/**\n * Patches the `insertAdjacentHTML` method for a slotted node inside a scoped component. Specifically,\n * we only need to patch the behavior for the specific `beforeend` and `afterbegin` positions so the element\n * gets inserted into the DOM in the correct location.\n *\n * @param HostElementPrototype the `Element` to be patched\n */\nconst patchSlotInsertAdjacentHTML = (HostElementPrototype) => {\n    const originalInsertAdjacentHtml = HostElementPrototype.insertAdjacentHTML;\n    HostElementPrototype.insertAdjacentHTML = function (position, text) {\n        if (position !== 'afterbegin' && position !== 'beforeend') {\n            return originalInsertAdjacentHtml.call(this, position, text);\n        }\n        const container = this.ownerDocument.createElement('_');\n        let node;\n        container.innerHTML = text;\n        if (position === 'afterbegin') {\n            while ((node = container.firstChild)) {\n                this.prepend(node);\n            }\n        }\n        else if (position === 'beforeend') {\n            while ((node = container.firstChild)) {\n                this.append(node);\n            }\n        }\n    };\n};\n/**\n * Patches the `insertAdjacentText` method for a slotted node inside a scoped component. Specifically,\n * we only need to patch the behavior for the specific `beforeend` and `afterbegin` positions so the text node\n * gets inserted into the DOM in the correct location.\n *\n * @param HostElementPrototype the `Element` to be patched\n */\nconst patchSlotInsertAdjacentText = (HostElementPrototype) => {\n    HostElementPrototype.insertAdjacentText = function (position, text) {\n        this.insertAdjacentHTML(position, text);\n    };\n};\n/**\n * Patches the `insertAdjacentElement` method for a slotted node inside a scoped component. Specifically,\n * we only need to patch the behavior for the specific `beforeend` and `afterbegin` positions so the element\n * gets inserted into the DOM in the correct location.\n *\n * @param HostElementPrototype the `Element` to be patched\n */\nconst patchSlotInsertAdjacentElement = (HostElementPrototype) => {\n    const originalInsertAdjacentElement = HostElementPrototype.insertAdjacentElement;\n    HostElementPrototype.insertAdjacentElement = function (position, element) {\n        if (position !== 'afterbegin' && position !== 'beforeend') {\n            return originalInsertAdjacentElement.call(this, position, element);\n        }\n        if (position === 'afterbegin') {\n            this.prepend(element);\n            return element;\n        }\n        else if (position === 'beforeend') {\n            this.append(element);\n            return element;\n        }\n        return element;\n    };\n};\n/**\n * Patches the text content of an unnamed slotted node inside a scoped component\n * @param hostElementPrototype the `Element` to be patched\n * @param cmpMeta component runtime metadata used to determine if the component should be patched or not\n */\nconst patchTextContent = (hostElementPrototype, cmpMeta) => {\n    if (BUILD.scoped && cmpMeta.$flags$ & 2 /* CMP_FLAGS.scopedCssEncapsulation */) {\n        const descriptor = Object.getOwnPropertyDescriptor(Node.prototype, 'textContent');\n        Object.defineProperty(hostElementPrototype, '__textContent', descriptor);\n        Object.defineProperty(hostElementPrototype, 'textContent', {\n            get() {\n                var _a;\n                // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\n                // the empty string\n                const slotNode = getHostSlotNode(this.childNodes, '');\n                // when a slot node is found, the textContent _may_ be found in the next sibling (text) node, depending on how\n                // nodes were reordered during the vdom render. first try to get the text content from the sibling.\n                if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3 /* NODE_TYPES.TEXT_NODE */) {\n                    return slotNode.nextSibling.textContent;\n                }\n                else if (slotNode) {\n                    return slotNode.textContent;\n                }\n                else {\n                    // fallback to the original implementation\n                    return this.__textContent;\n                }\n            },\n            set(value) {\n                var _a;\n                // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\n                // the empty string\n                const slotNode = getHostSlotNode(this.childNodes, '');\n                // when a slot node is found, the textContent _may_ need to be placed in the next sibling (text) node,\n                // depending on how nodes were reordered during the vdom render. first try to set the text content on the\n                // sibling.\n                if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3 /* NODE_TYPES.TEXT_NODE */) {\n                    slotNode.nextSibling.textContent = value;\n                }\n                else if (slotNode) {\n                    slotNode.textContent = value;\n                }\n                else {\n                    // we couldn't find a slot, but that doesn't mean that there isn't one. if this check ran before the DOM\n                    // loaded, we could have missed it. check for a content reference element on the scoped component and insert\n                    // it there\n                    this.__textContent = value;\n                    const contentRefElm = this['s-cr'];\n                    if (contentRefElm) {\n                        this.insertBefore(contentRefElm, this.firstChild);\n                    }\n                }\n            },\n        });\n    }\n};\nconst patchChildSlotNodes = (elm, cmpMeta) => {\n    class FakeNodeList extends Array {\n        item(n) {\n            return this[n];\n        }\n    }\n    // TODO(STENCIL-854): Remove code related to legacy shadowDomShim field\n    if (cmpMeta.$flags$ & 8 /* CMP_FLAGS.needsShadowDomShim */) {\n        const childNodesFn = elm.__lookupGetter__('childNodes');\n        Object.defineProperty(elm, 'children', {\n            get() {\n                return this.childNodes.map((n) => n.nodeType === 1);\n            },\n        });\n        Object.defineProperty(elm, 'childElementCount', {\n            get() {\n                return elm.children.length;\n            },\n        });\n        Object.defineProperty(elm, 'childNodes', {\n            get() {\n                const childNodes = childNodesFn.call(this);\n                if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0 &&\n                    getHostRef(this).$flags$ & 2 /* HOST_FLAGS.hasRendered */) {\n                    const result = new FakeNodeList();\n                    for (let i = 0; i < childNodes.length; i++) {\n                        const slot = childNodes[i]['s-nr'];\n                        if (slot) {\n                            result.push(slot);\n                        }\n                    }\n                    return result;\n                }\n                return FakeNodeList.from(childNodes);\n            },\n        });\n    }\n};\nconst getSlotName = (node) => node['s-sn'] || (node.nodeType === 1 && node.getAttribute('slot')) || '';\n/**\n * Recursively searches a series of child nodes for a slot with the provided name.\n * @param childNodes the nodes to search for a slot with a specific name.\n * @param slotName the name of the slot to match on.\n * @returns a reference to the slot node that matches the provided name, `null` otherwise\n */\nconst getHostSlotNode = (childNodes, slotName) => {\n    let i = 0;\n    let childNode;\n    for (; i < childNodes.length; i++) {\n        childNode = childNodes[i];\n        if (childNode['s-sr'] && childNode['s-sn'] === slotName) {\n            return childNode;\n        }\n        childNode = getHostSlotNode(childNode.childNodes, slotName);\n        if (childNode) {\n            return childNode;\n        }\n    }\n    return null;\n};\nconst getHostSlotChildNodes = (n, slotName) => {\n    const childNodes = [n];\n    while ((n = n.nextSibling) && n['s-sn'] === slotName) {\n        childNodes.push(n);\n    }\n    return childNodes;\n};\nconst defineCustomElement = (Cstr, compactMeta) => {\n    customElements.define(compactMeta[1], proxyCustomElement(Cstr, compactMeta));\n};\nconst proxyCustomElement = (Cstr, compactMeta) => {\n    const cmpMeta = {\n        $flags$: compactMeta[0],\n        $tagName$: compactMeta[1],\n    };\n    if (BUILD.member) {\n        cmpMeta.$members$ = compactMeta[2];\n    }\n    if (BUILD.hostListener) {\n        cmpMeta.$listeners$ = compactMeta[3];\n    }\n    if (BUILD.watchCallback) {\n        cmpMeta.$watchers$ = Cstr.$watchers$;\n    }\n    if (BUILD.reflect) {\n        cmpMeta.$attrsToReflect$ = [];\n    }\n    if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n        // TODO(STENCIL-854): Remove code related to legacy shadowDomShim field\n        cmpMeta.$flags$ |= 8 /* CMP_FLAGS.needsShadowDomShim */;\n    }\n    // TODO(STENCIL-914): this check and `else` block can go away and be replaced by just `BUILD.scoped` once we\n    // default our pseudo-slot behavior\n    if (BUILD.patchPseudoShadowDom && BUILD.scoped) {\n        patchPseudoShadowDom(Cstr.prototype, cmpMeta);\n    }\n    else {\n        if (BUILD.slotChildNodesFix) {\n            patchChildSlotNodes(Cstr.prototype, cmpMeta);\n        }\n        if (BUILD.cloneNodeFix) {\n            patchCloneNode(Cstr.prototype);\n        }\n        if (BUILD.appendChildSlotFix) {\n            patchSlotAppendChild(Cstr.prototype);\n        }\n        if (BUILD.scopedSlotTextContentFix) {\n            patchTextContent(Cstr.prototype, cmpMeta);\n        }\n    }\n    const originalConnectedCallback = Cstr.prototype.connectedCallback;\n    const originalDisconnectedCallback = Cstr.prototype.disconnectedCallback;\n    Object.assign(Cstr.prototype, {\n        __registerHost() {\n            registerHost(this, cmpMeta);\n        },\n        connectedCallback() {\n            connectedCallback(this);\n            if (BUILD.connectedCallback && originalConnectedCallback) {\n                originalConnectedCallback.call(this);\n            }\n        },\n        disconnectedCallback() {\n            disconnectedCallback(this);\n            if (BUILD.disconnectedCallback && originalDisconnectedCallback) {\n                originalDisconnectedCallback.call(this);\n            }\n        },\n        __attachShadow() {\n            if (supportsShadow) {\n                if (BUILD.shadowDelegatesFocus) {\n                    this.attachShadow({\n                        mode: 'open',\n                        delegatesFocus: !!(cmpMeta.$flags$ & 16 /* CMP_FLAGS.shadowDelegatesFocus */),\n                    });\n                }\n                else {\n                    this.attachShadow({ mode: 'open' });\n                }\n            }\n            else {\n                this.shadowRoot = this;\n            }\n        },\n    });\n    Cstr.is = cmpMeta.$tagName$;\n    return proxyComponent(Cstr, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */ | 2 /* PROXY_FLAGS.proxyState */);\n};\nconst forceModeUpdate = (elm) => {\n    if (BUILD.style && BUILD.mode && !BUILD.lazyLoad) {\n        const mode = computeMode(elm);\n        const hostRef = getHostRef(elm);\n        if (hostRef.$modeName$ !== mode) {\n            const cmpMeta = hostRef.$cmpMeta$;\n            const oldScopeId = elm['s-sc'];\n            const scopeId = getScopeId(cmpMeta, mode);\n            const style = elm.constructor.style[mode];\n            const flags = cmpMeta.$flags$;\n            if (style) {\n                if (!styles.has(scopeId)) {\n                    registerStyle(scopeId, style, !!(flags & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\n                }\n                hostRef.$modeName$ = mode;\n                elm.classList.remove(oldScopeId + '-h', oldScopeId + '-s');\n                attachStyles(hostRef);\n                forceUpdate(elm);\n            }\n        }\n    }\n};\n/**\n * Kick off hot-module-replacement for a component. In order to replace the\n * component in-place we:\n *\n * 1. get a reference to the {@link d.HostRef} for the element\n * 2. reset the element's runtime flags\n * 3. re-run the initialization logic for the element (via\n *    {@link initializeComponent})\n *\n * @param hostElement the host element for the component which we want to start\n * doing HMR\n * @param cmpMeta runtime metadata for the component\n * @param hmrVersionId the current HMR version ID\n */\nconst hmrStart = (hostElement, cmpMeta, hmrVersionId) => {\n    // ¯\\_(ツ)_/¯\n    const hostRef = getHostRef(hostElement);\n    // reset state flags to only have been connected\n    hostRef.$flags$ = 1 /* HOST_FLAGS.hasConnected */;\n    // TODO\n    // detach any event listeners that may have been added\n    // because we're not passing an exact event name it'll\n    // remove all of this element's event, which is good\n    // re-initialize the component\n    initializeComponent(hostElement, hostRef, cmpMeta, hmrVersionId);\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    var _a;\n    if (BUILD.profile && performance.mark) {\n        performance.mark('st:app:start');\n    }\n    installDevTools();\n    const endBootstrap = createTime('bootstrapLazy');\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    const styles = /*@__PURE__*/ doc.querySelectorAll(`[${HYDRATED_STYLE_ID}]`);\n    let appLoadFallback;\n    let isBootstrapping = true;\n    let i = 0;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    if (BUILD.asyncQueue) {\n        if (options.syncQueue) {\n            plt.$flags$ |= 4 /* PLATFORM_FLAGS.queueSync */;\n        }\n    }\n    if (BUILD.hydrateClientSide) {\n        // If the app is already hydrated there is not point to disable the\n        // async queue. This will improve the first input delay\n        plt.$flags$ |= 2 /* PLATFORM_FLAGS.appLoaded */;\n    }\n    if (BUILD.hydrateClientSide && BUILD.shadowDom) {\n        for (; i < styles.length; i++) {\n            registerStyle(styles[i].getAttribute(HYDRATED_STYLE_ID), convertScopedToShadow(styles[i].innerHTML), true);\n        }\n    }\n    lazyBundles.map((lazyBundle) => {\n        lazyBundle[1].map((compactMeta) => {\n            var _a;\n            const cmpMeta = {\n                $flags$: compactMeta[0],\n                $tagName$: compactMeta[1],\n                $members$: compactMeta[2],\n                $listeners$: compactMeta[3],\n            };\n            if (BUILD.member) {\n                cmpMeta.$members$ = compactMeta[2];\n            }\n            if (BUILD.hostListener) {\n                cmpMeta.$listeners$ = compactMeta[3];\n            }\n            if (BUILD.reflect) {\n                cmpMeta.$attrsToReflect$ = [];\n            }\n            if (BUILD.watchCallback) {\n                cmpMeta.$watchers$ = (_a = compactMeta[4]) !== null && _a !== void 0 ? _a : {};\n            }\n            if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                // TODO(STENCIL-854): Remove code related to legacy shadowDomShim field\n                cmpMeta.$flags$ |= 8 /* CMP_FLAGS.needsShadowDomShim */;\n            }\n            const tagName = BUILD.transformTagName && options.transformTagName\n                ? options.transformTagName(cmpMeta.$tagName$)\n                : cmpMeta.$tagName$;\n            const HostElement = class extends HTMLElement {\n                // StencilLazyHost\n                constructor(self) {\n                    // @ts-ignore\n                    super(self);\n                    self = this;\n                    registerHost(self, cmpMeta);\n                    if (BUILD.shadowDom && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                        // this component is using shadow dom\n                        // and this browser supports shadow dom\n                        // add the read-only property \"shadowRoot\" to the host element\n                        // adding the shadow root build conditionals to minimize runtime\n                        if (supportsShadow) {\n                            if (BUILD.shadowDelegatesFocus) {\n                                self.attachShadow({\n                                    mode: 'open',\n                                    delegatesFocus: !!(cmpMeta.$flags$ & 16 /* CMP_FLAGS.shadowDelegatesFocus */),\n                                });\n                            }\n                            else {\n                                self.attachShadow({ mode: 'open' });\n                            }\n                        }\n                        else if (!BUILD.hydrateServerSide && !('shadowRoot' in self)) {\n                            self.shadowRoot = self;\n                        }\n                    }\n                }\n                connectedCallback() {\n                    if (appLoadFallback) {\n                        clearTimeout(appLoadFallback);\n                        appLoadFallback = null;\n                    }\n                    if (isBootstrapping) {\n                        // connectedCallback will be processed once all components have been registered\n                        deferredConnectedCallbacks.push(this);\n                    }\n                    else {\n                        plt.jmp(() => connectedCallback(this));\n                    }\n                }\n                disconnectedCallback() {\n                    plt.jmp(() => disconnectedCallback(this));\n                }\n                componentOnReady() {\n                    return getHostRef(this).$onReadyPromise$;\n                }\n            };\n            // TODO(STENCIL-914): this check and `else` block can go away and be replaced by just `BUILD.scoped` once we\n            // default our pseudo-slot behavior\n            if (BUILD.patchPseudoShadowDom && BUILD.scoped) {\n                patchPseudoShadowDom(HostElement.prototype, cmpMeta);\n            }\n            else {\n                if (BUILD.slotChildNodesFix) {\n                    patchChildSlotNodes(HostElement.prototype, cmpMeta);\n                }\n                if (BUILD.cloneNodeFix) {\n                    patchCloneNode(HostElement.prototype);\n                }\n                if (BUILD.appendChildSlotFix) {\n                    patchSlotAppendChild(HostElement.prototype);\n                }\n                if (BUILD.scopedSlotTextContentFix) {\n                    patchTextContent(HostElement.prototype, cmpMeta);\n                }\n            }\n            // if the component is formAssociated we need to set that on the host\n            // element so that it will be ready for `attachInternals` to be called on\n            // it later on\n            if (BUILD.formAssociated && cmpMeta.$flags$ & 64 /* CMP_FLAGS.formAssociated */) {\n                HostElement.formAssociated = true;\n            }\n            if (BUILD.hotModuleReplacement) {\n                // if we're in an HMR dev build then we need to set up the callback\n                // which will carry out the work of actually replacing the module for\n                // this particular component\n                HostElement.prototype['s-hmr'] = function (hmrVersionId) {\n                    hmrStart(this, cmpMeta, hmrVersionId);\n                };\n            }\n            cmpMeta.$lazyBundleId$ = lazyBundle[0];\n            if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n                cmpTags.push(tagName);\n                customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */));\n            }\n        });\n    });\n    if (BUILD.invisiblePrehydration && (BUILD.hydratedClass || BUILD.hydratedAttribute)) {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute('data-styles', '');\n        // Apply CSP nonce to the style tag if it exists\n        const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n        if (nonce != null) {\n            visibilityStyle.setAttribute('nonce', nonce);\n        }\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map((host) => host.connectedCallback());\n    }\n    else {\n        if (BUILD.profile) {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30, 'timeout')));\n        }\n        else {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\nconst Fragment = (_, children) => children;\nconst addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {\n    if (BUILD.hostListener && listeners) {\n        // this is called immediately within the element's constructor\n        // initialize our event listeners on the host element\n        // we do this now so that we can listen to events that may\n        // have fired even before the instance is ready\n        if (BUILD.hostListenerTargetParent) {\n            // this component may have event listeners that should be attached to the parent\n            if (attachParentListeners) {\n                // this is being ran from within the connectedCallback\n                // which is important so that we know the host element actually has a parent element\n                // filter out the listeners to only have the ones that ARE being attached to the parent\n                listeners = listeners.filter(([flags]) => flags & 32 /* LISTENER_FLAGS.TargetParent */);\n            }\n            else {\n                // this is being ran from within the component constructor\n                // everything BUT the parent element listeners should be attached at this time\n                // filter out the listeners that are NOT being attached to the parent\n                listeners = listeners.filter(([flags]) => !(flags & 32 /* LISTENER_FLAGS.TargetParent */));\n            }\n        }\n        listeners.map(([flags, name, method]) => {\n            const target = BUILD.hostListenerTarget ? getHostListenerTarget(elm, flags) : elm;\n            const handler = hostListenerProxy(hostRef, method);\n            const opts = hostListenerOpts(flags);\n            plt.ael(target, name, handler, opts);\n            (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));\n        });\n    }\n};\nconst hostListenerProxy = (hostRef, methodName) => (ev) => {\n    try {\n        if (BUILD.lazyLoad) {\n            if (hostRef.$flags$ & 256 /* HOST_FLAGS.isListenReady */) {\n                // instance is ready, let's call it's member method for this event\n                hostRef.$lazyInstance$[methodName](ev);\n            }\n            else {\n                (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\n            }\n        }\n        else {\n            hostRef.$hostElement$[methodName](ev);\n        }\n    }\n    catch (e) {\n        consoleError(e);\n    }\n};\nconst getHostListenerTarget = (elm, flags) => {\n    if (BUILD.hostListenerTargetDocument && flags & 4 /* LISTENER_FLAGS.TargetDocument */)\n        return doc;\n    if (BUILD.hostListenerTargetWindow && flags & 8 /* LISTENER_FLAGS.TargetWindow */)\n        return win;\n    if (BUILD.hostListenerTargetBody && flags & 16 /* LISTENER_FLAGS.TargetBody */)\n        return doc.body;\n    if (BUILD.hostListenerTargetParent && flags & 32 /* LISTENER_FLAGS.TargetParent */)\n        return elm.parentElement;\n    return elm;\n};\n// prettier-ignore\nconst hostListenerOpts = (flags) => supportsListenerOptions\n    ? ({\n        passive: (flags & 1 /* LISTENER_FLAGS.Passive */) !== 0,\n        capture: (flags & 2 /* LISTENER_FLAGS.Capture */) !== 0,\n    })\n    : (flags & 2 /* LISTENER_FLAGS.Capture */) !== 0;\n/**\n * Assigns the given value to the nonce property on the runtime platform object.\n * During runtime, this value is used to set the nonce attribute on all dynamically created script and style tags.\n * @param nonce The value to be assigned to the platform nonce property.\n * @returns void\n */\nconst setNonce = (nonce) => (plt.$nonce$ = nonce);\nconst setPlatformOptions = (opts) => Object.assign(plt, opts);\nconst insertVdomAnnotations = (doc, staticComponents) => {\n    if (doc != null) {\n        const docData = {\n            hostIds: 0,\n            rootLevelIds: 0,\n            staticComponents: new Set(staticComponents),\n        };\n        const orgLocationNodes = [];\n        parseVNodeAnnotations(doc, doc.body, docData, orgLocationNodes);\n        orgLocationNodes.forEach((orgLocationNode) => {\n            if (orgLocationNode != null) {\n                const nodeRef = orgLocationNode['s-nr'];\n                let hostId = nodeRef['s-host-id'];\n                let nodeId = nodeRef['s-node-id'];\n                let childId = `${hostId}.${nodeId}`;\n                if (hostId == null) {\n                    hostId = 0;\n                    docData.rootLevelIds++;\n                    nodeId = docData.rootLevelIds;\n                    childId = `${hostId}.${nodeId}`;\n                    if (nodeRef.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n                        nodeRef.setAttribute(HYDRATE_CHILD_ID, childId);\n                    }\n                    else if (nodeRef.nodeType === 3 /* NODE_TYPE.TextNode */) {\n                        if (hostId === 0) {\n                            const textContent = nodeRef.nodeValue.trim();\n                            if (textContent === '') {\n                                // useless whitespace node at the document root\n                                orgLocationNode.remove();\n                                return;\n                            }\n                        }\n                        const commentBeforeTextNode = doc.createComment(childId);\n                        commentBeforeTextNode.nodeValue = `${TEXT_NODE_ID}.${childId}`;\n                        nodeRef.parentNode.insertBefore(commentBeforeTextNode, nodeRef);\n                    }\n                }\n                let orgLocationNodeId = `${ORG_LOCATION_ID}.${childId}`;\n                const orgLocationParentNode = orgLocationNode.parentElement;\n                if (orgLocationParentNode) {\n                    if (orgLocationParentNode['s-en'] === '') {\n                        // ending with a \".\" means that the parent element\n                        // of this node's original location is a SHADOW dom element\n                        // and this node is apart of the root level light dom\n                        orgLocationNodeId += `.`;\n                    }\n                    else if (orgLocationParentNode['s-en'] === 'c') {\n                        // ending with a \".c\" means that the parent element\n                        // of this node's original location is a SCOPED element\n                        // and this node is apart of the root level light dom\n                        orgLocationNodeId += `.c`;\n                    }\n                }\n                orgLocationNode.nodeValue = orgLocationNodeId;\n            }\n        });\n    }\n};\nconst parseVNodeAnnotations = (doc, node, docData, orgLocationNodes) => {\n    if (node == null) {\n        return;\n    }\n    if (node['s-nr'] != null) {\n        orgLocationNodes.push(node);\n    }\n    if (node.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n        node.childNodes.forEach((childNode) => {\n            const hostRef = getHostRef(childNode);\n            if (hostRef != null && !docData.staticComponents.has(childNode.nodeName.toLowerCase())) {\n                const cmpData = {\n                    nodeIds: 0,\n                };\n                insertVNodeAnnotations(doc, childNode, hostRef.$vnode$, docData, cmpData);\n            }\n            parseVNodeAnnotations(doc, childNode, docData, orgLocationNodes);\n        });\n    }\n};\nconst insertVNodeAnnotations = (doc, hostElm, vnode, docData, cmpData) => {\n    if (vnode != null) {\n        const hostId = ++docData.hostIds;\n        hostElm.setAttribute(HYDRATE_ID, hostId);\n        if (hostElm['s-cr'] != null) {\n            hostElm['s-cr'].nodeValue = `${CONTENT_REF_ID}.${hostId}`;\n        }\n        if (vnode.$children$ != null) {\n            const depth = 0;\n            vnode.$children$.forEach((vnodeChild, index) => {\n                insertChildVNodeAnnotations(doc, vnodeChild, cmpData, hostId, depth, index);\n            });\n        }\n        if (hostElm && vnode && vnode.$elm$ && !hostElm.hasAttribute('c-id')) {\n            const parent = hostElm.parentElement;\n            if (parent && parent.childNodes) {\n                const parentChildNodes = Array.from(parent.childNodes);\n                const comment = parentChildNodes.find((node) => node.nodeType === 8 /* NODE_TYPE.CommentNode */ && node['s-sr']);\n                if (comment) {\n                    const index = parentChildNodes.indexOf(hostElm) - 1;\n                    vnode.$elm$.setAttribute(HYDRATE_CHILD_ID, `${comment['s-host-id']}.${comment['s-node-id']}.0.${index}`);\n                }\n            }\n        }\n    }\n};\nconst insertChildVNodeAnnotations = (doc, vnodeChild, cmpData, hostId, depth, index) => {\n    const childElm = vnodeChild.$elm$;\n    if (childElm == null) {\n        return;\n    }\n    const nodeId = cmpData.nodeIds++;\n    const childId = `${hostId}.${nodeId}.${depth}.${index}`;\n    childElm['s-host-id'] = hostId;\n    childElm['s-node-id'] = nodeId;\n    if (childElm.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n        childElm.setAttribute(HYDRATE_CHILD_ID, childId);\n    }\n    else if (childElm.nodeType === 3 /* NODE_TYPE.TextNode */) {\n        const parentNode = childElm.parentNode;\n        const nodeName = parentNode.nodeName;\n        if (nodeName !== 'STYLE' && nodeName !== 'SCRIPT') {\n            const textNodeId = `${TEXT_NODE_ID}.${childId}`;\n            const commentBeforeTextNode = doc.createComment(textNodeId);\n            parentNode.insertBefore(commentBeforeTextNode, childElm);\n        }\n    }\n    else if (childElm.nodeType === 8 /* NODE_TYPE.CommentNode */) {\n        if (childElm['s-sr']) {\n            const slotName = childElm['s-sn'] || '';\n            const slotNodeId = `${SLOT_NODE_ID}.${childId}.${slotName}`;\n            childElm.nodeValue = slotNodeId;\n        }\n    }\n    if (vnodeChild.$children$ != null) {\n        const childDepth = depth + 1;\n        vnodeChild.$children$.forEach((vnode, index) => {\n            insertChildVNodeAnnotations(doc, vnode, cmpData, hostId, childDepth, index);\n        });\n    }\n};\n/**\n * A WeakMap mapping runtime component references to their corresponding host reference\n * instances.\n */\nconst hostRefs = /*@__PURE__*/ new WeakMap();\n/**\n * Given a {@link d.RuntimeRef} retrieve the corresponding {@link d.HostRef}\n *\n * @param ref the runtime ref of interest\n * @returns the Host reference (if found) or undefined\n */\nconst getHostRef = (ref) => hostRefs.get(ref);\n/**\n * Register a lazy instance with the {@link hostRefs} object so it's\n * corresponding {@link d.HostRef} can be retrieved later.\n *\n * @param lazyInstance the lazy instance of interest\n * @param hostRef that instances `HostRef` object\n * @returns a reference to the host ref WeakMap\n */\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\n/**\n * Register a host element for a Stencil component, setting up various metadata\n * and callbacks based on {@link BUILD} flags as well as the component's runtime\n * metadata.\n *\n * @param hostElement the host element to register\n * @param cmpMeta runtime metadata for that component\n * @returns a reference to the host ref WeakMap\n */\nconst registerHost = (hostElement, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: hostElement,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    if (BUILD.isDev) {\n        hostRef.$renderCount$ = 0;\n    }\n    if (BUILD.method && BUILD.lazyLoad) {\n        hostRef.$onInstancePromise$ = new Promise((r) => (hostRef.$onInstanceResolve$ = r));\n    }\n    if (BUILD.asyncLoading) {\n        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));\n        hostElement['s-p'] = [];\n        hostElement['s-rc'] = [];\n    }\n    addHostEventListeners(hostElement, hostRef, cmpMeta.$listeners$, false);\n    return hostRefs.set(hostElement, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (customError || console.error)(e, el);\nconst STENCIL_DEV_MODE = BUILD.isTesting\n    ? ['STENCIL:'] // E2E testing\n    : [\n        '%cstencil',\n        'color: white;background:#4c47ff;font-weight: bold; font-size:10px; padding:2px 6px; border-radius: 5px',\n    ];\nconst consoleDevError = (...m) => console.error(...STENCIL_DEV_MODE, ...m);\nconst consoleDevWarn = (...m) => console.warn(...STENCIL_DEV_MODE, ...m);\nconst consoleDevInfo = (...m) => console.info(...STENCIL_DEV_MODE, ...m);\nconst setErrorHandler = (handler) => (customError = handler);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    if (BUILD.isDev && typeof bundleId !== 'string') {\n        consoleDevError(`Trying to lazily load component <${cmpMeta.$tagName$}> with style mode \"${hostRef.$modeName$}\", but it does not exist.`);\n        return undefined;\n    }\n    const module = !BUILD.hotModuleReplacement ? cmpModules.get(bundleId) : false;\n    if (module) {\n        return module[exportName];\n    }\n    /*!__STENCIL_STATIC_IMPORT_SWITCH__*/\n    return import(\n    /* @vite-ignore */\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${BUILD.hotModuleReplacement && hmrVersionId ? '?s-hmr=' + hmrVersionId : ''}`).then((importedModule) => {\n        if (!BUILD.hotModuleReplacement) {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = /*@__PURE__*/ new Map();\nconst modeResolutionChain = [];\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || { head: {} };\nconst H = (win.HTMLElement || class {\n});\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: (h) => h(),\n    raf: (h) => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst setPlatformHelpers = (helpers) => {\n    Object.assign(plt, helpers);\n};\nconst supportsShadow = \n// TODO(STENCIL-854): Remove code related to legacy shadowDomShim field\nBUILD.shadowDomShim && BUILD.shadowDom\n    ? /*@__PURE__*/ (() => (doc.head.attachShadow + '').indexOf('[native') > -1)()\n    : true;\nconst supportsListenerOptions = /*@__PURE__*/ (() => {\n    let supportsListenerOptions = false;\n    try {\n        doc.addEventListener('e', null, Object.defineProperty({}, 'passive', {\n            get() {\n                supportsListenerOptions = true;\n            },\n        }));\n    }\n    catch (e) { }\n    return supportsListenerOptions;\n})();\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructableStylesheets = BUILD.constructableCSS\n    ? /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return typeof new CSSStyleSheet().replaceSync === 'function';\n        }\n        catch (e) { }\n        return false;\n    })()\n    : false;\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueDomWritesLow = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* PLATFORM_FLAGS.queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst consumeTimeout = (queue, timeout) => {\n    let i = 0;\n    let ts = 0;\n    while (i < queue.length && (ts = performance.now()) < timeout) {\n        try {\n            queue[i++](ts);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    if (i === queue.length) {\n        queue.length = 0;\n    }\n    else if (i !== 0) {\n        queue.splice(0, i);\n    }\n};\nconst flush = () => {\n    if (BUILD.asyncQueue) {\n        queueCongestion++;\n    }\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    if (BUILD.asyncQueue) {\n        const timeout = (plt.$flags$ & 6 /* PLATFORM_FLAGS.queueMask */) === 2 /* PLATFORM_FLAGS.appLoaded */\n            ? performance.now() + 14 * Math.ceil(queueCongestion * (1.0 / 10.0))\n            : Infinity;\n        consumeTimeout(queueDomWrites, timeout);\n        consumeTimeout(queueDomWritesLow, timeout);\n        if (queueDomWrites.length > 0) {\n            queueDomWritesLow.push(...queueDomWrites);\n            queueDomWrites.length = 0;\n        }\n        if ((queuePending = queueDomReads.length + queueDomWrites.length + queueDomWritesLow.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n        else {\n            queueCongestion = 0;\n        }\n    }\n    else {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\nconst readTask = /*@__PURE__*/ queueTask(queueDomReads, false);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\nexport { BUILD, Env, NAMESPACE } from '@stencil/core/internal/app-data';\nexport { Build, Fragment, H, H as HTMLElement, Host, STENCIL_DEV_MODE, addHostEventListeners, bootstrapLazy, cmpModules, connectedCallback, consoleDevError, consoleDevInfo, consoleDevWarn, consoleError, createEvent, defineCustomElement, disconnectedCallback, doc, forceModeUpdate, forceUpdate, getAssetPath, getElement, getHostRef, getMode, getRenderingRef, getValue, h, insertVdomAnnotations, isMemberInElement, loadModule, modeResolutionChain, nextTick, parsePropertyValue, plt, postUpdateComponent, promiseResolve, proxyComponent, proxyCustomElement, readTask, registerHost, registerInstance, renderVdom, setAssetPath, setErrorHandler, setMode, setNonce, setPlatformHelpers, setPlatformOptions, setValue, styles, supportsConstructableStylesheets, supportsListenerOptions, supportsShadow, win, writeTask };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}